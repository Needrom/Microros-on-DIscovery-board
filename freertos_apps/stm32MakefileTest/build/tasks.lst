ARM GAS  /tmp/cc65XYwf.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	pxCurrentTCB
  18              		.section	.bss.pxCurrentTCB,"aw",%nobits
  19              		.align	2
  22              	pxCurrentTCB:
  23 0000 00000000 		.space	4
  24              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  25              		.align	2
  28              	pxReadyTasksLists:
  29 0000 00000000 		.space	1120
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  31              		.align	2
  34              	xDelayedTaskList1:
  35 0000 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  37              		.align	2
  40              	xDelayedTaskList2:
  41 0000 00000000 		.space	20
  41      00000000 
  41      00000000 
  41      00000000 
  41      00000000 
  42              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  43              		.align	2
  46              	pxDelayedTaskList:
  47 0000 00000000 		.space	4
  48              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  49              		.align	2
  52              	pxOverflowDelayedTaskList:
  53 0000 00000000 		.space	4
  54              		.section	.bss.xPendingReadyList,"aw",%nobits
  55              		.align	2
  58              	xPendingReadyList:
  59 0000 00000000 		.space	20
ARM GAS  /tmp/cc65XYwf.s 			page 2


  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
  60              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  61              		.align	2
  64              	xTasksWaitingTermination:
  65 0000 00000000 		.space	20
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  67              		.align	2
  70              	uxDeletedTasksWaitingCleanUp:
  71 0000 00000000 		.space	4
  72              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  73              		.align	2
  76              	xSuspendedTaskList:
  77 0000 00000000 		.space	20
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  79              		.align	2
  82              	uxCurrentNumberOfTasks:
  83 0000 00000000 		.space	4
  84              		.section	.bss.xTickCount,"aw",%nobits
  85              		.align	2
  88              	xTickCount:
  89 0000 00000000 		.space	4
  90              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  91              		.align	2
  94              	uxTopReadyPriority:
  95 0000 00000000 		.space	4
  96              		.section	.bss.xSchedulerRunning,"aw",%nobits
  97              		.align	2
 100              	xSchedulerRunning:
 101 0000 00000000 		.space	4
 102              		.section	.bss.uxPendedTicks,"aw",%nobits
 103              		.align	2
 106              	uxPendedTicks:
 107 0000 00000000 		.space	4
 108              		.section	.bss.xYieldPending,"aw",%nobits
 109              		.align	2
 112              	xYieldPending:
 113 0000 00000000 		.space	4
 114              		.section	.bss.xNumOfOverflows,"aw",%nobits
 115              		.align	2
 118              	xNumOfOverflows:
 119 0000 00000000 		.space	4
 120              		.section	.bss.uxTaskNumber,"aw",%nobits
 121              		.align	2
 124              	uxTaskNumber:
 125 0000 00000000 		.space	4
 126              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
ARM GAS  /tmp/cc65XYwf.s 			page 3


 127              		.align	2
 130              	xNextTaskUnblockTime:
 131 0000 00000000 		.space	4
 132              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 133              		.align	2
 136              	xIdleTaskHandle:
 137 0000 00000000 		.space	4
 138              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 139              		.align	2
 142              	uxSchedulerSuspended:
 143 0000 00000000 		.space	4
 144              		.section	.text.xTaskCreateStatic,"ax",%progbits
 145              		.align	1
 146              		.global	xTaskCreateStatic
 147              		.arch armv7e-m
 148              		.syntax unified
 149              		.thumb
 150              		.thumb_func
 151              		.fpu fpv4-sp-d16
 153              	xTaskCreateStatic:
 154              	.LFB4:
 155              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
ARM GAS  /tmp/cc65XYwf.s 			page 4


  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  /tmp/cc65XYwf.s 			page 5


  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 6


 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
ARM GAS  /tmp/cc65XYwf.s 			page 7


 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
ARM GAS  /tmp/cc65XYwf.s 			page 8


 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  /tmp/cc65XYwf.s 			page 9


 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = { 0 };/*< Prioritised rea
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = { 0 };						/*< Delayed tasks. */
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = { 0 };						/*< Delayed tasks (two lists are used
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;				/*< Points to the delayed tas
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;		/*< Points to the delay
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = { 0 };						/*< Tasks that have been readied whil
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xTasksWaitingTermination = { 0 };				/*< Tasks that have been deleted
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = { 0 };					/*< Tasks that are currently suspend
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 10


 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
ARM GAS  /tmp/cc65XYwf.s 			page 11


 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 12


 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
ARM GAS  /tmp/cc65XYwf.s 			page 13


 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 156              		.loc 1 585 2
 157              		.cfi_startproc
 158              		@ args = 12, pretend = 0, frame = 40
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 0000 80B5     		push	{r7, lr}
 161              	.LCFI0:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 8EB0     		sub	sp, sp, #56
 166              	.LCFI1:
 167              		.cfi_def_cfa_offset 64
 168 0004 04AF     		add	r7, sp, #16
 169              	.LCFI2:
 170              		.cfi_def_cfa 7, 48
 171 0006 F860     		str	r0, [r7, #12]
 172 0008 B960     		str	r1, [r7, #8]
 173 000a 7A60     		str	r2, [r7, #4]
 174 000c 3B60     		str	r3, [r7]
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
ARM GAS  /tmp/cc65XYwf.s 			page 14


 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 175              		.loc 1 589 3
 176 000e 7B6B     		ldr	r3, [r7, #52]
 177 0010 002B     		cmp	r3, #0
 178 0012 09D1     		bne	.L2
 179              	.LBB117:
 180              	.LBB118:
 181              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
ARM GAS  /tmp/cc65XYwf.s 			page 15


  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
ARM GAS  /tmp/cc65XYwf.s 			page 16


 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
ARM GAS  /tmp/cc65XYwf.s 			page 17


 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 182              		.loc 2 195 2 discriminator 1
 183              		.syntax unified
 184              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 185 0014 4FF05003 			mov r3, #80												
 186 0018 83F31188 		msr basepri, r3											
 187 001c BFF36F8F 		isb														
 188 0020 BFF34F8F 		dsb														
 189              	
 190              	@ 0 "" 2
 191              		.thumb
 192              		.syntax unified
 193 0024 3B62     		str	r3, [r7, #32]
 194              	.L3:
 195              	.LBE118:
 196              	.LBE117:
 197              		.loc 1 589 3 discriminator 1
 198 0026 FEE7     		b	.L3
 199              	.L2:
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 200              		.loc 1 590 3
 201 0028 BB6B     		ldr	r3, [r7, #56]
 202 002a 002B     		cmp	r3, #0
 203 002c 09D1     		bne	.L4
ARM GAS  /tmp/cc65XYwf.s 			page 18


 204              	.LBB119:
 205              	.LBB120:
 206              		.loc 2 195 2 discriminator 1
 207              		.syntax unified
 208              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 209 002e 4FF05003 			mov r3, #80												
 210 0032 83F31188 		msr basepri, r3											
 211 0036 BFF36F8F 		isb														
 212 003a BFF34F8F 		dsb														
 213              	
 214              	@ 0 "" 2
 215              		.thumb
 216              		.syntax unified
 217 003e FB61     		str	r3, [r7, #28]
 218              	.L5:
 219              	.LBE120:
 220              	.LBE119:
 221              		.loc 1 590 3 discriminator 2
 222 0040 FEE7     		b	.L5
 223              	.L4:
 224              	.LBB121:
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 225              		.loc 1 597 20
 226 0042 5C23     		movs	r3, #92
 227 0044 3B61     		str	r3, [r7, #16]
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 228              		.loc 1 598 4
 229 0046 3B69     		ldr	r3, [r7, #16]
 230 0048 5C2B     		cmp	r3, #92
 231 004a 09D0     		beq	.L6
 232              	.LBB122:
 233              	.LBB123:
 234              		.loc 2 195 2 discriminator 1
 235              		.syntax unified
 236              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 237 004c 4FF05003 			mov r3, #80												
 238 0050 83F31188 		msr basepri, r3											
 239 0054 BFF36F8F 		isb														
 240 0058 BFF34F8F 		dsb														
 241              	
 242              	@ 0 "" 2
 243              		.thumb
 244              		.syntax unified
 245 005c BB61     		str	r3, [r7, #24]
 246              	.L7:
 247              	.LBE123:
 248              	.LBE122:
 249              		.loc 1 598 4 discriminator 3
 250 005e FEE7     		b	.L7
 251              	.L6:
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
ARM GAS  /tmp/cc65XYwf.s 			page 19


 252              		.loc 1 599 4
 253 0060 3B69     		ldr	r3, [r7, #16]
 254              	.LBE121:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 255              		.loc 1 604 5
 256 0062 BB6B     		ldr	r3, [r7, #56]
 257 0064 002B     		cmp	r3, #0
 258 0066 1ED0     		beq	.L8
 259              		.loc 1 604 32 discriminator 1
 260 0068 7B6B     		ldr	r3, [r7, #52]
 261 006a 002B     		cmp	r3, #0
 262 006c 1BD0     		beq	.L8
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 263              		.loc 1 608 13
 264 006e BB6B     		ldr	r3, [r7, #56]
 265 0070 7B62     		str	r3, [r7, #36]
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 266              		.loc 1 609 22
 267 0072 7B6A     		ldr	r3, [r7, #36]
 268 0074 7A6B     		ldr	r2, [r7, #52]
 269 0076 1A63     		str	r2, [r3, #48]
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 270              		.loc 1 615 37
 271 0078 7B6A     		ldr	r3, [r7, #36]
 272 007a 0222     		movs	r2, #2
 273 007c 83F85920 		strb	r2, [r3, #89]
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 274              		.loc 1 619 4
 275 0080 0023     		movs	r3, #0
 276 0082 0393     		str	r3, [sp, #12]
 277 0084 7B6A     		ldr	r3, [r7, #36]
 278 0086 0293     		str	r3, [sp, #8]
 279 0088 07F11403 		add	r3, r7, #20
 280 008c 0193     		str	r3, [sp, #4]
 281 008e 3B6B     		ldr	r3, [r7, #48]
 282 0090 0093     		str	r3, [sp]
 283 0092 3B68     		ldr	r3, [r7]
 284 0094 7A68     		ldr	r2, [r7, #4]
 285 0096 B968     		ldr	r1, [r7, #8]
 286 0098 F868     		ldr	r0, [r7, #12]
 287 009a FFF7FEFF 		bl	prvInitialiseNewTask
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
ARM GAS  /tmp/cc65XYwf.s 			page 20


 288              		.loc 1 620 4
 289 009e 786A     		ldr	r0, [r7, #36]
 290 00a0 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 291 00a4 01E0     		b	.L9
 292              	.L8:
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 293              		.loc 1 624 12
 294 00a6 0023     		movs	r3, #0
 295 00a8 7B61     		str	r3, [r7, #20]
 296              	.L9:
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 297              		.loc 1 627 10
 298 00aa 7B69     		ldr	r3, [r7, #20]
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 299              		.loc 1 628 2
 300 00ac 1846     		mov	r0, r3
 301 00ae 2837     		adds	r7, r7, #40
 302              	.LCFI3:
 303              		.cfi_def_cfa_offset 8
 304 00b0 BD46     		mov	sp, r7
 305              	.LCFI4:
 306              		.cfi_def_cfa_register 13
 307              		@ sp needed
 308 00b2 80BD     		pop	{r7, pc}
 309              		.cfi_endproc
 310              	.LFE4:
 312              		.section	.text.xTaskCreate,"ax",%progbits
 313              		.align	1
 314              		.global	xTaskCreate
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu fpv4-sp-d16
 320              	xTaskCreate:
 321              	.LFB5:
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
ARM GAS  /tmp/cc65XYwf.s 			page 21


 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
ARM GAS  /tmp/cc65XYwf.s 			page 22


 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 322              		.loc 1 736 2
 323              		.cfi_startproc
 324              		@ args = 8, pretend = 0, frame = 32
 325              		@ frame_needed = 1, uses_anonymous_args = 0
 326 0000 80B5     		push	{r7, lr}
 327              	.LCFI5:
 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 7, -8
 330              		.cfi_offset 14, -4
 331 0002 8CB0     		sub	sp, sp, #48
 332              	.LCFI6:
 333              		.cfi_def_cfa_offset 56
 334 0004 04AF     		add	r7, sp, #16
 335              	.LCFI7:
 336              		.cfi_def_cfa 7, 40
 337 0006 F860     		str	r0, [r7, #12]
 338 0008 B960     		str	r1, [r7, #8]
 339 000a 3B60     		str	r3, [r7]
 340 000c 1346     		mov	r3, r2	@ movhi
 341 000e FB80     		strh	r3, [r7, #6]	@ movhi
 342              	.LBB124:
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
ARM GAS  /tmp/cc65XYwf.s 			page 23


 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 343              		.loc 1 770 32
 344 0010 FB88     		ldrh	r3, [r7, #6]
 345              		.loc 1 770 14
 346 0012 9B00     		lsls	r3, r3, #2
 347 0014 1846     		mov	r0, r3
 348 0016 FFF7FEFF 		bl	pvPortMalloc
 349 001a 7861     		str	r0, [r7, #20]
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 350              		.loc 1 772 6
 351 001c 7B69     		ldr	r3, [r7, #20]
 352 001e 002B     		cmp	r3, #0
 353 0020 0ED0     		beq	.L12
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 354              		.loc 1 775 28
 355 0022 5C20     		movs	r0, #92
 356 0024 FFF7FEFF 		bl	pvPortMalloc
 357 0028 F861     		str	r0, [r7, #28]
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 358              		.loc 1 777 7
 359 002a FB69     		ldr	r3, [r7, #28]
 360 002c 002B     		cmp	r3, #0
ARM GAS  /tmp/cc65XYwf.s 			page 24


 361 002e 03D0     		beq	.L13
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 362              		.loc 1 780 24
 363 0030 FB69     		ldr	r3, [r7, #28]
 364 0032 7A69     		ldr	r2, [r7, #20]
 365 0034 1A63     		str	r2, [r3, #48]
 366 0036 05E0     		b	.L15
 367              	.L13:
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 368              		.loc 1 786 6
 369 0038 7869     		ldr	r0, [r7, #20]
 370 003a FFF7FEFF 		bl	vPortFree
 371 003e 01E0     		b	.L15
 372              	.L12:
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 373              		.loc 1 791 14
 374 0040 0023     		movs	r3, #0
 375 0042 FB61     		str	r3, [r7, #28]
 376              	.L15:
 377              	.LBE124:
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 378              		.loc 1 796 5
 379 0044 FB69     		ldr	r3, [r7, #28]
 380 0046 002B     		cmp	r3, #0
 381 0048 17D0     		beq	.L16
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 382              		.loc 1 802 37
 383 004a FB69     		ldr	r3, [r7, #28]
 384 004c 0022     		movs	r2, #0
 385 004e 83F85920 		strb	r2, [r3, #89]
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 386              		.loc 1 806 4
 387 0052 FA88     		ldrh	r2, [r7, #6]
 388 0054 0023     		movs	r3, #0
ARM GAS  /tmp/cc65XYwf.s 			page 25


 389 0056 0393     		str	r3, [sp, #12]
 390 0058 FB69     		ldr	r3, [r7, #28]
 391 005a 0293     		str	r3, [sp, #8]
 392 005c FB6A     		ldr	r3, [r7, #44]
 393 005e 0193     		str	r3, [sp, #4]
 394 0060 BB6A     		ldr	r3, [r7, #40]
 395 0062 0093     		str	r3, [sp]
 396 0064 3B68     		ldr	r3, [r7]
 397 0066 B968     		ldr	r1, [r7, #8]
 398 0068 F868     		ldr	r0, [r7, #12]
 399 006a FFF7FEFF 		bl	prvInitialiseNewTask
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 400              		.loc 1 807 4
 401 006e F869     		ldr	r0, [r7, #28]
 402 0070 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 403              		.loc 1 808 12
 404 0074 0123     		movs	r3, #1
 405 0076 BB61     		str	r3, [r7, #24]
 406 0078 02E0     		b	.L17
 407              	.L16:
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 408              		.loc 1 812 12
 409 007a 4FF0FF33 		mov	r3, #-1
 410 007e BB61     		str	r3, [r7, #24]
 411              	.L17:
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 412              		.loc 1 815 10
 413 0080 BB69     		ldr	r3, [r7, #24]
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 414              		.loc 1 816 2
 415 0082 1846     		mov	r0, r3
 416 0084 2037     		adds	r7, r7, #32
 417              	.LCFI8:
 418              		.cfi_def_cfa_offset 8
 419 0086 BD46     		mov	sp, r7
 420              	.LCFI9:
 421              		.cfi_def_cfa_register 13
 422              		@ sp needed
 423 0088 80BD     		pop	{r7, pc}
 424              		.cfi_endproc
 425              	.LFE5:
 427              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 428              		.align	1
 429              		.syntax unified
 430              		.thumb
 431              		.thumb_func
 432              		.fpu fpv4-sp-d16
 434              	prvInitialiseNewTask:
 435              	.LFB6:
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
ARM GAS  /tmp/cc65XYwf.s 			page 26


 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 436              		.loc 1 829 1
 437              		.cfi_startproc
 438              		@ args = 16, pretend = 0, frame = 32
 439              		@ frame_needed = 1, uses_anonymous_args = 0
 440 0000 80B5     		push	{r7, lr}
 441              	.LCFI10:
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 7, -8
 444              		.cfi_offset 14, -4
 445 0002 88B0     		sub	sp, sp, #32
 446              	.LCFI11:
 447              		.cfi_def_cfa_offset 40
 448 0004 00AF     		add	r7, sp, #0
 449              	.LCFI12:
 450              		.cfi_def_cfa_register 7
 451 0006 F860     		str	r0, [r7, #12]
 452 0008 B960     		str	r1, [r7, #8]
 453 000a 7A60     		str	r2, [r7, #4]
 454 000c 3B60     		str	r3, [r7]
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 455              		.loc 1 851 28
 456 000e 3B6B     		ldr	r3, [r7, #48]
 457 0010 186B     		ldr	r0, [r3, #48]
 458              		.loc 1 851 12
 459 0012 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc65XYwf.s 			page 27


 460 0014 9B00     		lsls	r3, r3, #2
 461 0016 1A46     		mov	r2, r3
 462 0018 A521     		movs	r1, #165
 463 001a FFF7FEFF 		bl	memset
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 464              		.loc 1 861 29
 465 001e 3B6B     		ldr	r3, [r7, #48]
 466 0020 1A6B     		ldr	r2, [r3, #48]
 467              		.loc 1 861 18
 468 0022 7B68     		ldr	r3, [r7, #4]
 469 0024 03F18043 		add	r3, r3, #1073741824
 470 0028 013B     		subs	r3, r3, #1
 471 002a 9B00     		lsls	r3, r3, #2
 472              		.loc 1 861 16
 473 002c 1344     		add	r3, r3, r2
 474 002e BB61     		str	r3, [r7, #24]
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 475              		.loc 1 862 40
 476 0030 BB69     		ldr	r3, [r7, #24]
 477              		.loc 1 862 81
 478 0032 23F00703 		bic	r3, r3, #7
 479              		.loc 1 862 16
 480 0036 BB61     		str	r3, [r7, #24]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 481              		.loc 1 865 3
 482 0038 BB69     		ldr	r3, [r7, #24]
 483 003a 03F00703 		and	r3, r3, #7
 484 003e 002B     		cmp	r3, #0
 485 0040 09D0     		beq	.L20
 486              	.LBB125:
 487              	.LBB126:
 488              		.loc 2 195 2 discriminator 1
 489              		.syntax unified
 490              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 491 0042 4FF05003 			mov r3, #80												
 492 0046 83F31188 		msr basepri, r3											
 493 004a BFF36F8F 		isb														
 494 004e BFF34F8F 		dsb														
 495              	
 496              	@ 0 "" 2
 497              		.thumb
 498              		.syntax unified
 499 0052 7B61     		str	r3, [r7, #20]
 500              	.L21:
 501              	.LBE126:
 502              	.LBE125:
ARM GAS  /tmp/cc65XYwf.s 			page 28


 503              		.loc 1 865 3 discriminator 1
 504 0054 FEE7     		b	.L21
 505              	.L20:
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 506              		.loc 1 889 4
 507 0056 BB68     		ldr	r3, [r7, #8]
 508 0058 002B     		cmp	r3, #0
 509 005a 1FD0     		beq	.L22
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 510              		.loc 1 891 10
 511 005c 0023     		movs	r3, #0
 512 005e FB61     		str	r3, [r7, #28]
 513              		.loc 1 891 3
 514 0060 12E0     		b	.L23
 515              	.L26:
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 516              		.loc 1 893 38
 517 0062 BA68     		ldr	r2, [r7, #8]
 518 0064 FB69     		ldr	r3, [r7, #28]
 519 0066 1344     		add	r3, r3, r2
 520 0068 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 521              		.loc 1 893 30
 522 006a 3A6B     		ldr	r2, [r7, #48]
 523 006c FB69     		ldr	r3, [r7, #28]
 524 006e 1344     		add	r3, r3, r2
 525 0070 3433     		adds	r3, r3, #52
 526 0072 0A46     		mov	r2, r1
 527 0074 1A70     		strb	r2, [r3]
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
ARM GAS  /tmp/cc65XYwf.s 			page 29


 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 528              		.loc 1 898 14
 529 0076 BA68     		ldr	r2, [r7, #8]
 530 0078 FB69     		ldr	r3, [r7, #28]
 531 007a 1344     		add	r3, r3, r2
 532 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 533              		.loc 1 898 6
 534 007e 002B     		cmp	r3, #0
 535 0080 06D0     		beq	.L30
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 536              		.loc 1 891 77 discriminator 2
 537 0082 FB69     		ldr	r3, [r7, #28]
 538 0084 0133     		adds	r3, r3, #1
 539 0086 FB61     		str	r3, [r7, #28]
 540              	.L23:
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 541              		.loc 1 891 3 discriminator 1
 542 0088 FB69     		ldr	r3, [r7, #28]
 543 008a 0F2B     		cmp	r3, #15
 544 008c E9D9     		bls	.L26
 545 008e 00E0     		b	.L25
 546              	.L30:
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 547              		.loc 1 900 5
 548 0090 00BF     		nop
 549              	.L25:
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 550              		.loc 1 910 55
 551 0092 3B6B     		ldr	r3, [r7, #48]
 552 0094 0022     		movs	r2, #0
 553 0096 83F84320 		strb	r2, [r3, #67]
 554 009a 03E0     		b	.L27
 555              	.L22:
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 556              		.loc 1 916 29
 557 009c 3B6B     		ldr	r3, [r7, #48]
 558 009e 0022     		movs	r2, #0
 559 00a0 83F83420 		strb	r2, [r3, #52]
 560              	.L27:
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
ARM GAS  /tmp/cc65XYwf.s 			page 30


 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 561              		.loc 1 921 4
 562 00a4 BB6A     		ldr	r3, [r7, #40]
 563 00a6 372B     		cmp	r3, #55
 564 00a8 01D9     		bls	.L28
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 565              		.loc 1 923 14
 566 00aa 3723     		movs	r3, #55
 567 00ac BB62     		str	r3, [r7, #40]
 568              	.L28:
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 569              		.loc 1 930 23
 570 00ae 3B6B     		ldr	r3, [r7, #48]
 571 00b0 BA6A     		ldr	r2, [r7, #40]
 572 00b2 DA62     		str	r2, [r3, #44]
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 573              		.loc 1 933 28
 574 00b4 3B6B     		ldr	r3, [r7, #48]
 575 00b6 BA6A     		ldr	r2, [r7, #40]
 576 00b8 DA64     		str	r2, [r3, #76]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 577              		.loc 1 934 27
 578 00ba 3B6B     		ldr	r3, [r7, #48]
 579 00bc 0022     		movs	r2, #0
 580 00be 1A65     		str	r2, [r3, #80]
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 581              		.loc 1 938 2
 582 00c0 3B6B     		ldr	r3, [r7, #48]
 583 00c2 0433     		adds	r3, r3, #4
 584 00c4 1846     		mov	r0, r3
 585 00c6 FFF7FEFF 		bl	vListInitialiseItem
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 586              		.loc 1 939 2
 587 00ca 3B6B     		ldr	r3, [r7, #48]
 588 00cc 1833     		adds	r3, r3, #24
 589 00ce 1846     		mov	r0, r3
 590 00d0 FFF7FEFF 		bl	vListInitialiseItem
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 591              		.loc 1 943 2
 592 00d4 3B6B     		ldr	r3, [r7, #48]
 593 00d6 3A6B     		ldr	r2, [r7, #48]
ARM GAS  /tmp/cc65XYwf.s 			page 31


 594 00d8 1A61     		str	r2, [r3, #16]
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 595              		.loc 1 946 2
 596 00da BB6A     		ldr	r3, [r7, #40]
 597 00dc C3F13802 		rsb	r2, r3, #56
 598 00e0 3B6B     		ldr	r3, [r7, #48]
 599 00e2 9A61     		str	r2, [r3, #24]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 600              		.loc 1 947 2
 601 00e4 3B6B     		ldr	r3, [r7, #48]
 602 00e6 3A6B     		ldr	r2, [r7, #48]
 603 00e8 5A62     		str	r2, [r3, #36]
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 604              		.loc 1 989 29
ARM GAS  /tmp/cc65XYwf.s 			page 32


 605 00ea 3B6B     		ldr	r3, [r7, #48]
 606 00ec 0022     		movs	r2, #0
 607 00ee 5A65     		str	r2, [r3, #84]
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 608              		.loc 1 990 27
 609 00f0 3B6B     		ldr	r3, [r7, #48]
 610 00f2 0022     		movs	r2, #0
 611 00f4 83F85820 		strb	r2, [r3, #88]
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
ARM GAS  /tmp/cc65XYwf.s 			page 33


1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 612              		.loc 1 1053 29
 613 00f8 3A68     		ldr	r2, [r7]
 614 00fa F968     		ldr	r1, [r7, #12]
 615 00fc B869     		ldr	r0, [r7, #24]
 616 00fe FFF7FEFF 		bl	pxPortInitialiseStack
 617 0102 0246     		mov	r2, r0
 618              		.loc 1 1053 27
 619 0104 3B6B     		ldr	r3, [r7, #48]
 620 0106 1A60     		str	r2, [r3]
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 621              		.loc 1 1059 4
 622 0108 FB6A     		ldr	r3, [r7, #44]
 623 010a 002B     		cmp	r3, #0
 624 010c 02D0     		beq	.L31
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 625              		.loc 1 1063 18
 626 010e FB6A     		ldr	r3, [r7, #44]
 627 0110 3A6B     		ldr	r2, [r7, #48]
 628 0112 1A60     		str	r2, [r3]
 629              	.L31:
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 630              		.loc 1 1069 1
 631 0114 00BF     		nop
 632 0116 2037     		adds	r7, r7, #32
 633              	.LCFI13:
 634              		.cfi_def_cfa_offset 8
 635 0118 BD46     		mov	sp, r7
 636              	.LCFI14:
 637              		.cfi_def_cfa_register 13
 638              		@ sp needed
ARM GAS  /tmp/cc65XYwf.s 			page 34


 639 011a 80BD     		pop	{r7, pc}
 640              		.cfi_endproc
 641              	.LFE6:
 643              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 644              		.align	1
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 648              		.fpu fpv4-sp-d16
 650              	prvAddNewTaskToReadyList:
 651              	.LFB7:
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 652              		.loc 1 1073 1
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 8
 655              		@ frame_needed = 1, uses_anonymous_args = 0
 656 0000 80B5     		push	{r7, lr}
 657              	.LCFI15:
 658              		.cfi_def_cfa_offset 8
 659              		.cfi_offset 7, -8
 660              		.cfi_offset 14, -4
 661 0002 82B0     		sub	sp, sp, #8
 662              	.LCFI16:
 663              		.cfi_def_cfa_offset 16
 664 0004 00AF     		add	r7, sp, #0
 665              	.LCFI17:
 666              		.cfi_def_cfa_register 7
 667 0006 7860     		str	r0, [r7, #4]
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 668              		.loc 1 1076 2
 669 0008 FFF7FEFF 		bl	vPortEnterCritical
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 670              		.loc 1 1078 25
 671 000c 2D4B     		ldr	r3, .L38
 672 000e 1B68     		ldr	r3, [r3]
 673 0010 0133     		adds	r3, r3, #1
 674 0012 2C4A     		ldr	r2, .L38
 675 0014 1360     		str	r3, [r2]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 676              		.loc 1 1079 20
 677 0016 2C4B     		ldr	r3, .L38+4
 678 0018 1B68     		ldr	r3, [r3]
 679              		.loc 1 1079 5
 680 001a 002B     		cmp	r3, #0
 681 001c 09D1     		bne	.L33
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 682              		.loc 1 1083 17
 683 001e 2A4A     		ldr	r2, .L38+4
ARM GAS  /tmp/cc65XYwf.s 			page 35


 684 0020 7B68     		ldr	r3, [r7, #4]
 685 0022 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 686              		.loc 1 1085 31
 687 0024 274B     		ldr	r3, .L38
 688 0026 1B68     		ldr	r3, [r3]
 689              		.loc 1 1085 6
 690 0028 012B     		cmp	r3, #1
 691 002a 10D1     		bne	.L34
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 692              		.loc 1 1090 5
 693 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 694 0030 0DE0     		b	.L34
 695              	.L33:
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 696              		.loc 1 1102 26
 697 0032 264B     		ldr	r3, .L38+8
 698 0034 1B68     		ldr	r3, [r3]
 699              		.loc 1 1102 6
 700 0036 002B     		cmp	r3, #0
 701 0038 09D1     		bne	.L34
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 702              		.loc 1 1104 21
 703 003a 234B     		ldr	r3, .L38+4
 704 003c 1B68     		ldr	r3, [r3]
 705 003e DA6A     		ldr	r2, [r3, #44]
 706              		.loc 1 1104 45
 707 0040 7B68     		ldr	r3, [r7, #4]
 708 0042 DB6A     		ldr	r3, [r3, #44]
 709              		.loc 1 1104 7
 710 0044 9A42     		cmp	r2, r3
 711 0046 02D8     		bhi	.L34
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 712              		.loc 1 1106 19
 713 0048 1F4A     		ldr	r2, .L38+4
 714 004a 7B68     		ldr	r3, [r7, #4]
 715 004c 1360     		str	r3, [r2]
 716              	.L34:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc65XYwf.s 			page 36


1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 717              		.loc 1 1119 15
 718 004e 204B     		ldr	r3, .L38+12
 719 0050 1B68     		ldr	r3, [r3]
 720 0052 0133     		adds	r3, r3, #1
 721 0054 1E4A     		ldr	r2, .L38+12
 722 0056 1360     		str	r3, [r2]
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 723              		.loc 1 1124 26
 724 0058 1D4B     		ldr	r3, .L38+12
 725 005a 1A68     		ldr	r2, [r3]
 726 005c 7B68     		ldr	r3, [r7, #4]
 727 005e 5A64     		str	r2, [r3, #68]
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 728              		.loc 1 1129 3
 729 0060 7B68     		ldr	r3, [r7, #4]
 730 0062 DA6A     		ldr	r2, [r3, #44]
 731 0064 1B4B     		ldr	r3, .L38+16
 732 0066 1B68     		ldr	r3, [r3]
 733 0068 9A42     		cmp	r2, r3
 734 006a 03D9     		bls	.L35
 735              		.loc 1 1129 3 is_stmt 0 discriminator 1
 736 006c 7B68     		ldr	r3, [r7, #4]
 737 006e DB6A     		ldr	r3, [r3, #44]
 738 0070 184A     		ldr	r2, .L38+16
 739 0072 1360     		str	r3, [r2]
 740              	.L35:
 741              		.loc 1 1129 3 discriminator 3
 742 0074 7B68     		ldr	r3, [r7, #4]
 743 0076 DA6A     		ldr	r2, [r3, #44]
 744 0078 1346     		mov	r3, r2
 745 007a 9B00     		lsls	r3, r3, #2
 746 007c 1344     		add	r3, r3, r2
 747 007e 9B00     		lsls	r3, r3, #2
 748 0080 154A     		ldr	r2, .L38+20
 749 0082 1A44     		add	r2, r2, r3
 750 0084 7B68     		ldr	r3, [r7, #4]
 751 0086 0433     		adds	r3, r3, #4
ARM GAS  /tmp/cc65XYwf.s 			page 37


 752 0088 1946     		mov	r1, r3
 753 008a 1046     		mov	r0, r2
 754 008c FFF7FEFF 		bl	vListInsertEnd
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 755              		.loc 1 1133 2 is_stmt 1 discriminator 3
 756 0090 FFF7FEFF 		bl	vPortExitCritical
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 757              		.loc 1 1135 24 discriminator 3
 758 0094 0D4B     		ldr	r3, .L38+8
 759 0096 1B68     		ldr	r3, [r3]
 760              		.loc 1 1135 4 discriminator 3
 761 0098 002B     		cmp	r3, #0
 762 009a 0ED0     		beq	.L37
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 763              		.loc 1 1139 19
 764 009c 0A4B     		ldr	r3, .L38+4
 765 009e 1B68     		ldr	r3, [r3]
 766 00a0 DA6A     		ldr	r2, [r3, #44]
 767              		.loc 1 1139 42
 768 00a2 7B68     		ldr	r3, [r7, #4]
 769 00a4 DB6A     		ldr	r3, [r3, #44]
 770              		.loc 1 1139 5
 771 00a6 9A42     		cmp	r2, r3
 772 00a8 07D2     		bcs	.L37
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 773              		.loc 1 1141 4
 774 00aa 0C4B     		ldr	r3, .L38+24
 775 00ac 4FF08052 		mov	r2, #268435456
 776 00b0 1A60     		str	r2, [r3]
 777              		.syntax unified
 778              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 779 00b2 BFF34F8F 		dsb
 780              	@ 0 "" 2
 781              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 782 00b6 BFF36F8F 		isb
 783              	@ 0 "" 2
 784              		.thumb
 785              		.syntax unified
 786              	.L37:
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cc65XYwf.s 			page 38


1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 787              		.loc 1 1152 1
 788 00ba 00BF     		nop
 789 00bc 0837     		adds	r7, r7, #8
 790              	.LCFI18:
 791              		.cfi_def_cfa_offset 8
 792 00be BD46     		mov	sp, r7
 793              	.LCFI19:
 794              		.cfi_def_cfa_register 13
 795              		@ sp needed
 796 00c0 80BD     		pop	{r7, pc}
 797              	.L39:
 798 00c2 00BF     		.align	2
 799              	.L38:
 800 00c4 00000000 		.word	uxCurrentNumberOfTasks
 801 00c8 00000000 		.word	pxCurrentTCB
 802 00cc 00000000 		.word	xSchedulerRunning
 803 00d0 00000000 		.word	uxTaskNumber
 804 00d4 00000000 		.word	uxTopReadyPriority
 805 00d8 00000000 		.word	pxReadyTasksLists
 806 00dc 04ED00E0 		.word	-536810236
 807              		.cfi_endproc
 808              	.LFE7:
 810              		.section	.text.vTaskDelete,"ax",%progbits
 811              		.align	1
 812              		.global	vTaskDelete
 813              		.syntax unified
 814              		.thumb
 815              		.thumb_func
 816              		.fpu fpv4-sp-d16
 818              	vTaskDelete:
 819              	.LFB8:
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 820              		.loc 1 1158 2
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 16
 823              		@ frame_needed = 1, uses_anonymous_args = 0
 824 0000 80B5     		push	{r7, lr}
 825              	.LCFI20:
 826              		.cfi_def_cfa_offset 8
 827              		.cfi_offset 7, -8
 828              		.cfi_offset 14, -4
 829 0002 84B0     		sub	sp, sp, #16
 830              	.LCFI21:
 831              		.cfi_def_cfa_offset 24
 832 0004 00AF     		add	r7, sp, #0
 833              	.LCFI22:
 834              		.cfi_def_cfa_register 7
 835 0006 7860     		str	r0, [r7, #4]
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/cc65XYwf.s 			page 39


 836              		.loc 1 1161 3
 837 0008 FFF7FEFF 		bl	vPortEnterCritical
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 838              		.loc 1 1165 12
 839 000c 7B68     		ldr	r3, [r7, #4]
 840 000e 002B     		cmp	r3, #0
 841 0010 02D1     		bne	.L41
 842              		.loc 1 1165 12 is_stmt 0 discriminator 1
 843 0012 2C4B     		ldr	r3, .L50
 844 0014 1B68     		ldr	r3, [r3]
 845 0016 00E0     		b	.L42
 846              	.L41:
 847              		.loc 1 1165 12 discriminator 2
 848 0018 7B68     		ldr	r3, [r7, #4]
 849              	.L42:
 850              		.loc 1 1165 10 is_stmt 1 discriminator 4
 851 001a FB60     		str	r3, [r7, #12]
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 852              		.loc 1 1168 8 discriminator 4
 853 001c FB68     		ldr	r3, [r7, #12]
 854 001e 0433     		adds	r3, r3, #4
 855 0020 1846     		mov	r0, r3
 856 0022 FFF7FEFF 		bl	uxListRemove
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 857              		.loc 1 1178 8 discriminator 4
 858 0026 FB68     		ldr	r3, [r7, #12]
 859 0028 9B6A     		ldr	r3, [r3, #40]
 860              		.loc 1 1178 6 discriminator 4
 861 002a 002B     		cmp	r3, #0
 862 002c 04D0     		beq	.L43
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 863              		.loc 1 1180 14
 864 002e FB68     		ldr	r3, [r7, #12]
 865 0030 1833     		adds	r3, r3, #24
 866 0032 1846     		mov	r0, r3
 867 0034 FFF7FEFF 		bl	uxListRemove
 868              	.L43:
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cc65XYwf.s 			page 40


1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 869              		.loc 1 1191 16
 870 0038 234B     		ldr	r3, .L50+4
 871 003a 1B68     		ldr	r3, [r3]
 872 003c 0133     		adds	r3, r3, #1
 873 003e 224A     		ldr	r2, .L50+4
 874 0040 1360     		str	r3, [r2]
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 875              		.loc 1 1193 14
 876 0042 204B     		ldr	r3, .L50
 877 0044 1B68     		ldr	r3, [r3]
 878              		.loc 1 1193 6
 879 0046 FA68     		ldr	r2, [r7, #12]
 880 0048 9A42     		cmp	r2, r3
 881 004a 0BD1     		bne	.L44
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 882              		.loc 1 1200 5
 883 004c FB68     		ldr	r3, [r7, #12]
 884 004e 0433     		adds	r3, r3, #4
 885 0050 1946     		mov	r1, r3
 886 0052 1E48     		ldr	r0, .L50+8
 887 0054 FFF7FEFF 		bl	vListInsertEnd
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 888              		.loc 1 1205 5
 889 0058 1D4B     		ldr	r3, .L50+12
 890 005a 1B68     		ldr	r3, [r3]
 891 005c 0133     		adds	r3, r3, #1
 892 005e 1C4A     		ldr	r2, .L50+12
 893 0060 1360     		str	r3, [r2]
 894 0062 09E0     		b	.L45
 895              	.L44:
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc65XYwf.s 			page 41


1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 896              		.loc 1 1216 5
 897 0064 1B4B     		ldr	r3, .L50+16
 898 0066 1B68     		ldr	r3, [r3]
 899 0068 013B     		subs	r3, r3, #1
 900 006a 1A4A     		ldr	r2, .L50+16
 901 006c 1360     		str	r3, [r2]
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 902              		.loc 1 1217 5
 903 006e F868     		ldr	r0, [r7, #12]
 904 0070 FFF7FEFF 		bl	prvDeleteTCB
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 905              		.loc 1 1221 5
 906 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 907              	.L45:
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 908              		.loc 1 1226 3
 909 0078 FFF7FEFF 		bl	vPortExitCritical
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 910              		.loc 1 1230 25
 911 007c 164B     		ldr	r3, .L50+20
 912 007e 1B68     		ldr	r3, [r3]
 913              		.loc 1 1230 5
 914 0080 002B     		cmp	r3, #0
 915 0082 1AD0     		beq	.L49
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 916              		.loc 1 1232 14
 917 0084 0F4B     		ldr	r3, .L50
 918 0086 1B68     		ldr	r3, [r3]
 919              		.loc 1 1232 6
 920 0088 FA68     		ldr	r2, [r7, #12]
 921 008a 9A42     		cmp	r2, r3
 922 008c 15D1     		bne	.L49
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 923              		.loc 1 1234 5
 924 008e 134B     		ldr	r3, .L50+24
 925 0090 1B68     		ldr	r3, [r3]
 926 0092 002B     		cmp	r3, #0
 927 0094 09D0     		beq	.L47
 928              	.LBB127:
 929              	.LBB128:
 930              		.loc 2 195 2 discriminator 1
 931              		.syntax unified
 932              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 933 0096 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cc65XYwf.s 			page 42


 934 009a 83F31188 		msr basepri, r3											
 935 009e BFF36F8F 		isb														
 936 00a2 BFF34F8F 		dsb														
 937              	
 938              	@ 0 "" 2
 939              		.thumb
 940              		.syntax unified
 941 00a6 BB60     		str	r3, [r7, #8]
 942              	.L48:
 943              	.LBE128:
 944              	.LBE127:
 945              		.loc 1 1234 5 discriminator 1
 946 00a8 FEE7     		b	.L48
 947              	.L47:
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 948              		.loc 1 1235 5
 949 00aa 0D4B     		ldr	r3, .L50+28
 950 00ac 4FF08052 		mov	r2, #268435456
 951 00b0 1A60     		str	r2, [r3]
 952              		.syntax unified
 953              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 954 00b2 BFF34F8F 		dsb
 955              	@ 0 "" 2
 956              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 957 00b6 BFF36F8F 		isb
 958              	@ 0 "" 2
 959              		.thumb
 960              		.syntax unified
 961              	.L49:
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962              		.loc 1 1242 2
 963 00ba 00BF     		nop
 964 00bc 1037     		adds	r7, r7, #16
 965              	.LCFI23:
 966              		.cfi_def_cfa_offset 8
 967 00be BD46     		mov	sp, r7
 968              	.LCFI24:
 969              		.cfi_def_cfa_register 13
 970              		@ sp needed
 971 00c0 80BD     		pop	{r7, pc}
 972              	.L51:
 973 00c2 00BF     		.align	2
 974              	.L50:
 975 00c4 00000000 		.word	pxCurrentTCB
 976 00c8 00000000 		.word	uxTaskNumber
 977 00cc 00000000 		.word	xTasksWaitingTermination
 978 00d0 00000000 		.word	uxDeletedTasksWaitingCleanUp
 979 00d4 00000000 		.word	uxCurrentNumberOfTasks
 980 00d8 00000000 		.word	xSchedulerRunning
 981 00dc 00000000 		.word	uxSchedulerSuspended
 982 00e0 04ED00E0 		.word	-536810236
ARM GAS  /tmp/cc65XYwf.s 			page 43


 983              		.cfi_endproc
 984              	.LFE8:
 986              		.section	.text.vTaskDelayUntil,"ax",%progbits
 987              		.align	1
 988              		.global	vTaskDelayUntil
 989              		.syntax unified
 990              		.thumb
 991              		.thumb_func
 992              		.fpu fpv4-sp-d16
 994              	vTaskDelayUntil:
 995              	.LFB9:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 996              		.loc 1 1250 2
 997              		.cfi_startproc
 998              		@ args = 0, pretend = 0, frame = 40
 999              		@ frame_needed = 1, uses_anonymous_args = 0
 1000 0000 80B5     		push	{r7, lr}
 1001              	.LCFI25:
 1002              		.cfi_def_cfa_offset 8
 1003              		.cfi_offset 7, -8
 1004              		.cfi_offset 14, -4
 1005 0002 8AB0     		sub	sp, sp, #40
 1006              	.LCFI26:
 1007              		.cfi_def_cfa_offset 48
 1008 0004 00AF     		add	r7, sp, #0
 1009              	.LCFI27:
 1010              		.cfi_def_cfa_register 7
 1011 0006 7860     		str	r0, [r7, #4]
 1012 0008 3960     		str	r1, [r7]
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1013              		.loc 1 1252 30
 1014 000a 0023     		movs	r3, #0
 1015 000c 7B62     		str	r3, [r7, #36]
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1016              		.loc 1 1254 3
 1017 000e 7B68     		ldr	r3, [r7, #4]
 1018 0010 002B     		cmp	r3, #0
 1019 0012 09D1     		bne	.L53
 1020              	.LBB129:
 1021              	.LBB130:
 1022              		.loc 2 195 2 discriminator 1
 1023              		.syntax unified
 1024              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1025 0014 4FF05003 			mov r3, #80												
 1026 0018 83F31188 		msr basepri, r3											
 1027 001c BFF36F8F 		isb														
 1028 0020 BFF34F8F 		dsb														
 1029              	
ARM GAS  /tmp/cc65XYwf.s 			page 44


 1030              	@ 0 "" 2
 1031              		.thumb
 1032              		.syntax unified
 1033 0024 7B61     		str	r3, [r7, #20]
 1034              	.L54:
 1035              	.LBE130:
 1036              	.LBE129:
 1037              		.loc 1 1254 3 discriminator 1
 1038 0026 FEE7     		b	.L54
 1039              	.L53:
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1040              		.loc 1 1255 3
 1041 0028 3B68     		ldr	r3, [r7]
 1042 002a 002B     		cmp	r3, #0
 1043 002c 09D1     		bne	.L55
 1044              	.LBB131:
 1045              	.LBB132:
 1046              		.loc 2 195 2 discriminator 1
 1047              		.syntax unified
 1048              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1049 002e 4FF05003 			mov r3, #80												
 1050 0032 83F31188 		msr basepri, r3											
 1051 0036 BFF36F8F 		isb														
 1052 003a BFF34F8F 		dsb														
 1053              	
 1054              	@ 0 "" 2
 1055              		.thumb
 1056              		.syntax unified
 1057 003e 3B61     		str	r3, [r7, #16]
 1058              	.L56:
 1059              	.LBE132:
 1060              	.LBE131:
 1061              		.loc 1 1255 3 discriminator 2
 1062 0040 FEE7     		b	.L56
 1063              	.L55:
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 1064              		.loc 1 1256 3
 1065 0042 294B     		ldr	r3, .L65
 1066 0044 1B68     		ldr	r3, [r3]
 1067 0046 002B     		cmp	r3, #0
 1068 0048 09D0     		beq	.L57
 1069              	.LBB133:
 1070              	.LBB134:
 1071              		.loc 2 195 2 discriminator 1
 1072              		.syntax unified
 1073              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1074 004a 4FF05003 			mov r3, #80												
 1075 004e 83F31188 		msr basepri, r3											
 1076 0052 BFF36F8F 		isb														
 1077 0056 BFF34F8F 		dsb														
 1078              	
 1079              	@ 0 "" 2
 1080              		.thumb
 1081              		.syntax unified
 1082 005a FB60     		str	r3, [r7, #12]
 1083              	.L58:
 1084              	.LBE134:
ARM GAS  /tmp/cc65XYwf.s 			page 45


 1085              	.LBE133:
 1086              		.loc 1 1256 3 discriminator 3
 1087 005c FEE7     		b	.L58
 1088              	.L57:
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1089              		.loc 1 1258 3
 1090 005e FFF7FEFF 		bl	vTaskSuspendAll
 1091              	.LBB135:
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 1092              		.loc 1 1262 21
 1093 0062 224B     		ldr	r3, .L65+4
 1094 0064 1B68     		ldr	r3, [r3]
 1095 0066 3B62     		str	r3, [r7, #32]
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1096              		.loc 1 1265 18
 1097 0068 7B68     		ldr	r3, [r7, #4]
 1098 006a 1B68     		ldr	r3, [r3]
 1099              		.loc 1 1265 16
 1100 006c 3A68     		ldr	r2, [r7]
 1101 006e 1344     		add	r3, r3, r2
 1102 0070 FB61     		str	r3, [r7, #28]
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 1103              		.loc 1 1267 26
 1104 0072 7B68     		ldr	r3, [r7, #4]
 1105 0074 1B68     		ldr	r3, [r3]
 1106              		.loc 1 1267 6
 1107 0076 3A6A     		ldr	r2, [r7, #32]
 1108 0078 9A42     		cmp	r2, r3
 1109 007a 0BD2     		bcs	.L59
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1110              		.loc 1 1274 25
 1111 007c 7B68     		ldr	r3, [r7, #4]
 1112 007e 1B68     		ldr	r3, [r3]
 1113              		.loc 1 1274 7
 1114 0080 FA69     		ldr	r2, [r7, #28]
 1115 0082 9A42     		cmp	r2, r3
 1116 0084 11D2     		bcs	.L60
 1117              		.loc 1 1274 47 discriminator 1
 1118 0086 FA69     		ldr	r2, [r7, #28]
 1119 0088 3B6A     		ldr	r3, [r7, #32]
 1120 008a 9A42     		cmp	r2, r3
 1121 008c 0DD9     		bls	.L60
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
ARM GAS  /tmp/cc65XYwf.s 			page 46


 1122              		.loc 1 1276 19
 1123 008e 0123     		movs	r3, #1
 1124 0090 7B62     		str	r3, [r7, #36]
 1125 0092 0AE0     		b	.L60
 1126              	.L59:
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1127              		.loc 1 1288 25
 1128 0094 7B68     		ldr	r3, [r7, #4]
 1129 0096 1B68     		ldr	r3, [r3]
 1130              		.loc 1 1288 7
 1131 0098 FA69     		ldr	r2, [r7, #28]
 1132 009a 9A42     		cmp	r2, r3
 1133 009c 03D3     		bcc	.L61
 1134              		.loc 1 1288 47 discriminator 1
 1135 009e FA69     		ldr	r2, [r7, #28]
 1136 00a0 3B6A     		ldr	r3, [r7, #32]
 1137 00a2 9A42     		cmp	r2, r3
 1138 00a4 01D9     		bls	.L60
 1139              	.L61:
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1140              		.loc 1 1290 19
 1141 00a6 0123     		movs	r3, #1
 1142 00a8 7B62     		str	r3, [r7, #36]
 1143              	.L60:
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1144              		.loc 1 1299 24
 1145 00aa 7B68     		ldr	r3, [r7, #4]
 1146 00ac FA69     		ldr	r2, [r7, #28]
 1147 00ae 1A60     		str	r2, [r3]
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1148              		.loc 1 1301 6
 1149 00b0 7B6A     		ldr	r3, [r7, #36]
 1150 00b2 002B     		cmp	r3, #0
 1151 00b4 06D0     		beq	.L62
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
ARM GAS  /tmp/cc65XYwf.s 			page 47


1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1152              		.loc 1 1307 5
 1153 00b6 FA69     		ldr	r2, [r7, #28]
 1154 00b8 3B6A     		ldr	r3, [r7, #32]
 1155 00ba D31A     		subs	r3, r2, r3
 1156 00bc 0021     		movs	r1, #0
 1157 00be 1846     		mov	r0, r3
 1158 00c0 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1159              	.L62:
 1160              	.LBE135:
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1161              		.loc 1 1314 21
 1162 00c4 FFF7FEFF 		bl	xTaskResumeAll
 1163 00c8 B861     		str	r0, [r7, #24]
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1164              		.loc 1 1318 5
 1165 00ca BB69     		ldr	r3, [r7, #24]
 1166 00cc 002B     		cmp	r3, #0
 1167 00ce 07D1     		bne	.L64
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1168              		.loc 1 1320 4
 1169 00d0 074B     		ldr	r3, .L65+8
 1170 00d2 4FF08052 		mov	r2, #268435456
 1171 00d6 1A60     		str	r2, [r3]
 1172              		.syntax unified
 1173              	@ 1320 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1174 00d8 BFF34F8F 		dsb
 1175              	@ 0 "" 2
 1176              	@ 1320 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1177 00dc BFF36F8F 		isb
 1178              	@ 0 "" 2
 1179              		.thumb
 1180              		.syntax unified
 1181              	.L64:
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1182              		.loc 1 1326 2
 1183 00e0 00BF     		nop
 1184 00e2 2837     		adds	r7, r7, #40
 1185              	.LCFI28:
ARM GAS  /tmp/cc65XYwf.s 			page 48


 1186              		.cfi_def_cfa_offset 8
 1187 00e4 BD46     		mov	sp, r7
 1188              	.LCFI29:
 1189              		.cfi_def_cfa_register 13
 1190              		@ sp needed
 1191 00e6 80BD     		pop	{r7, pc}
 1192              	.L66:
 1193              		.align	2
 1194              	.L65:
 1195 00e8 00000000 		.word	uxSchedulerSuspended
 1196 00ec 00000000 		.word	xTickCount
 1197 00f0 04ED00E0 		.word	-536810236
 1198              		.cfi_endproc
 1199              	.LFE9:
 1201              		.section	.text.vTaskDelay,"ax",%progbits
 1202              		.align	1
 1203              		.global	vTaskDelay
 1204              		.syntax unified
 1205              		.thumb
 1206              		.thumb_func
 1207              		.fpu fpv4-sp-d16
 1209              	vTaskDelay:
 1210              	.LFB10:
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1211              		.loc 1 1334 2
 1212              		.cfi_startproc
 1213              		@ args = 0, pretend = 0, frame = 16
 1214              		@ frame_needed = 1, uses_anonymous_args = 0
 1215 0000 80B5     		push	{r7, lr}
 1216              	.LCFI30:
 1217              		.cfi_def_cfa_offset 8
 1218              		.cfi_offset 7, -8
 1219              		.cfi_offset 14, -4
 1220 0002 84B0     		sub	sp, sp, #16
 1221              	.LCFI31:
 1222              		.cfi_def_cfa_offset 24
 1223 0004 00AF     		add	r7, sp, #0
 1224              	.LCFI32:
 1225              		.cfi_def_cfa_register 7
 1226 0006 7860     		str	r0, [r7, #4]
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1227              		.loc 1 1335 13
 1228 0008 0023     		movs	r3, #0
 1229 000a FB60     		str	r3, [r7, #12]
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1230              		.loc 1 1338 5
 1231 000c 7B68     		ldr	r3, [r7, #4]
 1232 000e 002B     		cmp	r3, #0
ARM GAS  /tmp/cc65XYwf.s 			page 49


 1233 0010 16D0     		beq	.L68
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1234              		.loc 1 1340 4
 1235 0012 134B     		ldr	r3, .L73
 1236 0014 1B68     		ldr	r3, [r3]
 1237 0016 002B     		cmp	r3, #0
 1238 0018 09D0     		beq	.L69
 1239              	.LBB136:
 1240              	.LBB137:
 1241              		.loc 2 195 2 discriminator 1
 1242              		.syntax unified
 1243              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1244 001a 4FF05003 			mov r3, #80												
 1245 001e 83F31188 		msr basepri, r3											
 1246 0022 BFF36F8F 		isb														
 1247 0026 BFF34F8F 		dsb														
 1248              	
 1249              	@ 0 "" 2
 1250              		.thumb
 1251              		.syntax unified
 1252 002a BB60     		str	r3, [r7, #8]
 1253              	.L70:
 1254              	.LBE137:
 1255              	.LBE136:
 1256              		.loc 1 1340 4 discriminator 1
 1257 002c FEE7     		b	.L70
 1258              	.L69:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1259              		.loc 1 1341 4
 1260 002e FFF7FEFF 		bl	vTaskSuspendAll
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1261              		.loc 1 1352 5
 1262 0032 0021     		movs	r1, #0
 1263 0034 7868     		ldr	r0, [r7, #4]
 1264 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1265              		.loc 1 1354 22
 1266 003a FFF7FEFF 		bl	xTaskResumeAll
 1267 003e F860     		str	r0, [r7, #12]
 1268              	.L68:
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc65XYwf.s 			page 50


1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1269              		.loc 1 1363 5
 1270 0040 FB68     		ldr	r3, [r7, #12]
 1271 0042 002B     		cmp	r3, #0
 1272 0044 07D1     		bne	.L72
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1273              		.loc 1 1365 4
 1274 0046 074B     		ldr	r3, .L73+4
 1275 0048 4FF08052 		mov	r2, #268435456
 1276 004c 1A60     		str	r2, [r3]
 1277              		.syntax unified
 1278              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1279 004e BFF34F8F 		dsb
 1280              	@ 0 "" 2
 1281              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1282 0052 BFF36F8F 		isb
 1283              	@ 0 "" 2
 1284              		.thumb
 1285              		.syntax unified
 1286              	.L72:
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1287              		.loc 1 1371 2
 1288 0056 00BF     		nop
 1289 0058 1037     		adds	r7, r7, #16
 1290              	.LCFI33:
 1291              		.cfi_def_cfa_offset 8
 1292 005a BD46     		mov	sp, r7
 1293              	.LCFI34:
 1294              		.cfi_def_cfa_register 13
 1295              		@ sp needed
 1296 005c 80BD     		pop	{r7, pc}
 1297              	.L74:
 1298 005e 00BF     		.align	2
 1299              	.L73:
 1300 0060 00000000 		.word	uxSchedulerSuspended
 1301 0064 04ED00E0 		.word	-536810236
 1302              		.cfi_endproc
 1303              	.LFE10:
 1305              		.section	.text.eTaskGetState,"ax",%progbits
 1306              		.align	1
 1307              		.global	eTaskGetState
 1308              		.syntax unified
 1309              		.thumb
 1310              		.thumb_func
 1311              		.fpu fpv4-sp-d16
 1313              	eTaskGetState:
 1314              	.LFB11:
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 51


1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1315              		.loc 1 1379 2
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 32
 1318              		@ frame_needed = 1, uses_anonymous_args = 0
 1319 0000 80B5     		push	{r7, lr}
 1320              	.LCFI35:
 1321              		.cfi_def_cfa_offset 8
 1322              		.cfi_offset 7, -8
 1323              		.cfi_offset 14, -4
 1324 0002 88B0     		sub	sp, sp, #32
 1325              	.LCFI36:
 1326              		.cfi_def_cfa_offset 40
 1327 0004 00AF     		add	r7, sp, #0
 1328              	.LCFI37:
 1329              		.cfi_def_cfa_register 7
 1330 0006 7860     		str	r0, [r7, #4]
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1331              		.loc 1 1382 22
 1332 0008 7B68     		ldr	r3, [r7, #4]
 1333 000a BB61     		str	r3, [r7, #24]
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
 1334              		.loc 1 1384 3
 1335 000c BB69     		ldr	r3, [r7, #24]
 1336 000e 002B     		cmp	r3, #0
 1337 0010 09D1     		bne	.L76
 1338              	.LBB138:
 1339              	.LBB139:
 1340              		.loc 2 195 2 discriminator 1
 1341              		.syntax unified
 1342              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1343 0012 4FF05003 			mov r3, #80												
 1344 0016 83F31188 		msr basepri, r3											
 1345 001a BFF36F8F 		isb														
 1346 001e BFF34F8F 		dsb														
 1347              	
 1348              	@ 0 "" 2
 1349              		.thumb
 1350              		.syntax unified
 1351 0022 BB60     		str	r3, [r7, #8]
 1352              	.L77:
 1353              	.LBE139:
 1354              	.LBE138:
 1355              		.loc 1 1384 3 discriminator 1
 1356 0024 FEE7     		b	.L77
 1357              	.L76:
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
ARM GAS  /tmp/cc65XYwf.s 			page 52


 1358              		.loc 1 1386 13
 1359 0026 244B     		ldr	r3, .L90
 1360 0028 1B68     		ldr	r3, [r3]
 1361              		.loc 1 1386 5
 1362 002a BA69     		ldr	r2, [r7, #24]
 1363 002c 9A42     		cmp	r2, r3
 1364 002e 02D1     		bne	.L78
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
 1365              		.loc 1 1389 12
 1366 0030 0023     		movs	r3, #0
 1367 0032 FB77     		strb	r3, [r7, #31]
 1368 0034 3AE0     		b	.L79
 1369              	.L78:
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1370              		.loc 1 1393 4
 1371 0036 FFF7FEFF 		bl	vPortEnterCritical
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1372              		.loc 1 1395 17
 1373 003a BB69     		ldr	r3, [r7, #24]
 1374 003c 5B69     		ldr	r3, [r3, #20]
 1375 003e 7B61     		str	r3, [r7, #20]
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1376              		.loc 1 1396 19
 1377 0040 1E4B     		ldr	r3, .L90+4
 1378 0042 1B68     		ldr	r3, [r3]
 1379 0044 3B61     		str	r3, [r7, #16]
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1380              		.loc 1 1397 29
 1381 0046 1E4B     		ldr	r3, .L90+8
 1382 0048 1B68     		ldr	r3, [r3]
 1383 004a FB60     		str	r3, [r7, #12]
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1384              		.loc 1 1399 4
 1385 004c FFF7FEFF 		bl	vPortExitCritical
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1386              		.loc 1 1401 6
 1387 0050 7A69     		ldr	r2, [r7, #20]
 1388 0052 3B69     		ldr	r3, [r7, #16]
 1389 0054 9A42     		cmp	r2, r3
 1390 0056 03D0     		beq	.L80
 1391              		.loc 1 1401 41 discriminator 1
 1392 0058 7A69     		ldr	r2, [r7, #20]
 1393 005a FB68     		ldr	r3, [r7, #12]
 1394 005c 9A42     		cmp	r2, r3
 1395 005e 02D1     		bne	.L81
 1396              	.L80:
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
ARM GAS  /tmp/cc65XYwf.s 			page 53


1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 1397              		.loc 1 1405 13
 1398 0060 0223     		movs	r3, #2
 1399 0062 FB77     		strb	r3, [r7, #31]
 1400 0064 22E0     		b	.L79
 1401              	.L81:
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1402              		.loc 1 1409 12
 1403 0066 7B69     		ldr	r3, [r7, #20]
 1404 0068 164A     		ldr	r2, .L90+12
 1405 006a 9342     		cmp	r3, r2
 1406 006c 12D1     		bne	.L82
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1407              		.loc 1 1414 10
 1408 006e BB69     		ldr	r3, [r7, #24]
 1409 0070 9B6A     		ldr	r3, [r3, #40]
 1410              		.loc 1 1414 8
 1411 0072 002B     		cmp	r3, #0
 1412 0074 0BD1     		bne	.L83
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1413              		.loc 1 1422 17
 1414 0076 BB69     		ldr	r3, [r7, #24]
 1415 0078 93F85830 		ldrb	r3, [r3, #88]
 1416 007c DBB2     		uxtb	r3, r3
 1417              		.loc 1 1422 10
 1418 007e 012B     		cmp	r3, #1
 1419 0080 02D1     		bne	.L84
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
 1420              		.loc 1 1424 17
 1421 0082 0223     		movs	r3, #2
 1422 0084 FB77     		strb	r3, [r7, #31]
 1423 0086 11E0     		b	.L79
 1424              	.L84:
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
 1425              		.loc 1 1428 17
 1426 0088 0323     		movs	r3, #3
 1427 008a FB77     		strb	r3, [r7, #31]
 1428 008c 0EE0     		b	.L79
 1429              	.L83:
ARM GAS  /tmp/cc65XYwf.s 			page 54


1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
 1430              		.loc 1 1439 15
 1431 008e 0223     		movs	r3, #2
 1432 0090 FB77     		strb	r3, [r7, #31]
 1433 0092 0BE0     		b	.L79
 1434              	.L82:
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1435              		.loc 1 1445 12
 1436 0094 7B69     		ldr	r3, [r7, #20]
 1437 0096 0C4A     		ldr	r2, .L90+16
 1438 0098 9342     		cmp	r3, r2
 1439 009a 02D0     		beq	.L87
 1440              		.loc 1 1445 59 discriminator 1
 1441 009c 7B69     		ldr	r3, [r7, #20]
 1442 009e 002B     		cmp	r3, #0
 1443 00a0 02D1     		bne	.L88
 1444              	.L87:
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 1445              		.loc 1 1450 14
 1446 00a2 0423     		movs	r3, #4
 1447 00a4 FB77     		strb	r3, [r7, #31]
 1448 00a6 01E0     		b	.L79
 1449              	.L88:
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
 1450              		.loc 1 1458 13
 1451 00a8 0123     		movs	r3, #1
 1452 00aa FB77     		strb	r3, [r7, #31]
 1453              	.L79:
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 55


1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
 1454              		.loc 1 1462 10
 1455 00ac FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1456              		.loc 1 1463 2
 1457 00ae 1846     		mov	r0, r3
 1458 00b0 2037     		adds	r7, r7, #32
 1459              	.LCFI38:
 1460              		.cfi_def_cfa_offset 8
 1461 00b2 BD46     		mov	sp, r7
 1462              	.LCFI39:
 1463              		.cfi_def_cfa_register 13
 1464              		@ sp needed
 1465 00b4 80BD     		pop	{r7, pc}
 1466              	.L91:
 1467 00b6 00BF     		.align	2
 1468              	.L90:
 1469 00b8 00000000 		.word	pxCurrentTCB
 1470 00bc 00000000 		.word	pxDelayedTaskList
 1471 00c0 00000000 		.word	pxOverflowDelayedTaskList
 1472 00c4 00000000 		.word	xSuspendedTaskList
 1473 00c8 00000000 		.word	xTasksWaitingTermination
 1474              		.cfi_endproc
 1475              	.LFE11:
 1477              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1478              		.align	1
 1479              		.global	uxTaskPriorityGet
 1480              		.syntax unified
 1481              		.thumb
 1482              		.thumb_func
 1483              		.fpu fpv4-sp-d16
 1485              	uxTaskPriorityGet:
 1486              	.LFB12:
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1487              		.loc 1 1471 2
 1488              		.cfi_startproc
 1489              		@ args = 0, pretend = 0, frame = 16
 1490              		@ frame_needed = 1, uses_anonymous_args = 0
 1491 0000 80B5     		push	{r7, lr}
 1492              	.LCFI40:
 1493              		.cfi_def_cfa_offset 8
 1494              		.cfi_offset 7, -8
 1495              		.cfi_offset 14, -4
 1496 0002 84B0     		sub	sp, sp, #16
 1497              	.LCFI41:
 1498              		.cfi_def_cfa_offset 24
 1499 0004 00AF     		add	r7, sp, #0
 1500              	.LCFI42:
 1501              		.cfi_def_cfa_register 7
 1502 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cc65XYwf.s 			page 56


1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1503              		.loc 1 1475 3
 1504 0008 FFF7FEFF 		bl	vPortEnterCritical
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1505              		.loc 1 1479 12
 1506 000c 7B68     		ldr	r3, [r7, #4]
 1507 000e 002B     		cmp	r3, #0
 1508 0010 02D1     		bne	.L93
 1509              		.loc 1 1479 12 is_stmt 0 discriminator 1
 1510 0012 074B     		ldr	r3, .L96
 1511 0014 1B68     		ldr	r3, [r3]
 1512 0016 00E0     		b	.L94
 1513              	.L93:
 1514              		.loc 1 1479 12 discriminator 2
 1515 0018 7B68     		ldr	r3, [r7, #4]
 1516              	.L94:
 1517              		.loc 1 1479 10 is_stmt 1 discriminator 4
 1518 001a FB60     		str	r3, [r7, #12]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1519              		.loc 1 1480 13 discriminator 4
 1520 001c FB68     		ldr	r3, [r7, #12]
 1521 001e DB6A     		ldr	r3, [r3, #44]
 1522 0020 BB60     		str	r3, [r7, #8]
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1523              		.loc 1 1482 3 discriminator 4
 1524 0022 FFF7FEFF 		bl	vPortExitCritical
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1525              		.loc 1 1484 10 discriminator 4
 1526 0026 BB68     		ldr	r3, [r7, #8]
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1527              		.loc 1 1485 2 discriminator 4
 1528 0028 1846     		mov	r0, r3
 1529 002a 1037     		adds	r7, r7, #16
 1530              	.LCFI43:
 1531              		.cfi_def_cfa_offset 8
 1532 002c BD46     		mov	sp, r7
 1533              	.LCFI44:
 1534              		.cfi_def_cfa_register 13
 1535              		@ sp needed
 1536 002e 80BD     		pop	{r7, pc}
 1537              	.L97:
 1538              		.align	2
 1539              	.L96:
 1540 0030 00000000 		.word	pxCurrentTCB
 1541              		.cfi_endproc
 1542              	.LFE12:
 1544              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1545              		.align	1
 1546              		.global	uxTaskPriorityGetFromISR
ARM GAS  /tmp/cc65XYwf.s 			page 57


 1547              		.syntax unified
 1548              		.thumb
 1549              		.thumb_func
 1550              		.fpu fpv4-sp-d16
 1552              	uxTaskPriorityGetFromISR:
 1553              	.LFB13:
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1554              		.loc 1 1493 2
 1555              		.cfi_startproc
 1556              		@ args = 0, pretend = 0, frame = 32
 1557              		@ frame_needed = 1, uses_anonymous_args = 0
 1558 0000 80B5     		push	{r7, lr}
 1559              	.LCFI45:
 1560              		.cfi_def_cfa_offset 8
 1561              		.cfi_offset 7, -8
 1562              		.cfi_offset 14, -4
 1563 0002 88B0     		sub	sp, sp, #32
 1564              	.LCFI46:
 1565              		.cfi_def_cfa_offset 40
 1566 0004 00AF     		add	r7, sp, #0
 1567              	.LCFI47:
 1568              		.cfi_def_cfa_register 7
 1569 0006 7860     		str	r0, [r7, #4]
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1570              		.loc 1 1513 3
 1571 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1572              	.LBB140:
 1573              	.LBB141:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
ARM GAS  /tmp/cc65XYwf.s 			page 58


 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1574              		.loc 2 211 2
 1575              		.syntax unified
 1576              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1577 000c EFF31182 			mrs r2, basepri											
 1578 0010 4FF05003 		mov r3, #80												
 1579 0014 83F31188 		msr basepri, r3											
 1580 0018 BFF36F8F 		isb														
 1581 001c BFF34F8F 		dsb														
 1582              	
 1583              	@ 0 "" 2
 1584              		.thumb
 1585              		.syntax unified
 1586 0020 3A61     		str	r2, [r7, #16]
 1587 0022 FB60     		str	r3, [r7, #12]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1588              		.loc 2 223 9
 1589 0024 3B69     		ldr	r3, [r7, #16]
 1590              	.LBE141:
 1591              	.LBE140:
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1592              		.loc 1 1515 27
 1593 0026 FB61     		str	r3, [r7, #28]
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1594              		.loc 1 1519 12
 1595 0028 7B68     		ldr	r3, [r7, #4]
 1596 002a 002B     		cmp	r3, #0
 1597 002c 02D1     		bne	.L100
 1598              		.loc 1 1519 12 is_stmt 0 discriminator 1
 1599 002e 094B     		ldr	r3, .L103
ARM GAS  /tmp/cc65XYwf.s 			page 59


 1600 0030 1B68     		ldr	r3, [r3]
 1601 0032 00E0     		b	.L101
 1602              	.L100:
 1603              		.loc 1 1519 12 discriminator 2
 1604 0034 7B68     		ldr	r3, [r7, #4]
 1605              	.L101:
 1606              		.loc 1 1519 10 is_stmt 1 discriminator 4
 1607 0036 BB61     		str	r3, [r7, #24]
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1608              		.loc 1 1520 13 discriminator 4
 1609 0038 BB69     		ldr	r3, [r7, #24]
 1610 003a DB6A     		ldr	r3, [r3, #44]
 1611 003c 7B61     		str	r3, [r7, #20]
 1612 003e FB69     		ldr	r3, [r7, #28]
 1613 0040 BB60     		str	r3, [r7, #8]
 1614              	.LBB142:
 1615              	.LBB143:
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1616              		.loc 2 229 2 discriminator 4
 1617 0042 BB68     		ldr	r3, [r7, #8]
 1618              		.syntax unified
 1619              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1620 0044 83F31188 			msr basepri, r3	
 1621              	@ 0 "" 2
 1622              		.thumb
 1623              		.syntax unified
 1624              	.LBE143:
 1625              	.LBE142:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1626              		.loc 1 1524 10 discriminator 4
 1627 0048 7B69     		ldr	r3, [r7, #20]
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1628              		.loc 1 1525 2 discriminator 4
 1629 004a 1846     		mov	r0, r3
 1630 004c 2037     		adds	r7, r7, #32
 1631              	.LCFI48:
 1632              		.cfi_def_cfa_offset 8
 1633 004e BD46     		mov	sp, r7
 1634              	.LCFI49:
 1635              		.cfi_def_cfa_register 13
 1636              		@ sp needed
 1637 0050 80BD     		pop	{r7, pc}
 1638              	.L104:
 1639 0052 00BF     		.align	2
 1640              	.L103:
 1641 0054 00000000 		.word	pxCurrentTCB
 1642              		.cfi_endproc
 1643              	.LFE13:
 1645              		.section	.text.vTaskPrioritySet,"ax",%progbits
ARM GAS  /tmp/cc65XYwf.s 			page 60


 1646              		.align	1
 1647              		.global	vTaskPrioritySet
 1648              		.syntax unified
 1649              		.thumb
 1650              		.thumb_func
 1651              		.fpu fpv4-sp-d16
 1653              	vTaskPrioritySet:
 1654              	.LFB14:
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1655              		.loc 1 1533 2
 1656              		.cfi_startproc
 1657              		@ args = 0, pretend = 0, frame = 32
 1658              		@ frame_needed = 1, uses_anonymous_args = 0
 1659 0000 80B5     		push	{r7, lr}
 1660              	.LCFI50:
 1661              		.cfi_def_cfa_offset 8
 1662              		.cfi_offset 7, -8
 1663              		.cfi_offset 14, -4
 1664 0002 88B0     		sub	sp, sp, #32
 1665              	.LCFI51:
 1666              		.cfi_def_cfa_offset 40
 1667 0004 00AF     		add	r7, sp, #0
 1668              	.LCFI52:
 1669              		.cfi_def_cfa_register 7
 1670 0006 7860     		str	r0, [r7, #4]
 1671 0008 3960     		str	r1, [r7]
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1672              		.loc 1 1536 13
 1673 000a 0023     		movs	r3, #0
 1674 000c FB61     		str	r3, [r7, #28]
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1675              		.loc 1 1538 3
 1676 000e 3B68     		ldr	r3, [r7]
 1677 0010 372B     		cmp	r3, #55
 1678 0012 09D9     		bls	.L106
 1679              	.LBB144:
 1680              	.LBB145:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1681              		.loc 2 195 2 discriminator 1
 1682              		.syntax unified
 1683              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1684 0014 4FF05003 			mov r3, #80												
 1685 0018 83F31188 		msr basepri, r3											
 1686 001c BFF36F8F 		isb														
 1687 0020 BFF34F8F 		dsb														
 1688              	
 1689              	@ 0 "" 2
ARM GAS  /tmp/cc65XYwf.s 			page 61


 1690              		.thumb
 1691              		.syntax unified
 1692 0024 FB60     		str	r3, [r7, #12]
 1693              	.L107:
 1694              	.LBE145:
 1695              	.LBE144:
 1696              		.loc 1 1538 3 discriminator 1
 1697 0026 FEE7     		b	.L107
 1698              	.L106:
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1699              		.loc 1 1541 5
 1700 0028 3B68     		ldr	r3, [r7]
 1701 002a 372B     		cmp	r3, #55
 1702 002c 01D9     		bls	.L108
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1703              		.loc 1 1543 18
 1704 002e 3723     		movs	r3, #55
 1705 0030 3B60     		str	r3, [r7]
 1706              	.L108:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1707              		.loc 1 1550 3
 1708 0032 FFF7FEFF 		bl	vPortEnterCritical
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1709              		.loc 1 1554 12
 1710 0036 7B68     		ldr	r3, [r7, #4]
 1711 0038 002B     		cmp	r3, #0
 1712 003a 02D1     		bne	.L109
 1713              		.loc 1 1554 12 is_stmt 0 discriminator 1
 1714 003c 3A4B     		ldr	r3, .L118
 1715 003e 1B68     		ldr	r3, [r3]
 1716 0040 00E0     		b	.L110
 1717              	.L109:
 1718              		.loc 1 1554 12 discriminator 2
 1719 0042 7B68     		ldr	r3, [r7, #4]
 1720              	.L110:
 1721              		.loc 1 1554 10 is_stmt 1 discriminator 4
 1722 0044 BB61     		str	r3, [r7, #24]
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1723              		.loc 1 1560 27 discriminator 4
 1724 0046 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/cc65XYwf.s 			page 62


 1725 0048 DB6C     		ldr	r3, [r3, #76]
 1726 004a 7B61     		str	r3, [r7, #20]
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1727              		.loc 1 1568 6 discriminator 4
 1728 004c 7A69     		ldr	r2, [r7, #20]
 1729 004e 3B68     		ldr	r3, [r7]
 1730 0050 9A42     		cmp	r2, r3
 1731 0052 63D0     		beq	.L111
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1732              		.loc 1 1572 7
 1733 0054 3A68     		ldr	r2, [r7]
 1734 0056 7B69     		ldr	r3, [r7, #20]
 1735 0058 9A42     		cmp	r2, r3
 1736 005a 0DD9     		bls	.L112
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1737              		.loc 1 1574 16
 1738 005c 324B     		ldr	r3, .L118
 1739 005e 1B68     		ldr	r3, [r3]
 1740              		.loc 1 1574 8
 1741 0060 BA69     		ldr	r2, [r7, #24]
 1742 0062 9A42     		cmp	r2, r3
 1743 0064 0FD0     		beq	.L113
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1744              		.loc 1 1579 40
 1745 0066 304B     		ldr	r3, .L118
 1746 0068 1B68     		ldr	r3, [r3]
 1747 006a DB6A     		ldr	r3, [r3, #44]
 1748              		.loc 1 1579 9
 1749 006c 3A68     		ldr	r2, [r7]
 1750 006e 9A42     		cmp	r2, r3
 1751 0070 09D3     		bcc	.L113
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1752              		.loc 1 1581 23
 1753 0072 0123     		movs	r3, #1
 1754 0074 FB61     		str	r3, [r7, #28]
 1755 0076 06E0     		b	.L113
 1756              	.L112:
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cc65XYwf.s 			page 63


1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1757              		.loc 1 1595 20
 1758 0078 2B4B     		ldr	r3, .L118
 1759 007a 1B68     		ldr	r3, [r3]
 1760              		.loc 1 1595 12
 1761 007c BA69     		ldr	r2, [r7, #24]
 1762 007e 9A42     		cmp	r2, r3
 1763 0080 01D1     		bne	.L113
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1764              		.loc 1 1600 21
 1765 0082 0123     		movs	r3, #1
 1766 0084 FB61     		str	r3, [r7, #28]
 1767              	.L113:
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1768              		.loc 1 1612 27
 1769 0086 BB69     		ldr	r3, [r7, #24]
 1770 0088 DB6A     		ldr	r3, [r3, #44]
 1771 008a 3B61     		str	r3, [r7, #16]
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1772              		.loc 1 1618 15
 1773 008c BB69     		ldr	r3, [r7, #24]
 1774 008e DA6C     		ldr	r2, [r3, #76]
 1775              		.loc 1 1618 40
 1776 0090 BB69     		ldr	r3, [r7, #24]
 1777 0092 DB6A     		ldr	r3, [r3, #44]
 1778              		.loc 1 1618 8
 1779 0094 9A42     		cmp	r2, r3
 1780 0096 02D1     		bne	.L114
ARM GAS  /tmp/cc65XYwf.s 			page 64


1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1781              		.loc 1 1620 25
 1782 0098 BB69     		ldr	r3, [r7, #24]
 1783 009a 3A68     		ldr	r2, [r7]
 1784 009c DA62     		str	r2, [r3, #44]
 1785              	.L114:
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1786              		.loc 1 1628 28
 1787 009e BB69     		ldr	r3, [r7, #24]
 1788 00a0 3A68     		ldr	r2, [r7]
 1789 00a2 DA64     		str	r2, [r3, #76]
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1790              		.loc 1 1638 11
 1791 00a4 BB69     		ldr	r3, [r7, #24]
 1792 00a6 9B69     		ldr	r3, [r3, #24]
 1793              		.loc 1 1638 7
 1794 00a8 002B     		cmp	r3, #0
 1795 00aa 04DB     		blt	.L115
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1796              		.loc 1 1640 6
 1797 00ac 3B68     		ldr	r3, [r7]
 1798 00ae C3F13802 		rsb	r2, r3, #56
 1799 00b2 BB69     		ldr	r3, [r7, #24]
 1800 00b4 9A61     		str	r2, [r3, #24]
 1801              	.L115:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1802              		.loc 1 1651 9
 1803 00b6 BB69     		ldr	r3, [r7, #24]
 1804 00b8 5969     		ldr	r1, [r3, #20]
ARM GAS  /tmp/cc65XYwf.s 			page 65


 1805 00ba 3A69     		ldr	r2, [r7, #16]
 1806 00bc 1346     		mov	r3, r2
 1807 00be 9B00     		lsls	r3, r3, #2
 1808 00c0 1344     		add	r3, r3, r2
 1809 00c2 9B00     		lsls	r3, r3, #2
 1810 00c4 194A     		ldr	r2, .L118+4
 1811 00c6 1344     		add	r3, r3, r2
 1812              		.loc 1 1651 7
 1813 00c8 9942     		cmp	r1, r3
 1814 00ca 1CD1     		bne	.L116
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1815              		.loc 1 1656 10
 1816 00cc BB69     		ldr	r3, [r7, #24]
 1817 00ce 0433     		adds	r3, r3, #4
 1818 00d0 1846     		mov	r0, r3
 1819 00d2 FFF7FEFF 		bl	uxListRemove
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1820              		.loc 1 1667 6
 1821 00d6 BB69     		ldr	r3, [r7, #24]
 1822 00d8 DA6A     		ldr	r2, [r3, #44]
 1823 00da 154B     		ldr	r3, .L118+8
 1824 00dc 1B68     		ldr	r3, [r3]
 1825 00de 9A42     		cmp	r2, r3
 1826 00e0 03D9     		bls	.L117
 1827              		.loc 1 1667 6 is_stmt 0 discriminator 1
 1828 00e2 BB69     		ldr	r3, [r7, #24]
 1829 00e4 DB6A     		ldr	r3, [r3, #44]
 1830 00e6 124A     		ldr	r2, .L118+8
 1831 00e8 1360     		str	r3, [r2]
 1832              	.L117:
 1833              		.loc 1 1667 6 discriminator 3
 1834 00ea BB69     		ldr	r3, [r7, #24]
 1835 00ec DA6A     		ldr	r2, [r3, #44]
 1836 00ee 1346     		mov	r3, r2
 1837 00f0 9B00     		lsls	r3, r3, #2
 1838 00f2 1344     		add	r3, r3, r2
 1839 00f4 9B00     		lsls	r3, r3, #2
 1840 00f6 0D4A     		ldr	r2, .L118+4
 1841 00f8 1A44     		add	r2, r2, r3
 1842 00fa BB69     		ldr	r3, [r7, #24]
 1843 00fc 0433     		adds	r3, r3, #4
 1844 00fe 1946     		mov	r1, r3
 1845 0100 1046     		mov	r0, r2
ARM GAS  /tmp/cc65XYwf.s 			page 66


 1846 0102 FFF7FEFF 		bl	vListInsertEnd
 1847              	.L116:
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1848              		.loc 1 1674 7 is_stmt 1
 1849 0106 FB69     		ldr	r3, [r7, #28]
 1850 0108 002B     		cmp	r3, #0
 1851 010a 07D0     		beq	.L111
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1852              		.loc 1 1676 6
 1853 010c 094B     		ldr	r3, .L118+12
 1854 010e 4FF08052 		mov	r2, #268435456
 1855 0112 1A60     		str	r2, [r3]
 1856              		.syntax unified
 1857              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1858 0114 BFF34F8F 		dsb
 1859              	@ 0 "" 2
 1860              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1861 0118 BFF36F8F 		isb
 1862              	@ 0 "" 2
 1863              		.thumb
 1864              		.syntax unified
 1865              	.L111:
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1866              		.loc 1 1688 3
 1867 011c FFF7FEFF 		bl	vPortExitCritical
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1868              		.loc 1 1689 2
 1869 0120 00BF     		nop
 1870 0122 2037     		adds	r7, r7, #32
 1871              	.LCFI53:
 1872              		.cfi_def_cfa_offset 8
 1873 0124 BD46     		mov	sp, r7
 1874              	.LCFI54:
 1875              		.cfi_def_cfa_register 13
 1876              		@ sp needed
 1877 0126 80BD     		pop	{r7, pc}
 1878              	.L119:
 1879              		.align	2
 1880              	.L118:
ARM GAS  /tmp/cc65XYwf.s 			page 67


 1881 0128 00000000 		.word	pxCurrentTCB
 1882 012c 00000000 		.word	pxReadyTasksLists
 1883 0130 00000000 		.word	uxTopReadyPriority
 1884 0134 04ED00E0 		.word	-536810236
 1885              		.cfi_endproc
 1886              	.LFE14:
 1888              		.section	.text.vTaskSuspend,"ax",%progbits
 1889              		.align	1
 1890              		.global	vTaskSuspend
 1891              		.syntax unified
 1892              		.thumb
 1893              		.thumb_func
 1894              		.fpu fpv4-sp-d16
 1896              	vTaskSuspend:
 1897              	.LFB15:
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1898              		.loc 1 1697 2
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 16
 1901              		@ frame_needed = 1, uses_anonymous_args = 0
 1902 0000 80B5     		push	{r7, lr}
 1903              	.LCFI55:
 1904              		.cfi_def_cfa_offset 8
 1905              		.cfi_offset 7, -8
 1906              		.cfi_offset 14, -4
 1907 0002 84B0     		sub	sp, sp, #16
 1908              	.LCFI56:
 1909              		.cfi_def_cfa_offset 24
 1910 0004 00AF     		add	r7, sp, #0
 1911              	.LCFI57:
 1912              		.cfi_def_cfa_register 7
 1913 0006 7860     		str	r0, [r7, #4]
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1914              		.loc 1 1700 3
 1915 0008 FFF7FEFF 		bl	vPortEnterCritical
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1916              		.loc 1 1704 12
 1917 000c 7B68     		ldr	r3, [r7, #4]
 1918 000e 002B     		cmp	r3, #0
 1919 0010 02D1     		bne	.L121
 1920              		.loc 1 1704 12 is_stmt 0 discriminator 1
 1921 0012 2F4B     		ldr	r3, .L133
 1922 0014 1B68     		ldr	r3, [r3]
 1923 0016 00E0     		b	.L122
 1924              	.L121:
ARM GAS  /tmp/cc65XYwf.s 			page 68


 1925              		.loc 1 1704 12 discriminator 2
 1926 0018 7B68     		ldr	r3, [r7, #4]
 1927              	.L122:
 1928              		.loc 1 1704 10 is_stmt 1 discriminator 4
 1929 001a FB60     		str	r3, [r7, #12]
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1930              		.loc 1 1710 8 discriminator 4
 1931 001c FB68     		ldr	r3, [r7, #12]
 1932 001e 0433     		adds	r3, r3, #4
 1933 0020 1846     		mov	r0, r3
 1934 0022 FFF7FEFF 		bl	uxListRemove
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1935              		.loc 1 1720 8 discriminator 4
 1936 0026 FB68     		ldr	r3, [r7, #12]
 1937 0028 9B6A     		ldr	r3, [r3, #40]
 1938              		.loc 1 1720 6 discriminator 4
 1939 002a 002B     		cmp	r3, #0
 1940 002c 04D0     		beq	.L123
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1941              		.loc 1 1722 14
 1942 002e FB68     		ldr	r3, [r7, #12]
 1943 0030 1833     		adds	r3, r3, #24
 1944 0032 1846     		mov	r0, r3
 1945 0034 FFF7FEFF 		bl	uxListRemove
 1946              	.L123:
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1947              		.loc 1 1729 4
 1948 0038 FB68     		ldr	r3, [r7, #12]
 1949 003a 0433     		adds	r3, r3, #4
 1950 003c 1946     		mov	r1, r3
 1951 003e 2548     		ldr	r0, .L133+4
 1952 0040 FFF7FEFF 		bl	vListInsertEnd
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
ARM GAS  /tmp/cc65XYwf.s 			page 69


 1953              		.loc 1 1733 14
 1954 0044 FB68     		ldr	r3, [r7, #12]
 1955 0046 93F85830 		ldrb	r3, [r3, #88]
 1956 004a DBB2     		uxtb	r3, r3
 1957              		.loc 1 1733 7
 1958 004c 012B     		cmp	r3, #1
 1959 004e 03D1     		bne	.L124
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1960              		.loc 1 1737 27
 1961 0050 FB68     		ldr	r3, [r7, #12]
 1962 0052 0022     		movs	r2, #0
 1963 0054 83F85820 		strb	r2, [r3, #88]
 1964              	.L124:
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1965              		.loc 1 1742 3
 1966 0058 FFF7FEFF 		bl	vPortExitCritical
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1967              		.loc 1 1744 25
 1968 005c 1E4B     		ldr	r3, .L133+8
 1969 005e 1B68     		ldr	r3, [r3]
 1970              		.loc 1 1744 5
 1971 0060 002B     		cmp	r3, #0
 1972 0062 05D0     		beq	.L125
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1973              		.loc 1 1748 4
 1974 0064 FFF7FEFF 		bl	vPortEnterCritical
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1975              		.loc 1 1750 5
 1976 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1977              		.loc 1 1752 4
 1978 006c FFF7FEFF 		bl	vPortExitCritical
 1979              	.L125:
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1980              		.loc 1 1759 13
 1981 0070 174B     		ldr	r3, .L133
 1982 0072 1B68     		ldr	r3, [r3]
 1983              		.loc 1 1759 5
ARM GAS  /tmp/cc65XYwf.s 			page 70


 1984 0074 FA68     		ldr	r2, [r7, #12]
 1985 0076 9A42     		cmp	r2, r3
 1986 0078 26D1     		bne	.L132
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1987              		.loc 1 1761 26
 1988 007a 174B     		ldr	r3, .L133+8
 1989 007c 1B68     		ldr	r3, [r3]
 1990              		.loc 1 1761 6
 1991 007e 002B     		cmp	r3, #0
 1992 0080 16D0     		beq	.L127
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1993              		.loc 1 1764 5
 1994 0082 164B     		ldr	r3, .L133+12
 1995 0084 1B68     		ldr	r3, [r3]
 1996 0086 002B     		cmp	r3, #0
 1997 0088 09D0     		beq	.L128
 1998              	.LBB146:
 1999              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2000              		.loc 2 195 2 discriminator 1
 2001              		.syntax unified
 2002              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2003 008a 4FF05003 			mov r3, #80												
 2004 008e 83F31188 		msr basepri, r3											
 2005 0092 BFF36F8F 		isb														
 2006 0096 BFF34F8F 		dsb														
 2007              	
 2008              	@ 0 "" 2
 2009              		.thumb
 2010              		.syntax unified
 2011 009a BB60     		str	r3, [r7, #8]
 2012              	.L129:
 2013              	.LBE147:
 2014              	.LBE146:
 2015              		.loc 1 1764 5 discriminator 1
 2016 009c FEE7     		b	.L129
 2017              	.L128:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2018              		.loc 1 1765 5
 2019 009e 104B     		ldr	r3, .L133+16
 2020 00a0 4FF08052 		mov	r2, #268435456
 2021 00a4 1A60     		str	r2, [r3]
 2022              		.syntax unified
 2023              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2024 00a6 BFF34F8F 		dsb
 2025              	@ 0 "" 2
 2026              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2027 00aa BFF36F8F 		isb
 2028              	@ 0 "" 2
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
ARM GAS  /tmp/cc65XYwf.s 			page 71


1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2029              		.loc 1 1790 2
 2030              		.thumb
 2031              		.syntax unified
 2032 00ae 0BE0     		b	.L132
 2033              	.L127:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2034              		.loc 1 1772 9
 2035 00b0 084B     		ldr	r3, .L133+4
 2036 00b2 1A68     		ldr	r2, [r3]
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2037              		.loc 1 1772 56
 2038 00b4 0B4B     		ldr	r3, .L133+20
 2039 00b6 1B68     		ldr	r3, [r3]
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2040              		.loc 1 1772 7
 2041 00b8 9A42     		cmp	r2, r3
 2042 00ba 03D1     		bne	.L131
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2043              		.loc 1 1778 19
 2044 00bc 044B     		ldr	r3, .L133
 2045 00be 0022     		movs	r2, #0
 2046 00c0 1A60     		str	r2, [r3]
 2047              		.loc 1 1790 2
 2048 00c2 01E0     		b	.L132
 2049              	.L131:
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2050              		.loc 1 1782 6
 2051 00c4 FFF7FEFF 		bl	vTaskSwitchContext
 2052              	.L132:
 2053              		.loc 1 1790 2
 2054 00c8 00BF     		nop
 2055 00ca 1037     		adds	r7, r7, #16
 2056              	.LCFI58:
 2057              		.cfi_def_cfa_offset 8
 2058 00cc BD46     		mov	sp, r7
 2059              	.LCFI59:
 2060              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cc65XYwf.s 			page 72


 2061              		@ sp needed
 2062 00ce 80BD     		pop	{r7, pc}
 2063              	.L134:
 2064              		.align	2
 2065              	.L133:
 2066 00d0 00000000 		.word	pxCurrentTCB
 2067 00d4 00000000 		.word	xSuspendedTaskList
 2068 00d8 00000000 		.word	xSchedulerRunning
 2069 00dc 00000000 		.word	uxSchedulerSuspended
 2070 00e0 04ED00E0 		.word	-536810236
 2071 00e4 00000000 		.word	uxCurrentNumberOfTasks
 2072              		.cfi_endproc
 2073              	.LFE15:
 2075              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 2076              		.align	1
 2077              		.syntax unified
 2078              		.thumb
 2079              		.thumb_func
 2080              		.fpu fpv4-sp-d16
 2082              	prvTaskIsTaskSuspended:
 2083              	.LFB16:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2084              		.loc 1 1798 2
 2085              		.cfi_startproc
 2086              		@ args = 0, pretend = 0, frame = 24
 2087              		@ frame_needed = 1, uses_anonymous_args = 0
 2088              		@ link register save eliminated.
 2089 0000 80B4     		push	{r7}
 2090              	.LCFI60:
 2091              		.cfi_def_cfa_offset 4
 2092              		.cfi_offset 7, -4
 2093 0002 87B0     		sub	sp, sp, #28
 2094              	.LCFI61:
 2095              		.cfi_def_cfa_offset 32
 2096 0004 00AF     		add	r7, sp, #0
 2097              	.LCFI62:
 2098              		.cfi_def_cfa_register 7
 2099 0006 7860     		str	r0, [r7, #4]
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 2100              		.loc 1 1799 13
 2101 0008 0023     		movs	r3, #0
 2102 000a 7B61     		str	r3, [r7, #20]
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 2103              		.loc 1 1800 22
 2104 000c 7B68     		ldr	r3, [r7, #4]
 2105 000e 3B61     		str	r3, [r7, #16]
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 73


1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 2106              		.loc 1 1806 3
 2107 0010 7B68     		ldr	r3, [r7, #4]
 2108 0012 002B     		cmp	r3, #0
 2109 0014 09D1     		bne	.L136
 2110              	.LBB148:
 2111              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2112              		.loc 2 195 2 discriminator 1
 2113              		.syntax unified
 2114              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2115 0016 4FF05003 			mov r3, #80												
 2116 001a 83F31188 		msr basepri, r3											
 2117 001e BFF36F8F 		isb														
 2118 0022 BFF34F8F 		dsb														
 2119              	
 2120              	@ 0 "" 2
 2121              		.thumb
 2122              		.syntax unified
 2123 0026 FB60     		str	r3, [r7, #12]
 2124              	.L137:
 2125              	.LBE149:
 2126              	.LBE148:
 2127              		.loc 1 1806 3 discriminator 1
 2128 0028 FEE7     		b	.L137
 2129              	.L136:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2130              		.loc 1 1809 7
 2131 002a 3B69     		ldr	r3, [r7, #16]
 2132 002c 5B69     		ldr	r3, [r3, #20]
 2133              		.loc 1 1809 5
 2134 002e 0A4A     		ldr	r2, .L140
 2135 0030 9342     		cmp	r3, r2
 2136 0032 0AD1     		bne	.L138
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 2137              		.loc 1 1812 8
 2138 0034 3B69     		ldr	r3, [r7, #16]
 2139 0036 9B6A     		ldr	r3, [r3, #40]
 2140              		.loc 1 1812 6
 2141 0038 084A     		ldr	r2, .L140+4
 2142 003a 9342     		cmp	r3, r2
 2143 003c 05D0     		beq	.L138
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 2144              		.loc 1 1816 9
 2145 003e 3B69     		ldr	r3, [r7, #16]
 2146 0040 9B6A     		ldr	r3, [r3, #40]
 2147              		.loc 1 1816 7
 2148 0042 002B     		cmp	r3, #0
 2149 0044 01D1     		bne	.L138
ARM GAS  /tmp/cc65XYwf.s 			page 74


1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 2150              		.loc 1 1818 14
 2151 0046 0123     		movs	r3, #1
 2152 0048 7B61     		str	r3, [r7, #20]
 2153              	.L138:
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 2154              		.loc 1 1835 10
 2155 004a 7B69     		ldr	r3, [r7, #20]
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2156              		.loc 1 1836 2
 2157 004c 1846     		mov	r0, r3
 2158 004e 1C37     		adds	r7, r7, #28
 2159              	.LCFI63:
 2160              		.cfi_def_cfa_offset 4
 2161 0050 BD46     		mov	sp, r7
 2162              	.LCFI64:
 2163              		.cfi_def_cfa_register 13
 2164              		@ sp needed
 2165 0052 5DF8047B 		ldr	r7, [sp], #4
 2166              	.LCFI65:
 2167              		.cfi_restore 7
 2168              		.cfi_def_cfa_offset 0
 2169 0056 7047     		bx	lr
 2170              	.L141:
 2171              		.align	2
 2172              	.L140:
 2173 0058 00000000 		.word	xSuspendedTaskList
 2174 005c 00000000 		.word	xPendingReadyList
 2175              		.cfi_endproc
 2176              	.LFE16:
 2178              		.section	.text.vTaskResume,"ax",%progbits
 2179              		.align	1
 2180              		.global	vTaskResume
 2181              		.syntax unified
 2182              		.thumb
 2183              		.thumb_func
 2184              		.fpu fpv4-sp-d16
 2186              	vTaskResume:
 2187              	.LFB17:
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 75


1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2188              		.loc 1 1844 2
 2189              		.cfi_startproc
 2190              		@ args = 0, pretend = 0, frame = 16
 2191              		@ frame_needed = 1, uses_anonymous_args = 0
 2192 0000 80B5     		push	{r7, lr}
 2193              	.LCFI66:
 2194              		.cfi_def_cfa_offset 8
 2195              		.cfi_offset 7, -8
 2196              		.cfi_offset 14, -4
 2197 0002 84B0     		sub	sp, sp, #16
 2198              	.LCFI67:
 2199              		.cfi_def_cfa_offset 24
 2200 0004 00AF     		add	r7, sp, #0
 2201              	.LCFI68:
 2202              		.cfi_def_cfa_register 7
 2203 0006 7860     		str	r0, [r7, #4]
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2204              		.loc 1 1845 16
 2205 0008 7B68     		ldr	r3, [r7, #4]
 2206 000a FB60     		str	r3, [r7, #12]
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2207              		.loc 1 1848 3
 2208 000c 7B68     		ldr	r3, [r7, #4]
 2209 000e 002B     		cmp	r3, #0
 2210 0010 09D1     		bne	.L143
 2211              	.LBB150:
 2212              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2213              		.loc 2 195 2 discriminator 1
 2214              		.syntax unified
 2215              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2216 0012 4FF05003 			mov r3, #80												
 2217 0016 83F31188 		msr basepri, r3											
 2218 001a BFF36F8F 		isb														
 2219 001e BFF34F8F 		dsb														
 2220              	
 2221              	@ 0 "" 2
 2222              		.thumb
 2223              		.syntax unified
 2224 0022 BB60     		str	r3, [r7, #8]
 2225              	.L144:
 2226              	.LBE151:
 2227              	.LBE150:
 2228              		.loc 1 1848 3 discriminator 1
 2229 0024 FEE7     		b	.L144
 2230              	.L143:
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
ARM GAS  /tmp/cc65XYwf.s 			page 76


1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2231              		.loc 1 1852 15
 2232 0026 214B     		ldr	r3, .L149
 2233 0028 1B68     		ldr	r3, [r3]
 2234              		.loc 1 1852 5
 2235 002a FA68     		ldr	r2, [r7, #12]
 2236 002c 9A42     		cmp	r2, r3
 2237 002e 38D0     		beq	.L148
 2238              		.loc 1 1852 33 discriminator 1
 2239 0030 FB68     		ldr	r3, [r7, #12]
 2240 0032 002B     		cmp	r3, #0
 2241 0034 35D0     		beq	.L148
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 2242              		.loc 1 1854 4
 2243 0036 FFF7FEFF 		bl	vPortEnterCritical
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2244              		.loc 1 1856 9
 2245 003a F868     		ldr	r0, [r7, #12]
 2246 003c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2247 0040 0346     		mov	r3, r0
 2248              		.loc 1 1856 7
 2249 0042 002B     		cmp	r3, #0
 2250 0044 2BD0     		beq	.L146
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2251              		.loc 1 1862 15
 2252 0046 FB68     		ldr	r3, [r7, #12]
 2253 0048 0433     		adds	r3, r3, #4
 2254 004a 1846     		mov	r0, r3
 2255 004c FFF7FEFF 		bl	uxListRemove
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2256              		.loc 1 1863 6
 2257 0050 FB68     		ldr	r3, [r7, #12]
 2258 0052 DA6A     		ldr	r2, [r3, #44]
 2259 0054 164B     		ldr	r3, .L149+4
 2260 0056 1B68     		ldr	r3, [r3]
 2261 0058 9A42     		cmp	r2, r3
 2262 005a 03D9     		bls	.L147
 2263              		.loc 1 1863 6 is_stmt 0 discriminator 1
 2264 005c FB68     		ldr	r3, [r7, #12]
 2265 005e DB6A     		ldr	r3, [r3, #44]
 2266 0060 134A     		ldr	r2, .L149+4
 2267 0062 1360     		str	r3, [r2]
 2268              	.L147:
 2269              		.loc 1 1863 6 discriminator 3
 2270 0064 FB68     		ldr	r3, [r7, #12]
 2271 0066 DA6A     		ldr	r2, [r3, #44]
 2272 0068 1346     		mov	r3, r2
 2273 006a 9B00     		lsls	r3, r3, #2
 2274 006c 1344     		add	r3, r3, r2
ARM GAS  /tmp/cc65XYwf.s 			page 77


 2275 006e 9B00     		lsls	r3, r3, #2
 2276 0070 104A     		ldr	r2, .L149+8
 2277 0072 1A44     		add	r2, r2, r3
 2278 0074 FB68     		ldr	r3, [r7, #12]
 2279 0076 0433     		adds	r3, r3, #4
 2280 0078 1946     		mov	r1, r3
 2281 007a 1046     		mov	r0, r2
 2282 007c FFF7FEFF 		bl	vListInsertEnd
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2283              		.loc 1 1866 15 is_stmt 1 discriminator 3
 2284 0080 FB68     		ldr	r3, [r7, #12]
 2285 0082 DA6A     		ldr	r2, [r3, #44]
 2286              		.loc 1 1866 43 discriminator 3
 2287 0084 094B     		ldr	r3, .L149
 2288 0086 1B68     		ldr	r3, [r3]
 2289 0088 DB6A     		ldr	r3, [r3, #44]
 2290              		.loc 1 1866 8 discriminator 3
 2291 008a 9A42     		cmp	r2, r3
 2292 008c 07D3     		bcc	.L146
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2293              		.loc 1 1871 7
 2294 008e 0A4B     		ldr	r3, .L149+12
 2295 0090 4FF08052 		mov	r2, #268435456
 2296 0094 1A60     		str	r2, [r3]
 2297              		.syntax unified
 2298              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2299 0096 BFF34F8F 		dsb
 2300              	@ 0 "" 2
 2301              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2302 009a BFF36F8F 		isb
 2303              	@ 0 "" 2
 2304              		.thumb
 2305              		.syntax unified
 2306              	.L146:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2307              		.loc 1 1883 4
 2308 009e FFF7FEFF 		bl	vPortExitCritical
 2309              	.L148:
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/cc65XYwf.s 			page 78


1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2310              		.loc 1 1889 2
 2311 00a2 00BF     		nop
 2312 00a4 1037     		adds	r7, r7, #16
 2313              	.LCFI69:
 2314              		.cfi_def_cfa_offset 8
 2315 00a6 BD46     		mov	sp, r7
 2316              	.LCFI70:
 2317              		.cfi_def_cfa_register 13
 2318              		@ sp needed
 2319 00a8 80BD     		pop	{r7, pc}
 2320              	.L150:
 2321 00aa 00BF     		.align	2
 2322              	.L149:
 2323 00ac 00000000 		.word	pxCurrentTCB
 2324 00b0 00000000 		.word	uxTopReadyPriority
 2325 00b4 00000000 		.word	pxReadyTasksLists
 2326 00b8 04ED00E0 		.word	-536810236
 2327              		.cfi_endproc
 2328              	.LFE17:
 2330              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2331              		.align	1
 2332              		.global	xTaskResumeFromISR
 2333              		.syntax unified
 2334              		.thumb
 2335              		.thumb_func
 2336              		.fpu fpv4-sp-d16
 2338              	xTaskResumeFromISR:
 2339              	.LFB18:
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2340              		.loc 1 1898 2
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 40
 2343              		@ frame_needed = 1, uses_anonymous_args = 0
 2344 0000 80B5     		push	{r7, lr}
 2345              	.LCFI71:
 2346              		.cfi_def_cfa_offset 8
 2347              		.cfi_offset 7, -8
 2348              		.cfi_offset 14, -4
 2349 0002 8AB0     		sub	sp, sp, #40
 2350              	.LCFI72:
 2351              		.cfi_def_cfa_offset 48
 2352 0004 00AF     		add	r7, sp, #0
 2353              	.LCFI73:
 2354              		.cfi_def_cfa_register 7
 2355 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cc65XYwf.s 			page 79


1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2356              		.loc 1 1899 13
 2357 0008 0023     		movs	r3, #0
 2358 000a 7B62     		str	r3, [r7, #36]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2359              		.loc 1 1900 16
 2360 000c 7B68     		ldr	r3, [r7, #4]
 2361 000e 3B62     		str	r3, [r7, #32]
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2362              		.loc 1 1903 3
 2363 0010 7B68     		ldr	r3, [r7, #4]
 2364 0012 002B     		cmp	r3, #0
 2365 0014 09D1     		bne	.L152
 2366              	.LBB152:
 2367              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2368              		.loc 2 195 2 discriminator 1
 2369              		.syntax unified
 2370              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2371 0016 4FF05003 			mov r3, #80												
 2372 001a 83F31188 		msr basepri, r3											
 2373 001e BFF36F8F 		isb														
 2374 0022 BFF34F8F 		dsb														
 2375              	
 2376              	@ 0 "" 2
 2377              		.thumb
 2378              		.syntax unified
 2379 0026 BB61     		str	r3, [r7, #24]
 2380              	.L153:
 2381              	.LBE153:
 2382              	.LBE152:
 2383              		.loc 1 1903 3 discriminator 1
 2384 0028 FEE7     		b	.L153
 2385              	.L152:
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2386              		.loc 1 1921 3
 2387 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
 2388              	.LBB154:
ARM GAS  /tmp/cc65XYwf.s 			page 80


 2389              	.LBB155:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2390              		.loc 2 211 2
 2391              		.syntax unified
 2392              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2393 002e EFF31182 			mrs r2, basepri											
 2394 0032 4FF05003 		mov r3, #80												
 2395 0036 83F31188 		msr basepri, r3											
 2396 003a BFF36F8F 		isb														
 2397 003e BFF34F8F 		dsb														
 2398              	
 2399              	@ 0 "" 2
 2400              		.thumb
 2401              		.syntax unified
 2402 0042 7A61     		str	r2, [r7, #20]
 2403 0044 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2404              		.loc 2 223 9
 2405 0046 7B69     		ldr	r3, [r7, #20]
 2406              	.LBE155:
 2407              	.LBE154:
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2408              		.loc 1 1923 28
 2409 0048 FB61     		str	r3, [r7, #28]
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2410              		.loc 1 1925 8
 2411 004a 386A     		ldr	r0, [r7, #32]
 2412 004c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2413 0050 0346     		mov	r3, r0
 2414              		.loc 1 1925 6
 2415 0052 002B     		cmp	r3, #0
 2416 0054 30D0     		beq	.L155
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2417              		.loc 1 1930 30
 2418 0056 1D4B     		ldr	r3, .L161
 2419 0058 1B68     		ldr	r3, [r3]
 2420              		.loc 1 1930 7
 2421 005a 002B     		cmp	r3, #0
 2422 005c 26D1     		bne	.L156
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2423              		.loc 1 1934 15
 2424 005e 3B6A     		ldr	r3, [r7, #32]
 2425 0060 DA6A     		ldr	r2, [r3, #44]
 2426              		.loc 1 1934 43
 2427 0062 1B4B     		ldr	r3, .L161+4
 2428 0064 1B68     		ldr	r3, [r3]
 2429 0066 DB6A     		ldr	r3, [r3, #44]
 2430              		.loc 1 1934 8
ARM GAS  /tmp/cc65XYwf.s 			page 81


 2431 0068 9A42     		cmp	r2, r3
 2432 006a 01D3     		bcc	.L157
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2433              		.loc 1 1936 22
 2434 006c 0123     		movs	r3, #1
 2435 006e 7B62     		str	r3, [r7, #36]
 2436              	.L157:
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2437              		.loc 1 1943 15
 2438 0070 3B6A     		ldr	r3, [r7, #32]
 2439 0072 0433     		adds	r3, r3, #4
 2440 0074 1846     		mov	r0, r3
 2441 0076 FFF7FEFF 		bl	uxListRemove
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2442              		.loc 1 1944 6
 2443 007a 3B6A     		ldr	r3, [r7, #32]
 2444 007c DA6A     		ldr	r2, [r3, #44]
 2445 007e 154B     		ldr	r3, .L161+8
 2446 0080 1B68     		ldr	r3, [r3]
 2447 0082 9A42     		cmp	r2, r3
 2448 0084 03D9     		bls	.L158
 2449              		.loc 1 1944 6 is_stmt 0 discriminator 1
 2450 0086 3B6A     		ldr	r3, [r7, #32]
 2451 0088 DB6A     		ldr	r3, [r3, #44]
 2452 008a 124A     		ldr	r2, .L161+8
 2453 008c 1360     		str	r3, [r2]
 2454              	.L158:
 2455              		.loc 1 1944 6 discriminator 3
 2456 008e 3B6A     		ldr	r3, [r7, #32]
 2457 0090 DA6A     		ldr	r2, [r3, #44]
 2458 0092 1346     		mov	r3, r2
 2459 0094 9B00     		lsls	r3, r3, #2
 2460 0096 1344     		add	r3, r3, r2
 2461 0098 9B00     		lsls	r3, r3, #2
 2462 009a 0F4A     		ldr	r2, .L161+12
 2463 009c 1A44     		add	r2, r2, r3
 2464 009e 3B6A     		ldr	r3, [r7, #32]
 2465 00a0 0433     		adds	r3, r3, #4
 2466 00a2 1946     		mov	r1, r3
 2467 00a4 1046     		mov	r0, r2
 2468 00a6 FFF7FEFF 		bl	vListInsertEnd
 2469 00aa 05E0     		b	.L155
 2470              	.L156:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
ARM GAS  /tmp/cc65XYwf.s 			page 82


 2471              		.loc 1 1951 6 is_stmt 1
 2472 00ac 3B6A     		ldr	r3, [r7, #32]
 2473 00ae 1833     		adds	r3, r3, #24
 2474 00b0 1946     		mov	r1, r3
 2475 00b2 0A48     		ldr	r0, .L161+16
 2476 00b4 FFF7FEFF 		bl	vListInsertEnd
 2477              	.L155:
 2478 00b8 FB69     		ldr	r3, [r7, #28]
 2479 00ba FB60     		str	r3, [r7, #12]
 2480              	.LBB156:
 2481              	.LBB157:
 2482              		.loc 2 229 2
 2483 00bc FB68     		ldr	r3, [r7, #12]
 2484              		.syntax unified
 2485              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2486 00be 83F31188 			msr basepri, r3	
 2487              	@ 0 "" 2
 2488              		.thumb
 2489              		.syntax unified
 2490              	.LBE157:
 2491              	.LBE156:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2492              		.loc 1 1961 10
 2493 00c2 7B6A     		ldr	r3, [r7, #36]
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2494              		.loc 1 1962 2
 2495 00c4 1846     		mov	r0, r3
 2496 00c6 2837     		adds	r7, r7, #40
 2497              	.LCFI74:
 2498              		.cfi_def_cfa_offset 8
 2499 00c8 BD46     		mov	sp, r7
 2500              	.LCFI75:
 2501              		.cfi_def_cfa_register 13
 2502              		@ sp needed
 2503 00ca 80BD     		pop	{r7, pc}
 2504              	.L162:
 2505              		.align	2
 2506              	.L161:
 2507 00cc 00000000 		.word	uxSchedulerSuspended
 2508 00d0 00000000 		.word	pxCurrentTCB
 2509 00d4 00000000 		.word	uxTopReadyPriority
 2510 00d8 00000000 		.word	pxReadyTasksLists
 2511 00dc 00000000 		.word	xPendingReadyList
 2512              		.cfi_endproc
 2513              	.LFE18:
 2515              		.section	.rodata
 2516              		.align	2
 2517              	.LC0:
ARM GAS  /tmp/cc65XYwf.s 			page 83


 2518 0000 49444C45 		.ascii	"IDLE\000"
 2518      00
 2519              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2520              		.align	1
 2521              		.global	vTaskStartScheduler
 2522              		.syntax unified
 2523              		.thumb
 2524              		.thumb_func
 2525              		.fpu fpv4-sp-d16
 2527              	vTaskStartScheduler:
 2528              	.LFB19:
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2529              		.loc 1 1968 1
 2530              		.cfi_startproc
 2531              		@ args = 0, pretend = 0, frame = 24
 2532              		@ frame_needed = 1, uses_anonymous_args = 0
 2533 0000 80B5     		push	{r7, lr}
 2534              	.LCFI76:
 2535              		.cfi_def_cfa_offset 8
 2536              		.cfi_offset 7, -8
 2537              		.cfi_offset 14, -4
 2538 0002 8AB0     		sub	sp, sp, #40
 2539              	.LCFI77:
 2540              		.cfi_def_cfa_offset 48
 2541 0004 04AF     		add	r7, sp, #16
 2542              	.LCFI78:
 2543              		.cfi_def_cfa 7, 32
 2544              	.LBB158:
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2545              		.loc 1 1974 17
 2546 0006 0023     		movs	r3, #0
 2547 0008 BB60     		str	r3, [r7, #8]
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2548              		.loc 1 1975 16
 2549 000a 0023     		movs	r3, #0
 2550 000c 7B60     		str	r3, [r7, #4]
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2551              		.loc 1 1980 3
 2552 000e 3A46     		mov	r2, r7
 2553 0010 391D     		adds	r1, r7, #4
 2554 0012 07F10803 		add	r3, r7, #8
 2555 0016 1846     		mov	r0, r3
 2556 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
ARM GAS  /tmp/cc65XYwf.s 			page 84


1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2557              		.loc 1 1981 21
 2558 001c 3968     		ldr	r1, [r7]
 2559 001e 7B68     		ldr	r3, [r7, #4]
 2560 0020 BA68     		ldr	r2, [r7, #8]
 2561 0022 0292     		str	r2, [sp, #8]
 2562 0024 0193     		str	r3, [sp, #4]
 2563 0026 0023     		movs	r3, #0
 2564 0028 0093     		str	r3, [sp]
 2565 002a 0023     		movs	r3, #0
 2566 002c 0A46     		mov	r2, r1
 2567 002e 2049     		ldr	r1, .L171
 2568 0030 2048     		ldr	r0, .L171+4
 2569 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2570 0036 0246     		mov	r2, r0
 2571              		.loc 1 1981 19
 2572 0038 1F4B     		ldr	r3, .L171+8
 2573 003a 1A60     		str	r2, [r3]
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2574              		.loc 1 1989 23
 2575 003c 1E4B     		ldr	r3, .L171+8
 2576 003e 1B68     		ldr	r3, [r3]
 2577              		.loc 1 1989 5
 2578 0040 002B     		cmp	r3, #0
 2579 0042 02D0     		beq	.L164
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2580              		.loc 1 1991 12
 2581 0044 0123     		movs	r3, #1
 2582 0046 7B61     		str	r3, [r7, #20]
 2583 0048 01E0     		b	.L165
 2584              	.L164:
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2585              		.loc 1 1995 12
 2586 004a 0023     		movs	r3, #0
 2587 004c 7B61     		str	r3, [r7, #20]
 2588              	.L165:
 2589              	.LBE158:
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
ARM GAS  /tmp/cc65XYwf.s 			page 85


2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 2590              		.loc 1 2012 5
 2591 004e 7B69     		ldr	r3, [r7, #20]
 2592 0050 012B     		cmp	r3, #1
 2593 0052 02D1     		bne	.L166
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2594              		.loc 1 2014 14
 2595 0054 FFF7FEFF 		bl	xTimerCreateTimerTask
 2596 0058 7861     		str	r0, [r7, #20]
 2597              	.L166:
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2598              		.loc 1 2023 4
 2599 005a 7B69     		ldr	r3, [r7, #20]
 2600 005c 012B     		cmp	r3, #1
 2601 005e 15D1     		bne	.L167
 2602              	.LBB159:
 2603              	.LBB160:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2604              		.loc 2 195 2
 2605              		.syntax unified
 2606              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2607 0060 4FF05003 			mov r3, #80												
 2608 0064 83F31188 		msr basepri, r3											
 2609 0068 BFF36F8F 		isb														
 2610 006c BFF34F8F 		dsb														
 2611              	
 2612              	@ 0 "" 2
 2613              		.thumb
 2614              		.syntax unified
 2615 0070 3B61     		str	r3, [r7, #16]
 2616              	.LBE160:
 2617              	.LBE159:
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  /tmp/cc65XYwf.s 			page 86


2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2618              		.loc 1 2049 24
 2619 0072 124B     		ldr	r3, .L171+12
 2620 0074 4FF0FF32 		mov	r2, #-1
 2621 0078 1A60     		str	r2, [r3]
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2622              		.loc 1 2050 21
 2623 007a 114B     		ldr	r3, .L171+16
 2624 007c 0122     		movs	r2, #1
 2625 007e 1A60     		str	r2, [r3]
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2626              		.loc 1 2051 14
 2627 0080 104B     		ldr	r3, .L171+20
 2628 0082 0022     		movs	r2, #0
 2629 0084 1A60     		str	r2, [r3]
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2630              		.loc 1 2065 7
 2631 0086 FFF7FEFF 		bl	xPortStartScheduler
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
ARM GAS  /tmp/cc65XYwf.s 			page 87


2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2632              		.loc 1 2086 1
 2633 008a 0DE0     		b	.L170
 2634              	.L167:
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2635              		.loc 1 2080 3
 2636 008c 7B69     		ldr	r3, [r7, #20]
 2637 008e B3F1FF3F 		cmp	r3, #-1
 2638 0092 09D1     		bne	.L170
 2639              	.LBB161:
 2640              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2641              		.loc 2 195 2 discriminator 1
 2642              		.syntax unified
 2643              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2644 0094 4FF05003 			mov r3, #80												
 2645 0098 83F31188 		msr basepri, r3											
 2646 009c BFF36F8F 		isb														
 2647 00a0 BFF34F8F 		dsb														
 2648              	
 2649              	@ 0 "" 2
 2650              		.thumb
 2651              		.syntax unified
 2652 00a4 FB60     		str	r3, [r7, #12]
 2653              	.L169:
 2654              	.LBE162:
 2655              	.LBE161:
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2656              		.loc 1 2080 3 discriminator 2
 2657 00a6 FEE7     		b	.L169
 2658              	.L170:
 2659              		.loc 1 2086 1
 2660 00a8 00BF     		nop
 2661 00aa 1837     		adds	r7, r7, #24
 2662              	.LCFI79:
 2663              		.cfi_def_cfa_offset 8
 2664 00ac BD46     		mov	sp, r7
 2665              	.LCFI80:
 2666              		.cfi_def_cfa_register 13
 2667              		@ sp needed
 2668 00ae 80BD     		pop	{r7, pc}
 2669              	.L172:
 2670              		.align	2
 2671              	.L171:
 2672 00b0 00000000 		.word	.LC0
 2673 00b4 00000000 		.word	prvIdleTask
 2674 00b8 00000000 		.word	xIdleTaskHandle
ARM GAS  /tmp/cc65XYwf.s 			page 88


 2675 00bc 00000000 		.word	xNextTaskUnblockTime
 2676 00c0 00000000 		.word	xSchedulerRunning
 2677 00c4 00000000 		.word	xTickCount
 2678              		.cfi_endproc
 2679              	.LFE19:
 2681              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2682              		.align	1
 2683              		.global	vTaskEndScheduler
 2684              		.syntax unified
 2685              		.thumb
 2686              		.thumb_func
 2687              		.fpu fpv4-sp-d16
 2689              	vTaskEndScheduler:
 2690              	.LFB20:
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2691              		.loc 1 2090 1
 2692              		.cfi_startproc
 2693              		@ args = 0, pretend = 0, frame = 8
 2694              		@ frame_needed = 1, uses_anonymous_args = 0
 2695 0000 80B5     		push	{r7, lr}
 2696              	.LCFI81:
 2697              		.cfi_def_cfa_offset 8
 2698              		.cfi_offset 7, -8
 2699              		.cfi_offset 14, -4
 2700 0002 82B0     		sub	sp, sp, #8
 2701              	.LCFI82:
 2702              		.cfi_def_cfa_offset 16
 2703 0004 00AF     		add	r7, sp, #0
 2704              	.LCFI83:
 2705              		.cfi_def_cfa_register 7
 2706              	.LBB163:
 2707              	.LBB164:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2708              		.loc 2 195 2
 2709              		.syntax unified
 2710              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2711 0006 4FF05003 			mov r3, #80												
 2712 000a 83F31188 		msr basepri, r3											
 2713 000e BFF36F8F 		isb														
 2714 0012 BFF34F8F 		dsb														
 2715              	
 2716              	@ 0 "" 2
 2717              		.thumb
 2718              		.syntax unified
 2719 0016 7B60     		str	r3, [r7, #4]
 2720              	.LBE164:
 2721              	.LBE163:
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2722              		.loc 1 2095 20
 2723 0018 044B     		ldr	r3, .L174
ARM GAS  /tmp/cc65XYwf.s 			page 89


 2724 001a 0022     		movs	r2, #0
 2725 001c 1A60     		str	r2, [r3]
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2726              		.loc 1 2096 2
 2727 001e FFF7FEFF 		bl	vPortEndScheduler
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2728              		.loc 1 2097 1
 2729 0022 00BF     		nop
 2730 0024 0837     		adds	r7, r7, #8
 2731              	.LCFI84:
 2732              		.cfi_def_cfa_offset 8
 2733 0026 BD46     		mov	sp, r7
 2734              	.LCFI85:
 2735              		.cfi_def_cfa_register 13
 2736              		@ sp needed
 2737 0028 80BD     		pop	{r7, pc}
 2738              	.L175:
 2739 002a 00BF     		.align	2
 2740              	.L174:
 2741 002c 00000000 		.word	xSchedulerRunning
 2742              		.cfi_endproc
 2743              	.LFE20:
 2745              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2746              		.align	1
 2747              		.global	vTaskSuspendAll
 2748              		.syntax unified
 2749              		.thumb
 2750              		.thumb_func
 2751              		.fpu fpv4-sp-d16
 2753              	vTaskSuspendAll:
 2754              	.LFB21:
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2755              		.loc 1 2101 1
 2756              		.cfi_startproc
 2757              		@ args = 0, pretend = 0, frame = 0
 2758              		@ frame_needed = 1, uses_anonymous_args = 0
 2759              		@ link register save eliminated.
 2760 0000 80B4     		push	{r7}
 2761              	.LCFI86:
 2762              		.cfi_def_cfa_offset 4
 2763              		.cfi_offset 7, -4
 2764 0002 00AF     		add	r7, sp, #0
 2765              	.LCFI87:
 2766              		.cfi_def_cfa_register 7
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2767              		.loc 1 2106 2
 2768 0004 044B     		ldr	r3, .L177
 2769 0006 1B68     		ldr	r3, [r3]
 2770 0008 0133     		adds	r3, r3, #1
 2771 000a 034A     		ldr	r2, .L177
ARM GAS  /tmp/cc65XYwf.s 			page 90


 2772 000c 1360     		str	r3, [r2]
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2773              		.loc 1 2107 2
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2774              		.loc 1 2108 1
 2775 000e 00BF     		nop
 2776 0010 BD46     		mov	sp, r7
 2777              	.LCFI88:
 2778              		.cfi_def_cfa_register 13
 2779              		@ sp needed
 2780 0012 5DF8047B 		ldr	r7, [sp], #4
 2781              	.LCFI89:
 2782              		.cfi_restore 7
 2783              		.cfi_def_cfa_offset 0
 2784 0016 7047     		bx	lr
 2785              	.L178:
 2786              		.align	2
 2787              	.L177:
 2788 0018 00000000 		.word	uxSchedulerSuspended
 2789              		.cfi_endproc
 2790              	.LFE21:
 2792              		.section	.text.xTaskResumeAll,"ax",%progbits
 2793              		.align	1
 2794              		.global	xTaskResumeAll
 2795              		.syntax unified
 2796              		.thumb
 2797              		.thumb_func
 2798              		.fpu fpv4-sp-d16
 2800              	xTaskResumeAll:
 2801              	.LFB22:
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
ARM GAS  /tmp/cc65XYwf.s 			page 91


2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2802              		.loc 1 2175 1
 2803              		.cfi_startproc
 2804              		@ args = 0, pretend = 0, frame = 16
 2805              		@ frame_needed = 1, uses_anonymous_args = 0
 2806 0000 80B5     		push	{r7, lr}
 2807              	.LCFI90:
 2808              		.cfi_def_cfa_offset 8
 2809              		.cfi_offset 7, -8
 2810              		.cfi_offset 14, -4
 2811 0002 84B0     		sub	sp, sp, #16
 2812              	.LCFI91:
 2813              		.cfi_def_cfa_offset 24
 2814 0004 00AF     		add	r7, sp, #0
 2815              	.LCFI92:
 2816              		.cfi_def_cfa_register 7
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2817              		.loc 1 2176 8
ARM GAS  /tmp/cc65XYwf.s 			page 92


 2818 0006 0023     		movs	r3, #0
 2819 0008 FB60     		str	r3, [r7, #12]
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2820              		.loc 1 2177 12
 2821 000a 0023     		movs	r3, #0
 2822 000c BB60     		str	r3, [r7, #8]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2823              		.loc 1 2181 2
 2824 000e 414B     		ldr	r3, .L191
 2825 0010 1B68     		ldr	r3, [r3]
 2826 0012 002B     		cmp	r3, #0
 2827 0014 09D1     		bne	.L180
 2828              	.LBB165:
 2829              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2830              		.loc 2 195 2 discriminator 1
 2831              		.syntax unified
 2832              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2833 0016 4FF05003 			mov r3, #80												
 2834 001a 83F31188 		msr basepri, r3											
 2835 001e BFF36F8F 		isb														
 2836 0022 BFF34F8F 		dsb														
 2837              	
 2838              	@ 0 "" 2
 2839              		.thumb
 2840              		.syntax unified
 2841 0026 3B60     		str	r3, [r7]
 2842              	.L181:
 2843              	.LBE166:
 2844              	.LBE165:
 2845              		.loc 1 2181 2 discriminator 1
 2846 0028 FEE7     		b	.L181
 2847              	.L180:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2848              		.loc 1 2188 2
 2849 002a FFF7FEFF 		bl	vPortEnterCritical
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2850              		.loc 1 2190 3
 2851 002e 394B     		ldr	r3, .L191
 2852 0030 1B68     		ldr	r3, [r3]
 2853 0032 013B     		subs	r3, r3, #1
 2854 0034 374A     		ldr	r2, .L191
 2855 0036 1360     		str	r3, [r2]
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2856              		.loc 1 2192 28
 2857 0038 364B     		ldr	r3, .L191
ARM GAS  /tmp/cc65XYwf.s 			page 93


 2858 003a 1B68     		ldr	r3, [r3]
 2859              		.loc 1 2192 5
 2860 003c 002B     		cmp	r3, #0
 2861 003e 62D1     		bne	.L182
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2862              		.loc 1 2194 31
 2863 0040 354B     		ldr	r3, .L191+4
 2864 0042 1B68     		ldr	r3, [r3]
 2865              		.loc 1 2194 6
 2866 0044 002B     		cmp	r3, #0
 2867 0046 5ED0     		beq	.L182
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2868              		.loc 1 2198 10
 2869 0048 2FE0     		b	.L183
 2870              	.L185:
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2871              		.loc 1 2200 14
 2872 004a 344B     		ldr	r3, .L191+8
 2873 004c DB68     		ldr	r3, [r3, #12]
 2874              		.loc 1 2200 12
 2875 004e DB68     		ldr	r3, [r3, #12]
 2876 0050 FB60     		str	r3, [r7, #12]
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2877              		.loc 1 2201 15
 2878 0052 FB68     		ldr	r3, [r7, #12]
 2879 0054 1833     		adds	r3, r3, #24
 2880 0056 1846     		mov	r0, r3
 2881 0058 FFF7FEFF 		bl	uxListRemove
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2882              		.loc 1 2202 15
 2883 005c FB68     		ldr	r3, [r7, #12]
 2884 005e 0433     		adds	r3, r3, #4
 2885 0060 1846     		mov	r0, r3
 2886 0062 FFF7FEFF 		bl	uxListRemove
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2887              		.loc 1 2203 6
 2888 0066 FB68     		ldr	r3, [r7, #12]
 2889 0068 DA6A     		ldr	r2, [r3, #44]
 2890 006a 2D4B     		ldr	r3, .L191+12
 2891 006c 1B68     		ldr	r3, [r3]
 2892 006e 9A42     		cmp	r2, r3
 2893 0070 03D9     		bls	.L184
 2894              		.loc 1 2203 6 is_stmt 0 discriminator 1
 2895 0072 FB68     		ldr	r3, [r7, #12]
 2896 0074 DB6A     		ldr	r3, [r3, #44]
 2897 0076 2A4A     		ldr	r2, .L191+12
 2898 0078 1360     		str	r3, [r2]
 2899              	.L184:
 2900              		.loc 1 2203 6 discriminator 3
 2901 007a FB68     		ldr	r3, [r7, #12]
 2902 007c DA6A     		ldr	r2, [r3, #44]
 2903 007e 1346     		mov	r3, r2
ARM GAS  /tmp/cc65XYwf.s 			page 94


 2904 0080 9B00     		lsls	r3, r3, #2
 2905 0082 1344     		add	r3, r3, r2
 2906 0084 9B00     		lsls	r3, r3, #2
 2907 0086 274A     		ldr	r2, .L191+16
 2908 0088 1A44     		add	r2, r2, r3
 2909 008a FB68     		ldr	r3, [r7, #12]
 2910 008c 0433     		adds	r3, r3, #4
 2911 008e 1946     		mov	r1, r3
 2912 0090 1046     		mov	r0, r2
 2913 0092 FFF7FEFF 		bl	vListInsertEnd
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2914              		.loc 1 2207 15 is_stmt 1 discriminator 3
 2915 0096 FB68     		ldr	r3, [r7, #12]
 2916 0098 DA6A     		ldr	r2, [r3, #44]
 2917              		.loc 1 2207 43 discriminator 3
 2918 009a 234B     		ldr	r3, .L191+20
 2919 009c 1B68     		ldr	r3, [r3]
 2920 009e DB6A     		ldr	r3, [r3, #44]
 2921              		.loc 1 2207 8 discriminator 3
 2922 00a0 9A42     		cmp	r2, r3
 2923 00a2 02D3     		bcc	.L183
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2924              		.loc 1 2209 21
 2925 00a4 214B     		ldr	r3, .L191+24
 2926 00a6 0122     		movs	r2, #1
 2927 00a8 1A60     		str	r2, [r3]
 2928              	.L183:
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2929              		.loc 1 2198 12
 2930 00aa 1C4B     		ldr	r3, .L191+8
 2931 00ac 1B68     		ldr	r3, [r3]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2932              		.loc 1 2198 10
 2933 00ae 002B     		cmp	r3, #0
 2934 00b0 CBD1     		bne	.L185
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2935              		.loc 1 2217 7
 2936 00b2 FB68     		ldr	r3, [r7, #12]
 2937 00b4 002B     		cmp	r3, #0
 2938 00b6 01D0     		beq	.L186
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
ARM GAS  /tmp/cc65XYwf.s 			page 95


2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2939              		.loc 1 2225 6
 2940 00b8 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2941              	.L186:
 2942              	.LBB167:
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2943              		.loc 1 2233 18
 2944 00bc 1C4B     		ldr	r3, .L191+28
 2945 00be 1B68     		ldr	r3, [r3]
 2946 00c0 7B60     		str	r3, [r7, #4]
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2947              		.loc 1 2235 8
 2948 00c2 7B68     		ldr	r3, [r7, #4]
 2949 00c4 002B     		cmp	r3, #0
 2950 00c6 10D0     		beq	.L187
 2951              	.L189:
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2952              		.loc 1 2239 12
 2953 00c8 FFF7FEFF 		bl	xTaskIncrementTick
 2954 00cc 0346     		mov	r3, r0
 2955              		.loc 1 2239 10
 2956 00ce 002B     		cmp	r3, #0
 2957 00d0 02D0     		beq	.L188
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2958              		.loc 1 2241 23
 2959 00d2 164B     		ldr	r3, .L191+24
 2960 00d4 0122     		movs	r2, #1
 2961 00d6 1A60     		str	r2, [r3]
 2962              	.L188:
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
 2963              		.loc 1 2247 8
 2964 00d8 7B68     		ldr	r3, [r7, #4]
 2965 00da 013B     		subs	r3, r3, #1
 2966 00dc 7B60     		str	r3, [r7, #4]
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2967              		.loc 1 2248 7
 2968 00de 7B68     		ldr	r3, [r7, #4]
 2969 00e0 002B     		cmp	r3, #0
 2970 00e2 F1D1     		bne	.L189
ARM GAS  /tmp/cc65XYwf.s 			page 96


2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
 2971              		.loc 1 2250 21
 2972 00e4 124B     		ldr	r3, .L191+28
 2973 00e6 0022     		movs	r2, #0
 2974 00e8 1A60     		str	r2, [r3]
 2975              	.L187:
 2976              	.LBE167:
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2977              		.loc 1 2258 23
 2978 00ea 104B     		ldr	r3, .L191+24
 2979 00ec 1B68     		ldr	r3, [r3]
 2980              		.loc 1 2258 7
 2981 00ee 002B     		cmp	r3, #0
 2982 00f0 09D0     		beq	.L182
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2983              		.loc 1 2262 23
 2984 00f2 0123     		movs	r3, #1
 2985 00f4 BB60     		str	r3, [r7, #8]
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2986              		.loc 1 2265 6
 2987 00f6 0F4B     		ldr	r3, .L191+32
 2988 00f8 4FF08052 		mov	r2, #268435456
 2989 00fc 1A60     		str	r2, [r3]
 2990              		.syntax unified
 2991              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2992 00fe BFF34F8F 		dsb
 2993              	@ 0 "" 2
 2994              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2995 0102 BFF36F8F 		isb
 2996              	@ 0 "" 2
 2997              		.thumb
 2998              		.syntax unified
 2999              	.L182:
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc65XYwf.s 			page 97


2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3000              		.loc 1 2278 2
 3001 0106 FFF7FEFF 		bl	vPortExitCritical
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 3002              		.loc 1 2280 9
 3003 010a BB68     		ldr	r3, [r7, #8]
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3004              		.loc 1 2281 1
 3005 010c 1846     		mov	r0, r3
 3006 010e 1037     		adds	r7, r7, #16
 3007              	.LCFI93:
 3008              		.cfi_def_cfa_offset 8
 3009 0110 BD46     		mov	sp, r7
 3010              	.LCFI94:
 3011              		.cfi_def_cfa_register 13
 3012              		@ sp needed
 3013 0112 80BD     		pop	{r7, pc}
 3014              	.L192:
 3015              		.align	2
 3016              	.L191:
 3017 0114 00000000 		.word	uxSchedulerSuspended
 3018 0118 00000000 		.word	uxCurrentNumberOfTasks
 3019 011c 00000000 		.word	xPendingReadyList
 3020 0120 00000000 		.word	uxTopReadyPriority
 3021 0124 00000000 		.word	pxReadyTasksLists
 3022 0128 00000000 		.word	pxCurrentTCB
 3023 012c 00000000 		.word	xYieldPending
 3024 0130 00000000 		.word	uxPendedTicks
 3025 0134 04ED00E0 		.word	-536810236
 3026              		.cfi_endproc
 3027              	.LFE22:
 3029              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3030              		.align	1
 3031              		.global	xTaskGetTickCount
 3032              		.syntax unified
 3033              		.thumb
 3034              		.thumb_func
 3035              		.fpu fpv4-sp-d16
 3037              	xTaskGetTickCount:
 3038              	.LFB23:
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3039              		.loc 1 2285 1
 3040              		.cfi_startproc
 3041              		@ args = 0, pretend = 0, frame = 8
 3042              		@ frame_needed = 1, uses_anonymous_args = 0
 3043              		@ link register save eliminated.
 3044 0000 80B4     		push	{r7}
 3045              	.LCFI95:
 3046              		.cfi_def_cfa_offset 4
 3047              		.cfi_offset 7, -4
 3048 0002 83B0     		sub	sp, sp, #12
 3049              	.LCFI96:
ARM GAS  /tmp/cc65XYwf.s 			page 98


 3050              		.cfi_def_cfa_offset 16
 3051 0004 00AF     		add	r7, sp, #0
 3052              	.LCFI97:
 3053              		.cfi_def_cfa_register 7
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 3054              		.loc 1 2291 10
 3055 0006 054B     		ldr	r3, .L195
 3056 0008 1B68     		ldr	r3, [r3]
 3057 000a 7B60     		str	r3, [r7, #4]
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 3058              		.loc 1 2295 9
 3059 000c 7B68     		ldr	r3, [r7, #4]
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3060              		.loc 1 2296 1
 3061 000e 1846     		mov	r0, r3
 3062 0010 0C37     		adds	r7, r7, #12
 3063              	.LCFI98:
 3064              		.cfi_def_cfa_offset 4
 3065 0012 BD46     		mov	sp, r7
 3066              	.LCFI99:
 3067              		.cfi_def_cfa_register 13
 3068              		@ sp needed
 3069 0014 5DF8047B 		ldr	r7, [sp], #4
 3070              	.LCFI100:
 3071              		.cfi_restore 7
 3072              		.cfi_def_cfa_offset 0
 3073 0018 7047     		bx	lr
 3074              	.L196:
 3075 001a 00BF     		.align	2
 3076              	.L195:
 3077 001c 00000000 		.word	xTickCount
 3078              		.cfi_endproc
 3079              	.LFE23:
 3081              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3082              		.align	1
 3083              		.global	xTaskGetTickCountFromISR
 3084              		.syntax unified
 3085              		.thumb
 3086              		.thumb_func
 3087              		.fpu fpv4-sp-d16
 3089              	xTaskGetTickCountFromISR:
 3090              	.LFB24:
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3091              		.loc 1 2300 1
 3092              		.cfi_startproc
 3093              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cc65XYwf.s 			page 99


 3094              		@ frame_needed = 1, uses_anonymous_args = 0
 3095 0000 80B5     		push	{r7, lr}
 3096              	.LCFI101:
 3097              		.cfi_def_cfa_offset 8
 3098              		.cfi_offset 7, -8
 3099              		.cfi_offset 14, -4
 3100 0002 82B0     		sub	sp, sp, #8
 3101              	.LCFI102:
 3102              		.cfi_def_cfa_offset 16
 3103 0004 00AF     		add	r7, sp, #0
 3104              	.LCFI103:
 3105              		.cfi_def_cfa_register 7
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3106              		.loc 1 2318 2
 3107 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3108              		.loc 1 2320 25
 3109 000a 0023     		movs	r3, #0
 3110 000c 7B60     		str	r3, [r7, #4]
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 3111              		.loc 1 2322 11
 3112 000e 044B     		ldr	r3, .L199
 3113 0010 1B68     		ldr	r3, [r3]
 3114 0012 3B60     		str	r3, [r7]
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3115              		.loc 1 2326 9
 3116 0014 3B68     		ldr	r3, [r7]
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3117              		.loc 1 2327 1
 3118 0016 1846     		mov	r0, r3
 3119 0018 0837     		adds	r7, r7, #8
 3120              	.LCFI104:
 3121              		.cfi_def_cfa_offset 8
 3122 001a BD46     		mov	sp, r7
 3123              	.LCFI105:
ARM GAS  /tmp/cc65XYwf.s 			page 100


 3124              		.cfi_def_cfa_register 13
 3125              		@ sp needed
 3126 001c 80BD     		pop	{r7, pc}
 3127              	.L200:
 3128 001e 00BF     		.align	2
 3129              	.L199:
 3130 0020 00000000 		.word	xTickCount
 3131              		.cfi_endproc
 3132              	.LFE24:
 3134              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3135              		.align	1
 3136              		.global	uxTaskGetNumberOfTasks
 3137              		.syntax unified
 3138              		.thumb
 3139              		.thumb_func
 3140              		.fpu fpv4-sp-d16
 3142              	uxTaskGetNumberOfTasks:
 3143              	.LFB25:
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3144              		.loc 1 2331 1
 3145              		.cfi_startproc
 3146              		@ args = 0, pretend = 0, frame = 0
 3147              		@ frame_needed = 1, uses_anonymous_args = 0
 3148              		@ link register save eliminated.
 3149 0000 80B4     		push	{r7}
 3150              	.LCFI106:
 3151              		.cfi_def_cfa_offset 4
 3152              		.cfi_offset 7, -4
 3153 0002 00AF     		add	r7, sp, #0
 3154              	.LCFI107:
 3155              		.cfi_def_cfa_register 7
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 3156              		.loc 1 2334 9
 3157 0004 034B     		ldr	r3, .L203
 3158 0006 1B68     		ldr	r3, [r3]
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3159              		.loc 1 2335 1
 3160 0008 1846     		mov	r0, r3
 3161 000a BD46     		mov	sp, r7
 3162              	.LCFI108:
 3163              		.cfi_def_cfa_register 13
 3164              		@ sp needed
 3165 000c 5DF8047B 		ldr	r7, [sp], #4
 3166              	.LCFI109:
 3167              		.cfi_restore 7
 3168              		.cfi_def_cfa_offset 0
 3169 0010 7047     		bx	lr
 3170              	.L204:
 3171 0012 00BF     		.align	2
 3172              	.L203:
 3173 0014 00000000 		.word	uxCurrentNumberOfTasks
 3174              		.cfi_endproc
ARM GAS  /tmp/cc65XYwf.s 			page 101


 3175              	.LFE25:
 3177              		.section	.text.pcTaskGetName,"ax",%progbits
 3178              		.align	1
 3179              		.global	pcTaskGetName
 3180              		.syntax unified
 3181              		.thumb
 3182              		.thumb_func
 3183              		.fpu fpv4-sp-d16
 3185              	pcTaskGetName:
 3186              	.LFB26:
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3187              		.loc 1 2339 1
 3188              		.cfi_startproc
 3189              		@ args = 0, pretend = 0, frame = 16
 3190              		@ frame_needed = 1, uses_anonymous_args = 0
 3191              		@ link register save eliminated.
 3192 0000 80B4     		push	{r7}
 3193              	.LCFI110:
 3194              		.cfi_def_cfa_offset 4
 3195              		.cfi_offset 7, -4
 3196 0002 85B0     		sub	sp, sp, #20
 3197              	.LCFI111:
 3198              		.cfi_def_cfa_offset 24
 3199 0004 00AF     		add	r7, sp, #0
 3200              	.LCFI112:
 3201              		.cfi_def_cfa_register 7
 3202 0006 7860     		str	r0, [r7, #4]
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3203              		.loc 1 2344 10
 3204 0008 7B68     		ldr	r3, [r7, #4]
 3205 000a 002B     		cmp	r3, #0
 3206 000c 02D1     		bne	.L206
 3207              		.loc 1 2344 10 is_stmt 0 discriminator 1
 3208 000e 0D4B     		ldr	r3, .L211
 3209 0010 1B68     		ldr	r3, [r3]
 3210 0012 00E0     		b	.L207
 3211              	.L206:
 3212              		.loc 1 2344 10 discriminator 2
 3213 0014 7B68     		ldr	r3, [r7, #4]
 3214              	.L207:
 3215              		.loc 1 2344 8 is_stmt 1 discriminator 4
 3216 0016 FB60     		str	r3, [r7, #12]
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3217              		.loc 1 2345 2 discriminator 4
 3218 0018 FB68     		ldr	r3, [r7, #12]
 3219 001a 002B     		cmp	r3, #0
 3220 001c 09D1     		bne	.L208
 3221              	.LBB168:
 3222              	.LBB169:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/cc65XYwf.s 			page 102


 3223              		.loc 2 195 2 discriminator 1
 3224              		.syntax unified
 3225              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3226 001e 4FF05003 			mov r3, #80												
 3227 0022 83F31188 		msr basepri, r3											
 3228 0026 BFF36F8F 		isb														
 3229 002a BFF34F8F 		dsb														
 3230              	
 3231              	@ 0 "" 2
 3232              		.thumb
 3233              		.syntax unified
 3234 002e BB60     		str	r3, [r7, #8]
 3235              	.L209:
 3236              	.LBE169:
 3237              	.LBE168:
 3238              		.loc 1 2345 2 discriminator 1
 3239 0030 FEE7     		b	.L209
 3240              	.L208:
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3241              		.loc 1 2346 9
 3242 0032 FB68     		ldr	r3, [r7, #12]
 3243 0034 3433     		adds	r3, r3, #52
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3244              		.loc 1 2347 1
 3245 0036 1846     		mov	r0, r3
 3246 0038 1437     		adds	r7, r7, #20
 3247              	.LCFI113:
 3248              		.cfi_def_cfa_offset 4
 3249 003a BD46     		mov	sp, r7
 3250              	.LCFI114:
 3251              		.cfi_def_cfa_register 13
 3252              		@ sp needed
 3253 003c 5DF8047B 		ldr	r7, [sp], #4
 3254              	.LCFI115:
 3255              		.cfi_restore 7
 3256              		.cfi_def_cfa_offset 0
 3257 0040 7047     		bx	lr
 3258              	.L212:
 3259 0042 00BF     		.align	2
 3260              	.L211:
 3261 0044 00000000 		.word	pxCurrentTCB
 3262              		.cfi_endproc
 3263              	.LFE26:
 3265              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3266              		.align	1
 3267              		.global	uxTaskGetSystemState
 3268              		.syntax unified
 3269              		.thumb
 3270              		.thumb_func
 3271              		.fpu fpv4-sp-d16
 3273              	uxTaskGetSystemState:
 3274              	.LFB27:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
ARM GAS  /tmp/cc65XYwf.s 			page 103


2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cc65XYwf.s 			page 104


2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc65XYwf.s 			page 105


2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3275              		.loc 1 2486 2
 3276              		.cfi_startproc
 3277              		@ args = 0, pretend = 0, frame = 24
 3278              		@ frame_needed = 1, uses_anonymous_args = 0
 3279 0000 80B5     		push	{r7, lr}
 3280              	.LCFI116:
 3281              		.cfi_def_cfa_offset 8
 3282              		.cfi_offset 7, -8
 3283              		.cfi_offset 14, -4
 3284 0002 86B0     		sub	sp, sp, #24
 3285              	.LCFI117:
 3286              		.cfi_def_cfa_offset 32
 3287 0004 00AF     		add	r7, sp, #0
 3288              	.LCFI118:
 3289              		.cfi_def_cfa_register 7
 3290 0006 F860     		str	r0, [r7, #12]
 3291 0008 B960     		str	r1, [r7, #8]
 3292 000a 7A60     		str	r2, [r7, #4]
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3293              		.loc 1 2487 14
 3294 000c 0023     		movs	r3, #0
 3295 000e 7B61     		str	r3, [r7, #20]
 3296              		.loc 1 2487 26
 3297 0010 3823     		movs	r3, #56
 3298 0012 3B61     		str	r3, [r7, #16]
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3299              		.loc 1 2489 3
 3300 0014 FFF7FEFF 		bl	vTaskSuspendAll
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 3301              		.loc 1 2492 20
 3302 0018 3A4B     		ldr	r3, .L218
 3303 001a 1B68     		ldr	r3, [r3]
 3304              		.loc 1 2492 6
 3305 001c BA68     		ldr	r2, [r7, #8]
ARM GAS  /tmp/cc65XYwf.s 			page 106


 3306 001e 9A42     		cmp	r2, r3
 3307 0020 68D3     		bcc	.L214
 3308              	.L215:
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
 3309              		.loc 1 2498 13 discriminator 1
 3310 0022 3B69     		ldr	r3, [r7, #16]
 3311 0024 013B     		subs	r3, r3, #1
 3312 0026 3B61     		str	r3, [r7, #16]
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3313              		.loc 1 2499 66 discriminator 1
 3314 0028 7A69     		ldr	r2, [r7, #20]
 3315 002a 1346     		mov	r3, r2
 3316 002c DB00     		lsls	r3, r3, #3
 3317 002e 1344     		add	r3, r3, r2
 3318 0030 9B00     		lsls	r3, r3, #2
 3319 0032 1A46     		mov	r2, r3
 3320              		.loc 1 2499 16 discriminator 1
 3321 0034 FB68     		ldr	r3, [r7, #12]
 3322 0036 9818     		adds	r0, r3, r2
 3323 0038 3A69     		ldr	r2, [r7, #16]
 3324 003a 1346     		mov	r3, r2
 3325 003c 9B00     		lsls	r3, r3, #2
 3326 003e 1344     		add	r3, r3, r2
 3327 0040 9B00     		lsls	r3, r3, #2
 3328 0042 314A     		ldr	r2, .L218+4
 3329 0044 1344     		add	r3, r3, r2
 3330 0046 0122     		movs	r2, #1
 3331 0048 1946     		mov	r1, r3
 3332 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3333 004e 0246     		mov	r2, r0
 3334              		.loc 1 2499 13 discriminator 1
 3335 0050 7B69     		ldr	r3, [r7, #20]
 3336 0052 1344     		add	r3, r3, r2
 3337 0054 7B61     		str	r3, [r7, #20]
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3338              		.loc 1 2501 5 discriminator 1
 3339 0056 3B69     		ldr	r3, [r7, #16]
 3340 0058 002B     		cmp	r3, #0
 3341 005a E2D1     		bne	.L215
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3342              		.loc 1 2505 65
 3343 005c 7A69     		ldr	r2, [r7, #20]
 3344 005e 1346     		mov	r3, r2
 3345 0060 DB00     		lsls	r3, r3, #3
 3346 0062 1344     		add	r3, r3, r2
 3347 0064 9B00     		lsls	r3, r3, #2
 3348 0066 1A46     		mov	r2, r3
 3349              		.loc 1 2505 15
ARM GAS  /tmp/cc65XYwf.s 			page 107


 3350 0068 FB68     		ldr	r3, [r7, #12]
 3351 006a 9818     		adds	r0, r3, r2
 3352 006c 274B     		ldr	r3, .L218+8
 3353 006e 1B68     		ldr	r3, [r3]
 3354 0070 0222     		movs	r2, #2
 3355 0072 1946     		mov	r1, r3
 3356 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3357 0078 0246     		mov	r2, r0
 3358              		.loc 1 2505 12
 3359 007a 7B69     		ldr	r3, [r7, #20]
 3360 007c 1344     		add	r3, r3, r2
 3361 007e 7B61     		str	r3, [r7, #20]
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3362              		.loc 1 2506 65
 3363 0080 7A69     		ldr	r2, [r7, #20]
 3364 0082 1346     		mov	r3, r2
 3365 0084 DB00     		lsls	r3, r3, #3
 3366 0086 1344     		add	r3, r3, r2
 3367 0088 9B00     		lsls	r3, r3, #2
 3368 008a 1A46     		mov	r2, r3
 3369              		.loc 1 2506 15
 3370 008c FB68     		ldr	r3, [r7, #12]
 3371 008e 9818     		adds	r0, r3, r2
 3372 0090 1F4B     		ldr	r3, .L218+12
 3373 0092 1B68     		ldr	r3, [r3]
 3374 0094 0222     		movs	r2, #2
 3375 0096 1946     		mov	r1, r3
 3376 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3377 009c 0246     		mov	r2, r0
 3378              		.loc 1 2506 12
 3379 009e 7B69     		ldr	r3, [r7, #20]
 3380 00a0 1344     		add	r3, r3, r2
 3381 00a2 7B61     		str	r3, [r7, #20]
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3382              		.loc 1 2512 66
 3383 00a4 7A69     		ldr	r2, [r7, #20]
 3384 00a6 1346     		mov	r3, r2
 3385 00a8 DB00     		lsls	r3, r3, #3
 3386 00aa 1344     		add	r3, r3, r2
 3387 00ac 9B00     		lsls	r3, r3, #2
 3388 00ae 1A46     		mov	r2, r3
 3389              		.loc 1 2512 16
 3390 00b0 FB68     		ldr	r3, [r7, #12]
 3391 00b2 1344     		add	r3, r3, r2
 3392 00b4 0422     		movs	r2, #4
 3393 00b6 1749     		ldr	r1, .L218+16
 3394 00b8 1846     		mov	r0, r3
 3395 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3396 00be 0246     		mov	r2, r0
 3397              		.loc 1 2512 13
 3398 00c0 7B69     		ldr	r3, [r7, #20]
 3399 00c2 1344     		add	r3, r3, r2
ARM GAS  /tmp/cc65XYwf.s 			page 108


 3400 00c4 7B61     		str	r3, [r7, #20]
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3401              		.loc 1 2520 66
 3402 00c6 7A69     		ldr	r2, [r7, #20]
 3403 00c8 1346     		mov	r3, r2
 3404 00ca DB00     		lsls	r3, r3, #3
 3405 00cc 1344     		add	r3, r3, r2
 3406 00ce 9B00     		lsls	r3, r3, #2
 3407 00d0 1A46     		mov	r2, r3
 3408              		.loc 1 2520 16
 3409 00d2 FB68     		ldr	r3, [r7, #12]
 3410 00d4 1344     		add	r3, r3, r2
 3411 00d6 0322     		movs	r2, #3
 3412 00d8 0F49     		ldr	r1, .L218+20
 3413 00da 1846     		mov	r0, r3
 3414 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3415 00e0 0246     		mov	r2, r0
 3416              		.loc 1 2520 13
 3417 00e2 7B69     		ldr	r3, [r7, #20]
 3418 00e4 1344     		add	r3, r3, r2
 3419 00e6 7B61     		str	r3, [r7, #20]
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 3420              		.loc 1 2537 8
 3421 00e8 7B68     		ldr	r3, [r7, #4]
 3422 00ea 002B     		cmp	r3, #0
 3423 00ec 02D0     		beq	.L214
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
 3424              		.loc 1 2539 24
 3425 00ee 7B68     		ldr	r3, [r7, #4]
 3426 00f0 0022     		movs	r2, #0
 3427 00f2 1A60     		str	r2, [r3]
 3428              	.L214:
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cc65XYwf.s 			page 109


2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3429              		.loc 1 2549 12
 3430 00f4 FFF7FEFF 		bl	xTaskResumeAll
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 3431              		.loc 1 2551 10
 3432 00f8 7B69     		ldr	r3, [r7, #20]
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3433              		.loc 1 2552 2
 3434 00fa 1846     		mov	r0, r3
 3435 00fc 1837     		adds	r7, r7, #24
 3436              	.LCFI119:
 3437              		.cfi_def_cfa_offset 8
 3438 00fe BD46     		mov	sp, r7
 3439              	.LCFI120:
 3440              		.cfi_def_cfa_register 13
 3441              		@ sp needed
 3442 0100 80BD     		pop	{r7, pc}
 3443              	.L219:
 3444 0102 00BF     		.align	2
 3445              	.L218:
 3446 0104 00000000 		.word	uxCurrentNumberOfTasks
 3447 0108 00000000 		.word	pxReadyTasksLists
 3448 010c 00000000 		.word	pxDelayedTaskList
 3449 0110 00000000 		.word	pxOverflowDelayedTaskList
 3450 0114 00000000 		.word	xTasksWaitingTermination
 3451 0118 00000000 		.word	xSuspendedTaskList
 3452              		.cfi_endproc
 3453              	.LFE27:
 3455              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3456              		.align	1
 3457              		.global	xTaskIncrementTick
 3458              		.syntax unified
 3459              		.thumb
 3460              		.thumb_func
 3461              		.fpu fpv4-sp-d16
 3463              	xTaskIncrementTick:
 3464              	.LFB28:
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
ARM GAS  /tmp/cc65XYwf.s 			page 110


2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
ARM GAS  /tmp/cc65XYwf.s 			page 111


2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3465              		.loc 1 2666 1
 3466              		.cfi_startproc
 3467              		@ args = 0, pretend = 0, frame = 24
 3468              		@ frame_needed = 1, uses_anonymous_args = 0
 3469 0000 80B5     		push	{r7, lr}
 3470              	.LCFI121:
 3471              		.cfi_def_cfa_offset 8
 3472              		.cfi_offset 7, -8
 3473              		.cfi_offset 14, -4
 3474 0002 86B0     		sub	sp, sp, #24
 3475              	.LCFI122:
ARM GAS  /tmp/cc65XYwf.s 			page 112


 3476              		.cfi_def_cfa_offset 32
 3477 0004 00AF     		add	r7, sp, #0
 3478              	.LCFI123:
 3479              		.cfi_def_cfa_register 7
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3480              		.loc 1 2669 12
 3481 0006 0023     		movs	r3, #0
 3482 0008 7B61     		str	r3, [r7, #20]
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3483              		.loc 1 2675 27
 3484 000a 4E4B     		ldr	r3, .L236
 3485 000c 1B68     		ldr	r3, [r3]
 3486              		.loc 1 2675 4
 3487 000e 002B     		cmp	r3, #0
 3488 0010 40F08880 		bne	.L221
 3489              	.LBB170:
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3490              		.loc 1 2679 49
 3491 0014 4C4B     		ldr	r3, .L236+4
 3492 0016 1B68     		ldr	r3, [r3]
 3493              		.loc 1 2679 20
 3494 0018 0133     		adds	r3, r3, #1
 3495 001a 3B61     		str	r3, [r7, #16]
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3496              		.loc 1 2683 14
 3497 001c 4A4A     		ldr	r2, .L236+4
 3498 001e 3B69     		ldr	r3, [r7, #16]
 3499 0020 1360     		str	r3, [r2]
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3500              		.loc 1 2685 5
 3501 0022 3B69     		ldr	r3, [r7, #16]
 3502 0024 002B     		cmp	r3, #0
 3503 0026 1FD1     		bne	.L222
 3504              	.LBB171:
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3505              		.loc 1 2687 4
 3506 0028 484B     		ldr	r3, .L236+8
 3507 002a 1B68     		ldr	r3, [r3]
 3508 002c 1B68     		ldr	r3, [r3]
 3509 002e 002B     		cmp	r3, #0
 3510 0030 09D0     		beq	.L223
 3511              	.LBB172:
ARM GAS  /tmp/cc65XYwf.s 			page 113


 3512              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3513              		.loc 2 195 2 discriminator 1
 3514              		.syntax unified
 3515              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3516 0032 4FF05003 			mov r3, #80												
 3517 0036 83F31188 		msr basepri, r3											
 3518 003a BFF36F8F 		isb														
 3519 003e BFF34F8F 		dsb														
 3520              	
 3521              	@ 0 "" 2
 3522              		.thumb
 3523              		.syntax unified
 3524 0042 3B60     		str	r3, [r7]
 3525              	.L224:
 3526              	.LBE173:
 3527              	.LBE172:
 3528              		.loc 1 2687 4 discriminator 1
 3529 0044 FEE7     		b	.L224
 3530              	.L223:
 3531              		.loc 1 2687 4 is_stmt 0 discriminator 2
 3532 0046 414B     		ldr	r3, .L236+8
 3533 0048 1B68     		ldr	r3, [r3]
 3534 004a FB60     		str	r3, [r7, #12]
 3535 004c 404B     		ldr	r3, .L236+12
 3536 004e 1B68     		ldr	r3, [r3]
 3537 0050 3E4A     		ldr	r2, .L236+8
 3538 0052 1360     		str	r3, [r2]
 3539 0054 3E4A     		ldr	r2, .L236+12
 3540 0056 FB68     		ldr	r3, [r7, #12]
 3541 0058 1360     		str	r3, [r2]
 3542 005a 3E4B     		ldr	r3, .L236+16
 3543 005c 1B68     		ldr	r3, [r3]
 3544 005e 0133     		adds	r3, r3, #1
 3545 0060 3C4A     		ldr	r2, .L236+16
 3546 0062 1360     		str	r3, [r2]
 3547 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3548              	.L222:
 3549              	.LBE171:
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3550              		.loc 1 2698 23 is_stmt 1
 3551 0068 3B4B     		ldr	r3, .L236+20
 3552 006a 1B68     		ldr	r3, [r3]
 3553              		.loc 1 2698 5
 3554 006c 3A69     		ldr	r2, [r7, #16]
 3555 006e 9A42     		cmp	r2, r3
 3556 0070 49D3     		bcc	.L225
ARM GAS  /tmp/cc65XYwf.s 			page 114


 3557              	.L231:
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3558              		.loc 1 2702 9
 3559 0072 364B     		ldr	r3, .L236+8
 3560 0074 1B68     		ldr	r3, [r3]
 3561 0076 1B68     		ldr	r3, [r3]
 3562              		.loc 1 2702 7
 3563 0078 002B     		cmp	r3, #0
 3564 007a 04D1     		bne	.L226
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3565              		.loc 1 2709 27
 3566 007c 364B     		ldr	r3, .L236+20
 3567 007e 4FF0FF32 		mov	r2, #-1
 3568 0082 1A60     		str	r2, [r3]
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3569              		.loc 1 2710 6
 3570 0084 3FE0     		b	.L225
 3571              	.L226:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3572              		.loc 1 2718 14
 3573 0086 314B     		ldr	r3, .L236+8
 3574 0088 1B68     		ldr	r3, [r3]
 3575 008a DB68     		ldr	r3, [r3, #12]
 3576              		.loc 1 2718 12
 3577 008c DB68     		ldr	r3, [r3, #12]
 3578 008e BB60     		str	r3, [r7, #8]
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3579              		.loc 1 2719 17
 3580 0090 BB68     		ldr	r3, [r7, #8]
 3581 0092 5B68     		ldr	r3, [r3, #4]
 3582 0094 7B60     		str	r3, [r7, #4]
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3583              		.loc 1 2721 8
 3584 0096 3A69     		ldr	r2, [r7, #16]
 3585 0098 7B68     		ldr	r3, [r7, #4]
 3586 009a 9A42     		cmp	r2, r3
 3587 009c 03D2     		bcs	.L227
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
ARM GAS  /tmp/cc65XYwf.s 			page 115


2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3588              		.loc 1 2728 28
 3589 009e 2E4A     		ldr	r2, .L236+20
 3590 00a0 7B68     		ldr	r3, [r7, #4]
 3591 00a2 1360     		str	r3, [r2]
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3592              		.loc 1 2729 7
 3593 00a4 2FE0     		b	.L225
 3594              	.L227:
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3595              		.loc 1 2737 15
 3596 00a6 BB68     		ldr	r3, [r7, #8]
 3597 00a8 0433     		adds	r3, r3, #4
 3598 00aa 1846     		mov	r0, r3
 3599 00ac FFF7FEFF 		bl	uxListRemove
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3600              		.loc 1 2741 10
 3601 00b0 BB68     		ldr	r3, [r7, #8]
 3602 00b2 9B6A     		ldr	r3, [r3, #40]
 3603              		.loc 1 2741 8
 3604 00b4 002B     		cmp	r3, #0
 3605 00b6 04D0     		beq	.L228
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3606              		.loc 1 2743 16
 3607 00b8 BB68     		ldr	r3, [r7, #8]
 3608 00ba 1833     		adds	r3, r3, #24
 3609 00bc 1846     		mov	r0, r3
 3610 00be FFF7FEFF 		bl	uxListRemove
 3611              	.L228:
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3612              		.loc 1 2752 6
 3613 00c2 BB68     		ldr	r3, [r7, #8]
 3614 00c4 DA6A     		ldr	r2, [r3, #44]
 3615 00c6 254B     		ldr	r3, .L236+24
 3616 00c8 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc65XYwf.s 			page 116


 3617 00ca 9A42     		cmp	r2, r3
 3618 00cc 03D9     		bls	.L229
 3619              		.loc 1 2752 6 is_stmt 0 discriminator 1
 3620 00ce BB68     		ldr	r3, [r7, #8]
 3621 00d0 DB6A     		ldr	r3, [r3, #44]
 3622 00d2 224A     		ldr	r2, .L236+24
 3623 00d4 1360     		str	r3, [r2]
 3624              	.L229:
 3625              		.loc 1 2752 6 discriminator 3
 3626 00d6 BB68     		ldr	r3, [r7, #8]
 3627 00d8 DA6A     		ldr	r2, [r3, #44]
 3628 00da 1346     		mov	r3, r2
 3629 00dc 9B00     		lsls	r3, r3, #2
 3630 00de 1344     		add	r3, r3, r2
 3631 00e0 9B00     		lsls	r3, r3, #2
 3632 00e2 1F4A     		ldr	r2, .L236+28
 3633 00e4 1A44     		add	r2, r2, r3
 3634 00e6 BB68     		ldr	r3, [r7, #8]
 3635 00e8 0433     		adds	r3, r3, #4
 3636 00ea 1946     		mov	r1, r3
 3637 00ec 1046     		mov	r0, r2
 3638 00ee FFF7FEFF 		bl	vListInsertEnd
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3639              		.loc 1 2762 16 is_stmt 1 discriminator 3
 3640 00f2 BB68     		ldr	r3, [r7, #8]
 3641 00f4 DA6A     		ldr	r2, [r3, #44]
 3642              		.loc 1 2762 44 discriminator 3
 3643 00f6 1B4B     		ldr	r3, .L236+32
 3644 00f8 1B68     		ldr	r3, [r3]
 3645 00fa DB6A     		ldr	r3, [r3, #44]
 3646              		.loc 1 2762 9 discriminator 3
 3647 00fc 9A42     		cmp	r2, r3
 3648 00fe B8D3     		bcc	.L231
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3649              		.loc 1 2764 24
 3650 0100 0123     		movs	r3, #1
 3651 0102 7B61     		str	r3, [r7, #20]
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3652              		.loc 1 2702 7
 3653 0104 B5E7     		b	.L231
 3654              	.L225:
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cc65XYwf.s 			page 117


2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3655              		.loc 1 2781 8
 3656 0106 174B     		ldr	r3, .L236+32
 3657 0108 1B68     		ldr	r3, [r3]
 3658 010a DA6A     		ldr	r2, [r3, #44]
 3659 010c 1449     		ldr	r1, .L236+28
 3660 010e 1346     		mov	r3, r2
 3661 0110 9B00     		lsls	r3, r3, #2
 3662 0112 1344     		add	r3, r3, r2
 3663 0114 9B00     		lsls	r3, r3, #2
 3664 0116 0B44     		add	r3, r3, r1
 3665 0118 1B68     		ldr	r3, [r3]
 3666              		.loc 1 2781 6
 3667 011a 012B     		cmp	r3, #1
 3668 011c 07D9     		bls	.L233
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3669              		.loc 1 2783 21
 3670 011e 0123     		movs	r3, #1
 3671 0120 7B61     		str	r3, [r7, #20]
 3672 0122 04E0     		b	.L233
 3673              	.L221:
 3674              	.LBE170:
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
ARM GAS  /tmp/cc65XYwf.s 			page 118


2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
 3675              		.loc 1 2809 3
 3676 0124 104B     		ldr	r3, .L236+36
 3677 0126 1B68     		ldr	r3, [r3]
 3678 0128 0133     		adds	r3, r3, #1
 3679 012a 0F4A     		ldr	r2, .L236+36
 3680 012c 1360     		str	r3, [r2]
 3681              	.L233:
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 3682              		.loc 1 2822 21
 3683 012e 0F4B     		ldr	r3, .L236+40
 3684 0130 1B68     		ldr	r3, [r3]
 3685              		.loc 1 2822 5
 3686 0132 002B     		cmp	r3, #0
 3687 0134 01D0     		beq	.L234
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 3688              		.loc 1 2824 20
 3689 0136 0123     		movs	r3, #1
 3690 0138 7B61     		str	r3, [r7, #20]
 3691              	.L234:
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 3692              		.loc 1 2833 9
 3693 013a 7B69     		ldr	r3, [r7, #20]
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3694              		.loc 1 2834 1
 3695 013c 1846     		mov	r0, r3
 3696 013e 1837     		adds	r7, r7, #24
 3697              	.LCFI124:
 3698              		.cfi_def_cfa_offset 8
 3699 0140 BD46     		mov	sp, r7
 3700              	.LCFI125:
 3701              		.cfi_def_cfa_register 13
 3702              		@ sp needed
 3703 0142 80BD     		pop	{r7, pc}
 3704              	.L237:
ARM GAS  /tmp/cc65XYwf.s 			page 119


 3705              		.align	2
 3706              	.L236:
 3707 0144 00000000 		.word	uxSchedulerSuspended
 3708 0148 00000000 		.word	xTickCount
 3709 014c 00000000 		.word	pxDelayedTaskList
 3710 0150 00000000 		.word	pxOverflowDelayedTaskList
 3711 0154 00000000 		.word	xNumOfOverflows
 3712 0158 00000000 		.word	xNextTaskUnblockTime
 3713 015c 00000000 		.word	uxTopReadyPriority
 3714 0160 00000000 		.word	pxReadyTasksLists
 3715 0164 00000000 		.word	pxCurrentTCB
 3716 0168 00000000 		.word	uxPendedTicks
 3717 016c 00000000 		.word	xYieldPending
 3718              		.cfi_endproc
 3719              	.LFE28:
 3721              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3722              		.align	1
 3723              		.global	vTaskSwitchContext
 3724              		.syntax unified
 3725              		.thumb
 3726              		.thumb_func
 3727              		.fpu fpv4-sp-d16
 3729              	vTaskSwitchContext:
 3730              	.LFB29:
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 120


2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc65XYwf.s 			page 121


2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3731              		.loc 1 2948 1
 3732              		.cfi_startproc
 3733              		@ args = 0, pretend = 0, frame = 16
 3734              		@ frame_needed = 1, uses_anonymous_args = 0
 3735              		@ link register save eliminated.
 3736 0000 80B4     		push	{r7}
 3737              	.LCFI126:
 3738              		.cfi_def_cfa_offset 4
 3739              		.cfi_offset 7, -4
 3740 0002 85B0     		sub	sp, sp, #20
 3741              	.LCFI127:
 3742              		.cfi_def_cfa_offset 24
 3743 0004 00AF     		add	r7, sp, #0
 3744              	.LCFI128:
 3745              		.cfi_def_cfa_register 7
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3746              		.loc 1 2949 27
 3747 0006 274B     		ldr	r3, .L247
 3748 0008 1B68     		ldr	r3, [r3]
 3749              		.loc 1 2949 4
 3750 000a 002B     		cmp	r3, #0
 3751 000c 03D0     		beq	.L239
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3752              		.loc 1 2953 17
 3753 000e 264B     		ldr	r3, .L247+4
 3754 0010 0122     		movs	r2, #1
 3755 0012 1A60     		str	r2, [r3]
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/cc65XYwf.s 			page 122


2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
ARM GAS  /tmp/cc65XYwf.s 			page 123


3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3756              		.loc 1 3017 1
 3757 0014 40E0     		b	.L246
 3758              	.L239:
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3759              		.loc 1 2957 17
 3760 0016 244B     		ldr	r3, .L247+4
 3761 0018 0022     		movs	r2, #0
 3762 001a 1A60     		str	r2, [r3]
 3763              	.LBB174:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3764              		.loc 1 2999 3
 3765 001c 234B     		ldr	r3, .L247+8
 3766 001e 1B68     		ldr	r3, [r3]
 3767 0020 FB60     		str	r3, [r7, #12]
 3768 0022 0FE0     		b	.L241
 3769              	.L244:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3770              		.loc 1 2999 3 is_stmt 0 discriminator 5
 3771 0024 FB68     		ldr	r3, [r7, #12]
 3772 0026 002B     		cmp	r3, #0
 3773 0028 09D1     		bne	.L242
 3774              	.LBB175:
 3775              	.LBB176:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3776              		.loc 2 195 2 is_stmt 1 discriminator 2
 3777              		.syntax unified
 3778              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3779 002a 4FF05003 			mov r3, #80												
 3780 002e 83F31188 		msr basepri, r3											
 3781 0032 BFF36F8F 		isb														
 3782 0036 BFF34F8F 		dsb														
 3783              	
 3784              	@ 0 "" 2
 3785              		.thumb
 3786              		.syntax unified
 3787 003a 7B60     		str	r3, [r7, #4]
 3788              	.L243:
 3789              	.LBE176:
 3790              	.LBE175:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3791              		.loc 1 2999 3 discriminator 1
 3792 003c FEE7     		b	.L243
 3793              	.L242:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3794              		.loc 1 2999 3 is_stmt 0 discriminator 3
 3795 003e FB68     		ldr	r3, [r7, #12]
 3796 0040 013B     		subs	r3, r3, #1
 3797 0042 FB60     		str	r3, [r7, #12]
 3798              	.L241:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3799              		.loc 1 2999 3 discriminator 4
 3800 0044 1A49     		ldr	r1, .L247+12
 3801 0046 FA68     		ldr	r2, [r7, #12]
ARM GAS  /tmp/cc65XYwf.s 			page 124


 3802 0048 1346     		mov	r3, r2
 3803 004a 9B00     		lsls	r3, r3, #2
 3804 004c 1344     		add	r3, r3, r2
 3805 004e 9B00     		lsls	r3, r3, #2
 3806 0050 0B44     		add	r3, r3, r1
 3807 0052 1B68     		ldr	r3, [r3]
 3808 0054 002B     		cmp	r3, #0
 3809 0056 E5D0     		beq	.L244
 3810              	.LBB177:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3811              		.loc 1 2999 3 discriminator 6
 3812 0058 FA68     		ldr	r2, [r7, #12]
 3813 005a 1346     		mov	r3, r2
 3814 005c 9B00     		lsls	r3, r3, #2
 3815 005e 1344     		add	r3, r3, r2
 3816 0060 9B00     		lsls	r3, r3, #2
 3817 0062 134A     		ldr	r2, .L247+12
 3818 0064 1344     		add	r3, r3, r2
 3819 0066 BB60     		str	r3, [r7, #8]
 3820 0068 BB68     		ldr	r3, [r7, #8]
 3821 006a 5B68     		ldr	r3, [r3, #4]
 3822 006c 5A68     		ldr	r2, [r3, #4]
 3823 006e BB68     		ldr	r3, [r7, #8]
 3824 0070 5A60     		str	r2, [r3, #4]
 3825 0072 BB68     		ldr	r3, [r7, #8]
 3826 0074 5A68     		ldr	r2, [r3, #4]
 3827 0076 BB68     		ldr	r3, [r7, #8]
 3828 0078 0833     		adds	r3, r3, #8
 3829 007a 9A42     		cmp	r2, r3
 3830 007c 04D1     		bne	.L245
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3831              		.loc 1 2999 3 discriminator 7
 3832 007e BB68     		ldr	r3, [r7, #8]
 3833 0080 5B68     		ldr	r3, [r3, #4]
 3834 0082 5A68     		ldr	r2, [r3, #4]
 3835 0084 BB68     		ldr	r3, [r7, #8]
 3836 0086 5A60     		str	r2, [r3, #4]
 3837              	.L245:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3838              		.loc 1 2999 3 discriminator 9
 3839 0088 BB68     		ldr	r3, [r7, #8]
 3840 008a 5B68     		ldr	r3, [r3, #4]
 3841 008c DB68     		ldr	r3, [r3, #12]
 3842 008e 094A     		ldr	r2, .L247+16
 3843 0090 1360     		str	r3, [r2]
 3844              	.LBE177:
 3845 0092 064A     		ldr	r2, .L247+8
 3846 0094 FB68     		ldr	r3, [r7, #12]
 3847 0096 1360     		str	r3, [r2]
 3848              	.L246:
 3849              	.LBE174:
 3850              		.loc 1 3017 1 is_stmt 1
 3851 0098 00BF     		nop
 3852 009a 1437     		adds	r7, r7, #20
 3853              	.LCFI129:
 3854              		.cfi_def_cfa_offset 4
 3855 009c BD46     		mov	sp, r7
ARM GAS  /tmp/cc65XYwf.s 			page 125


 3856              	.LCFI130:
 3857              		.cfi_def_cfa_register 13
 3858              		@ sp needed
 3859 009e 5DF8047B 		ldr	r7, [sp], #4
 3860              	.LCFI131:
 3861              		.cfi_restore 7
 3862              		.cfi_def_cfa_offset 0
 3863 00a2 7047     		bx	lr
 3864              	.L248:
 3865              		.align	2
 3866              	.L247:
 3867 00a4 00000000 		.word	uxSchedulerSuspended
 3868 00a8 00000000 		.word	xYieldPending
 3869 00ac 00000000 		.word	uxTopReadyPriority
 3870 00b0 00000000 		.word	pxReadyTasksLists
 3871 00b4 00000000 		.word	pxCurrentTCB
 3872              		.cfi_endproc
 3873              	.LFE29:
 3875              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3876              		.align	1
 3877              		.global	vTaskPlaceOnEventList
 3878              		.syntax unified
 3879              		.thumb
 3880              		.thumb_func
 3881              		.fpu fpv4-sp-d16
 3883              	vTaskPlaceOnEventList:
 3884              	.LFB30:
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3885              		.loc 1 3021 1
 3886              		.cfi_startproc
 3887              		@ args = 0, pretend = 0, frame = 16
 3888              		@ frame_needed = 1, uses_anonymous_args = 0
 3889 0000 80B5     		push	{r7, lr}
 3890              	.LCFI132:
 3891              		.cfi_def_cfa_offset 8
 3892              		.cfi_offset 7, -8
 3893              		.cfi_offset 14, -4
 3894 0002 84B0     		sub	sp, sp, #16
 3895              	.LCFI133:
 3896              		.cfi_def_cfa_offset 24
 3897 0004 00AF     		add	r7, sp, #0
 3898              	.LCFI134:
 3899              		.cfi_def_cfa_register 7
 3900 0006 7860     		str	r0, [r7, #4]
 3901 0008 3960     		str	r1, [r7]
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3902              		.loc 1 3022 2
 3903 000a 7B68     		ldr	r3, [r7, #4]
 3904 000c 002B     		cmp	r3, #0
 3905 000e 09D1     		bne	.L250
 3906              	.LBB178:
 3907              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3908              		.loc 2 195 2 discriminator 1
ARM GAS  /tmp/cc65XYwf.s 			page 126


 3909              		.syntax unified
 3910              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3911 0010 4FF05003 			mov r3, #80												
 3912 0014 83F31188 		msr basepri, r3											
 3913 0018 BFF36F8F 		isb														
 3914 001c BFF34F8F 		dsb														
 3915              	
 3916              	@ 0 "" 2
 3917              		.thumb
 3918              		.syntax unified
 3919 0020 FB60     		str	r3, [r7, #12]
 3920              	.L251:
 3921              	.LBE179:
 3922              	.LBE178:
 3923              		.loc 1 3022 2 discriminator 1
 3924 0022 FEE7     		b	.L251
 3925              	.L250:
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3926              		.loc 1 3031 43
 3927 0024 074B     		ldr	r3, .L252
 3928 0026 1B68     		ldr	r3, [r3]
 3929              		.loc 1 3031 2
 3930 0028 1833     		adds	r3, r3, #24
 3931 002a 1946     		mov	r1, r3
 3932 002c 7868     		ldr	r0, [r7, #4]
 3933 002e FFF7FEFF 		bl	vListInsert
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3934              		.loc 1 3033 2
 3935 0032 0121     		movs	r1, #1
 3936 0034 3868     		ldr	r0, [r7]
 3937 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3938              		.loc 1 3034 1
 3939 003a 00BF     		nop
 3940 003c 1037     		adds	r7, r7, #16
 3941              	.LCFI135:
 3942              		.cfi_def_cfa_offset 8
 3943 003e BD46     		mov	sp, r7
 3944              	.LCFI136:
 3945              		.cfi_def_cfa_register 13
 3946              		@ sp needed
 3947 0040 80BD     		pop	{r7, pc}
 3948              	.L253:
 3949 0042 00BF     		.align	2
 3950              	.L252:
 3951 0044 00000000 		.word	pxCurrentTCB
 3952              		.cfi_endproc
 3953              	.LFE30:
ARM GAS  /tmp/cc65XYwf.s 			page 127


 3955              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3956              		.align	1
 3957              		.global	vTaskPlaceOnUnorderedEventList
 3958              		.syntax unified
 3959              		.thumb
 3960              		.thumb_func
 3961              		.fpu fpv4-sp-d16
 3963              	vTaskPlaceOnUnorderedEventList:
 3964              	.LFB31:
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3965              		.loc 1 3038 1
 3966              		.cfi_startproc
 3967              		@ args = 0, pretend = 0, frame = 24
 3968              		@ frame_needed = 1, uses_anonymous_args = 0
 3969 0000 80B5     		push	{r7, lr}
 3970              	.LCFI137:
 3971              		.cfi_def_cfa_offset 8
 3972              		.cfi_offset 7, -8
 3973              		.cfi_offset 14, -4
 3974 0002 86B0     		sub	sp, sp, #24
 3975              	.LCFI138:
 3976              		.cfi_def_cfa_offset 32
 3977 0004 00AF     		add	r7, sp, #0
 3978              	.LCFI139:
 3979              		.cfi_def_cfa_register 7
 3980 0006 F860     		str	r0, [r7, #12]
 3981 0008 B960     		str	r1, [r7, #8]
 3982 000a 7A60     		str	r2, [r7, #4]
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3983              		.loc 1 3039 2
 3984 000c FB68     		ldr	r3, [r7, #12]
 3985 000e 002B     		cmp	r3, #0
 3986 0010 09D1     		bne	.L255
 3987              	.LBB180:
 3988              	.LBB181:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3989              		.loc 2 195 2 discriminator 1
 3990              		.syntax unified
 3991              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3992 0012 4FF05003 			mov r3, #80												
 3993 0016 83F31188 		msr basepri, r3											
 3994 001a BFF36F8F 		isb														
 3995 001e BFF34F8F 		dsb														
 3996              	
 3997              	@ 0 "" 2
 3998              		.thumb
 3999              		.syntax unified
 4000 0022 7B61     		str	r3, [r7, #20]
 4001              	.L256:
 4002              	.LBE181:
 4003              	.LBE180:
 4004              		.loc 1 3039 2 discriminator 1
 4005 0024 FEE7     		b	.L256
 4006              	.L255:
ARM GAS  /tmp/cc65XYwf.s 			page 128


3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4007              		.loc 1 3043 2
 4008 0026 114B     		ldr	r3, .L259
 4009 0028 1B68     		ldr	r3, [r3]
 4010 002a 002B     		cmp	r3, #0
 4011 002c 09D1     		bne	.L257
 4012              	.LBB182:
 4013              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4014              		.loc 2 195 2 discriminator 1
 4015              		.syntax unified
 4016              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4017 002e 4FF05003 			mov r3, #80												
 4018 0032 83F31188 		msr basepri, r3											
 4019 0036 BFF36F8F 		isb														
 4020 003a BFF34F8F 		dsb														
 4021              	
 4022              	@ 0 "" 2
 4023              		.thumb
 4024              		.syntax unified
 4025 003e 3B61     		str	r3, [r7, #16]
 4026              	.L258:
 4027              	.LBE183:
 4028              	.LBE182:
 4029              		.loc 1 3043 2 discriminator 2
 4030 0040 FEE7     		b	.L258
 4031              	.L257:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4032              		.loc 1 3048 2
 4033 0042 0B4B     		ldr	r3, .L259+4
 4034 0044 1B68     		ldr	r3, [r3]
 4035 0046 BA68     		ldr	r2, [r7, #8]
 4036 0048 42F00042 		orr	r2, r2, #-2147483648
 4037 004c 9A61     		str	r2, [r3, #24]
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4038              		.loc 1 3055 46
 4039 004e 084B     		ldr	r3, .L259+4
 4040 0050 1B68     		ldr	r3, [r3]
 4041              		.loc 1 3055 2
 4042 0052 1833     		adds	r3, r3, #24
 4043 0054 1946     		mov	r1, r3
 4044 0056 F868     		ldr	r0, [r7, #12]
 4045 0058 FFF7FEFF 		bl	vListInsertEnd
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 129


3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4046              		.loc 1 3057 2
 4047 005c 0121     		movs	r1, #1
 4048 005e 7868     		ldr	r0, [r7, #4]
 4049 0060 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4050              		.loc 1 3058 1
 4051 0064 00BF     		nop
 4052 0066 1837     		adds	r7, r7, #24
 4053              	.LCFI140:
 4054              		.cfi_def_cfa_offset 8
 4055 0068 BD46     		mov	sp, r7
 4056              	.LCFI141:
 4057              		.cfi_def_cfa_register 13
 4058              		@ sp needed
 4059 006a 80BD     		pop	{r7, pc}
 4060              	.L260:
 4061              		.align	2
 4062              	.L259:
 4063 006c 00000000 		.word	uxSchedulerSuspended
 4064 0070 00000000 		.word	pxCurrentTCB
 4065              		.cfi_endproc
 4066              	.LFE31:
 4068              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4069              		.align	1
 4070              		.global	vTaskPlaceOnEventListRestricted
 4071              		.syntax unified
 4072              		.thumb
 4073              		.thumb_func
 4074              		.fpu fpv4-sp-d16
 4076              	vTaskPlaceOnEventListRestricted:
 4077              	.LFB32:
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4078              		.loc 1 3064 2
 4079              		.cfi_startproc
 4080              		@ args = 0, pretend = 0, frame = 24
 4081              		@ frame_needed = 1, uses_anonymous_args = 0
 4082 0000 80B5     		push	{r7, lr}
 4083              	.LCFI142:
 4084              		.cfi_def_cfa_offset 8
 4085              		.cfi_offset 7, -8
 4086              		.cfi_offset 14, -4
 4087 0002 86B0     		sub	sp, sp, #24
 4088              	.LCFI143:
 4089              		.cfi_def_cfa_offset 32
 4090 0004 00AF     		add	r7, sp, #0
 4091              	.LCFI144:
 4092              		.cfi_def_cfa_register 7
 4093 0006 F860     		str	r0, [r7, #12]
 4094 0008 B960     		str	r1, [r7, #8]
 4095 000a 7A60     		str	r2, [r7, #4]
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
ARM GAS  /tmp/cc65XYwf.s 			page 130


 4096              		.loc 1 3065 3
 4097 000c FB68     		ldr	r3, [r7, #12]
 4098 000e 002B     		cmp	r3, #0
 4099 0010 09D1     		bne	.L262
 4100              	.LBB184:
 4101              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4102              		.loc 2 195 2 discriminator 1
 4103              		.syntax unified
 4104              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4105 0012 4FF05003 			mov r3, #80												
 4106 0016 83F31188 		msr basepri, r3											
 4107 001a BFF36F8F 		isb														
 4108 001e BFF34F8F 		dsb														
 4109              	
 4110              	@ 0 "" 2
 4111              		.thumb
 4112              		.syntax unified
 4113 0022 7B61     		str	r3, [r7, #20]
 4114              	.L263:
 4115              	.LBE185:
 4116              	.LBE184:
 4117              		.loc 1 3065 3 discriminator 1
 4118 0024 FEE7     		b	.L263
 4119              	.L262:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4120              		.loc 1 3077 47
 4121 0026 0A4B     		ldr	r3, .L265
 4122 0028 1B68     		ldr	r3, [r3]
 4123              		.loc 1 3077 3
 4124 002a 1833     		adds	r3, r3, #24
 4125 002c 1946     		mov	r1, r3
 4126 002e F868     		ldr	r0, [r7, #12]
 4127 0030 FFF7FEFF 		bl	vListInsertEnd
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4128              		.loc 1 3082 5
 4129 0034 7B68     		ldr	r3, [r7, #4]
 4130 0036 002B     		cmp	r3, #0
 4131 0038 02D0     		beq	.L264
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4132              		.loc 1 3084 17
ARM GAS  /tmp/cc65XYwf.s 			page 131


 4133 003a 4FF0FF33 		mov	r3, #-1
 4134 003e BB60     		str	r3, [r7, #8]
 4135              	.L264:
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4136              		.loc 1 3088 3
 4137 0040 7968     		ldr	r1, [r7, #4]
 4138 0042 B868     		ldr	r0, [r7, #8]
 4139 0044 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4140              		.loc 1 3089 2
 4141 0048 00BF     		nop
 4142 004a 1837     		adds	r7, r7, #24
 4143              	.LCFI145:
 4144              		.cfi_def_cfa_offset 8
 4145 004c BD46     		mov	sp, r7
 4146              	.LCFI146:
 4147              		.cfi_def_cfa_register 13
 4148              		@ sp needed
 4149 004e 80BD     		pop	{r7, pc}
 4150              	.L266:
 4151              		.align	2
 4152              	.L265:
 4153 0050 00000000 		.word	pxCurrentTCB
 4154              		.cfi_endproc
 4155              	.LFE32:
 4157              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4158              		.align	1
 4159              		.global	xTaskRemoveFromEventList
 4160              		.syntax unified
 4161              		.thumb
 4162              		.thumb_func
 4163              		.fpu fpv4-sp-d16
 4165              	xTaskRemoveFromEventList:
 4166              	.LFB33:
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4167              		.loc 1 3095 1
 4168              		.cfi_startproc
 4169              		@ args = 0, pretend = 0, frame = 24
 4170              		@ frame_needed = 1, uses_anonymous_args = 0
 4171 0000 80B5     		push	{r7, lr}
 4172              	.LCFI147:
 4173              		.cfi_def_cfa_offset 8
 4174              		.cfi_offset 7, -8
 4175              		.cfi_offset 14, -4
 4176 0002 86B0     		sub	sp, sp, #24
 4177              	.LCFI148:
 4178              		.cfi_def_cfa_offset 32
 4179 0004 00AF     		add	r7, sp, #0
 4180              	.LCFI149:
ARM GAS  /tmp/cc65XYwf.s 			page 132


 4181              		.cfi_def_cfa_register 7
 4182 0006 7860     		str	r0, [r7, #4]
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 4183              		.loc 1 3112 19
 4184 0008 7B68     		ldr	r3, [r7, #4]
 4185 000a DB68     		ldr	r3, [r3, #12]
 4186              		.loc 1 3112 17
 4187 000c DB68     		ldr	r3, [r3, #12]
 4188 000e 3B61     		str	r3, [r7, #16]
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4189              		.loc 1 3113 2
 4190 0010 3B69     		ldr	r3, [r7, #16]
 4191 0012 002B     		cmp	r3, #0
 4192 0014 09D1     		bne	.L268
 4193              	.LBB186:
 4194              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4195              		.loc 2 195 2 discriminator 1
 4196              		.syntax unified
 4197              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4198 0016 4FF05003 			mov r3, #80												
 4199 001a 83F31188 		msr basepri, r3											
 4200 001e BFF36F8F 		isb														
 4201 0022 BFF34F8F 		dsb														
 4202              	
 4203              	@ 0 "" 2
 4204              		.thumb
 4205              		.syntax unified
 4206 0026 FB60     		str	r3, [r7, #12]
 4207              	.L269:
 4208              	.LBE187:
 4209              	.LBE186:
 4210              		.loc 1 3113 2 discriminator 1
 4211 0028 FEE7     		b	.L269
 4212              	.L268:
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4213              		.loc 1 3114 11
 4214 002a 3B69     		ldr	r3, [r7, #16]
 4215 002c 1833     		adds	r3, r3, #24
 4216 002e 1846     		mov	r0, r3
 4217 0030 FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/cc65XYwf.s 			page 133


3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4218              		.loc 1 3116 27
 4219 0034 1D4B     		ldr	r3, .L276
 4220 0036 1B68     		ldr	r3, [r3]
 4221              		.loc 1 3116 4
 4222 0038 002B     		cmp	r3, #0
 4223 003a 1DD1     		bne	.L270
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4224              		.loc 1 3118 12
 4225 003c 3B69     		ldr	r3, [r7, #16]
 4226 003e 0433     		adds	r3, r3, #4
 4227 0040 1846     		mov	r0, r3
 4228 0042 FFF7FEFF 		bl	uxListRemove
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4229              		.loc 1 3119 3
 4230 0046 3B69     		ldr	r3, [r7, #16]
 4231 0048 DA6A     		ldr	r2, [r3, #44]
 4232 004a 194B     		ldr	r3, .L276+4
 4233 004c 1B68     		ldr	r3, [r3]
 4234 004e 9A42     		cmp	r2, r3
 4235 0050 03D9     		bls	.L271
 4236              		.loc 1 3119 3 is_stmt 0 discriminator 1
 4237 0052 3B69     		ldr	r3, [r7, #16]
 4238 0054 DB6A     		ldr	r3, [r3, #44]
 4239 0056 164A     		ldr	r2, .L276+4
 4240 0058 1360     		str	r3, [r2]
 4241              	.L271:
 4242              		.loc 1 3119 3 discriminator 3
 4243 005a 3B69     		ldr	r3, [r7, #16]
 4244 005c DA6A     		ldr	r2, [r3, #44]
 4245 005e 1346     		mov	r3, r2
 4246 0060 9B00     		lsls	r3, r3, #2
 4247 0062 1344     		add	r3, r3, r2
 4248 0064 9B00     		lsls	r3, r3, #2
 4249 0066 134A     		ldr	r2, .L276+8
 4250 0068 1A44     		add	r2, r2, r3
 4251 006a 3B69     		ldr	r3, [r7, #16]
 4252 006c 0433     		adds	r3, r3, #4
 4253 006e 1946     		mov	r1, r3
 4254 0070 1046     		mov	r0, r2
 4255 0072 FFF7FEFF 		bl	vListInsertEnd
 4256 0076 05E0     		b	.L272
 4257              	.L270:
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
ARM GAS  /tmp/cc65XYwf.s 			page 134


3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4258              		.loc 1 3139 3 is_stmt 1
 4259 0078 3B69     		ldr	r3, [r7, #16]
 4260 007a 1833     		adds	r3, r3, #24
 4261 007c 1946     		mov	r1, r3
 4262 007e 0E48     		ldr	r0, .L276+12
 4263 0080 FFF7FEFF 		bl	vListInsertEnd
 4264              	.L272:
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4265              		.loc 1 3142 20
 4266 0084 3B69     		ldr	r3, [r7, #16]
 4267 0086 DA6A     		ldr	r2, [r3, #44]
 4268              		.loc 1 3142 47
 4269 0088 0C4B     		ldr	r3, .L276+16
 4270 008a 1B68     		ldr	r3, [r3]
 4271 008c DB6A     		ldr	r3, [r3, #44]
 4272              		.loc 1 3142 4
 4273 008e 9A42     		cmp	r2, r3
 4274 0090 05D9     		bls	.L273
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 4275              		.loc 1 3147 11
 4276 0092 0123     		movs	r3, #1
 4277 0094 7B61     		str	r3, [r7, #20]
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4278              		.loc 1 3151 17
 4279 0096 0A4B     		ldr	r3, .L276+20
 4280 0098 0122     		movs	r2, #1
 4281 009a 1A60     		str	r2, [r3]
 4282 009c 01E0     		b	.L274
 4283              	.L273:
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 4284              		.loc 1 3155 11
 4285 009e 0023     		movs	r3, #0
 4286 00a0 7B61     		str	r3, [r7, #20]
 4287              	.L274:
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
ARM GAS  /tmp/cc65XYwf.s 			page 135


 4288              		.loc 1 3158 9
 4289 00a2 7B69     		ldr	r3, [r7, #20]
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4290              		.loc 1 3159 1
 4291 00a4 1846     		mov	r0, r3
 4292 00a6 1837     		adds	r7, r7, #24
 4293              	.LCFI150:
 4294              		.cfi_def_cfa_offset 8
 4295 00a8 BD46     		mov	sp, r7
 4296              	.LCFI151:
 4297              		.cfi_def_cfa_register 13
 4298              		@ sp needed
 4299 00aa 80BD     		pop	{r7, pc}
 4300              	.L277:
 4301              		.align	2
 4302              	.L276:
 4303 00ac 00000000 		.word	uxSchedulerSuspended
 4304 00b0 00000000 		.word	uxTopReadyPriority
 4305 00b4 00000000 		.word	pxReadyTasksLists
 4306 00b8 00000000 		.word	xPendingReadyList
 4307 00bc 00000000 		.word	pxCurrentTCB
 4308 00c0 00000000 		.word	xYieldPending
 4309              		.cfi_endproc
 4310              	.LFE33:
 4312              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4313              		.align	1
 4314              		.global	vTaskRemoveFromUnorderedEventList
 4315              		.syntax unified
 4316              		.thumb
 4317              		.thumb_func
 4318              		.fpu fpv4-sp-d16
 4320              	vTaskRemoveFromUnorderedEventList:
 4321              	.LFB34:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4322              		.loc 1 3163 1
 4323              		.cfi_startproc
 4324              		@ args = 0, pretend = 0, frame = 24
 4325              		@ frame_needed = 1, uses_anonymous_args = 0
 4326 0000 80B5     		push	{r7, lr}
 4327              	.LCFI152:
 4328              		.cfi_def_cfa_offset 8
 4329              		.cfi_offset 7, -8
 4330              		.cfi_offset 14, -4
 4331 0002 86B0     		sub	sp, sp, #24
 4332              	.LCFI153:
 4333              		.cfi_def_cfa_offset 32
 4334 0004 00AF     		add	r7, sp, #0
 4335              	.LCFI154:
 4336              		.cfi_def_cfa_register 7
 4337 0006 7860     		str	r0, [r7, #4]
 4338 0008 3960     		str	r1, [r7]
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
ARM GAS  /tmp/cc65XYwf.s 			page 136


3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4339              		.loc 1 3168 2
 4340 000a 284B     		ldr	r3, .L286
 4341 000c 1B68     		ldr	r3, [r3]
 4342 000e 002B     		cmp	r3, #0
 4343 0010 09D1     		bne	.L279
 4344              	.LBB188:
 4345              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4346              		.loc 2 195 2 discriminator 1
 4347              		.syntax unified
 4348              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4349 0012 4FF05003 			mov r3, #80												
 4350 0016 83F31188 		msr basepri, r3											
 4351 001a BFF36F8F 		isb														
 4352 001e BFF34F8F 		dsb														
 4353              	
 4354              	@ 0 "" 2
 4355              		.thumb
 4356              		.syntax unified
 4357 0022 3B61     		str	r3, [r7, #16]
 4358              	.L280:
 4359              	.LBE189:
 4360              	.LBE188:
 4361              		.loc 1 3168 2 discriminator 1
 4362 0024 FEE7     		b	.L280
 4363              	.L279:
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4364              		.loc 1 3171 2
 4365 0026 3B68     		ldr	r3, [r7]
 4366 0028 43F00042 		orr	r2, r3, #-2147483648
 4367 002c 7B68     		ldr	r3, [r7, #4]
 4368 002e 1A60     		str	r2, [r3]
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 4369              		.loc 1 3175 17
 4370 0030 7B68     		ldr	r3, [r7, #4]
 4371 0032 DB68     		ldr	r3, [r3, #12]
 4372 0034 7B61     		str	r3, [r7, #20]
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4373              		.loc 1 3176 2
 4374 0036 7B69     		ldr	r3, [r7, #20]
 4375 0038 002B     		cmp	r3, #0
 4376 003a 09D1     		bne	.L281
 4377              	.LBB190:
 4378              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4379              		.loc 2 195 2 discriminator 1
 4380              		.syntax unified
 4381              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4382 003c 4FF05003 			mov r3, #80												
 4383 0040 83F31188 		msr basepri, r3											
ARM GAS  /tmp/cc65XYwf.s 			page 137


 4384 0044 BFF36F8F 		isb														
 4385 0048 BFF34F8F 		dsb														
 4386              	
 4387              	@ 0 "" 2
 4388              		.thumb
 4389              		.syntax unified
 4390 004c FB60     		str	r3, [r7, #12]
 4391              	.L282:
 4392              	.LBE191:
 4393              	.LBE190:
 4394              		.loc 1 3176 2 discriminator 2
 4395 004e FEE7     		b	.L282
 4396              	.L281:
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4397              		.loc 1 3177 11
 4398 0050 7868     		ldr	r0, [r7, #4]
 4399 0052 FFF7FEFF 		bl	uxListRemove
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4400              		.loc 1 3182 11
 4401 0056 7B69     		ldr	r3, [r7, #20]
 4402 0058 0433     		adds	r3, r3, #4
 4403 005a 1846     		mov	r0, r3
 4404 005c FFF7FEFF 		bl	uxListRemove
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4405              		.loc 1 3183 2
 4406 0060 7B69     		ldr	r3, [r7, #20]
 4407 0062 DA6A     		ldr	r2, [r3, #44]
 4408 0064 124B     		ldr	r3, .L286+4
 4409 0066 1B68     		ldr	r3, [r3]
 4410 0068 9A42     		cmp	r2, r3
 4411 006a 03D9     		bls	.L283
 4412              		.loc 1 3183 2 is_stmt 0 discriminator 1
 4413 006c 7B69     		ldr	r3, [r7, #20]
 4414 006e DB6A     		ldr	r3, [r3, #44]
 4415 0070 0F4A     		ldr	r2, .L286+4
 4416 0072 1360     		str	r3, [r2]
 4417              	.L283:
 4418              		.loc 1 3183 2 discriminator 3
 4419 0074 7B69     		ldr	r3, [r7, #20]
 4420 0076 DA6A     		ldr	r2, [r3, #44]
 4421 0078 1346     		mov	r3, r2
 4422 007a 9B00     		lsls	r3, r3, #2
 4423 007c 1344     		add	r3, r3, r2
 4424 007e 9B00     		lsls	r3, r3, #2
 4425 0080 0C4A     		ldr	r2, .L286+8
 4426 0082 1A44     		add	r2, r2, r3
 4427 0084 7B69     		ldr	r3, [r7, #20]
 4428 0086 0433     		adds	r3, r3, #4
 4429 0088 1946     		mov	r1, r3
 4430 008a 1046     		mov	r0, r2
 4431 008c FFF7FEFF 		bl	vListInsertEnd
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
ARM GAS  /tmp/cc65XYwf.s 			page 138


 4432              		.loc 1 3185 20 is_stmt 1 discriminator 3
 4433 0090 7B69     		ldr	r3, [r7, #20]
 4434 0092 DA6A     		ldr	r2, [r3, #44]
 4435              		.loc 1 3185 47 discriminator 3
 4436 0094 084B     		ldr	r3, .L286+12
 4437 0096 1B68     		ldr	r3, [r3]
 4438 0098 DB6A     		ldr	r3, [r3, #44]
 4439              		.loc 1 3185 4 discriminator 3
 4440 009a 9A42     		cmp	r2, r3
 4441 009c 02D9     		bls	.L285
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4442              		.loc 1 3191 17
 4443 009e 074B     		ldr	r3, .L286+16
 4444 00a0 0122     		movs	r2, #1
 4445 00a2 1A60     		str	r2, [r3]
 4446              	.L285:
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4447              		.loc 1 3193 1
 4448 00a4 00BF     		nop
 4449 00a6 1837     		adds	r7, r7, #24
 4450              	.LCFI155:
 4451              		.cfi_def_cfa_offset 8
 4452 00a8 BD46     		mov	sp, r7
 4453              	.LCFI156:
 4454              		.cfi_def_cfa_register 13
 4455              		@ sp needed
 4456 00aa 80BD     		pop	{r7, pc}
 4457              	.L287:
 4458              		.align	2
 4459              	.L286:
 4460 00ac 00000000 		.word	uxSchedulerSuspended
 4461 00b0 00000000 		.word	uxTopReadyPriority
 4462 00b4 00000000 		.word	pxReadyTasksLists
 4463 00b8 00000000 		.word	pxCurrentTCB
 4464 00bc 00000000 		.word	xYieldPending
 4465              		.cfi_endproc
 4466              	.LFE34:
 4468              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4469              		.align	1
 4470              		.global	vTaskSetTimeOutState
 4471              		.syntax unified
 4472              		.thumb
 4473              		.thumb_func
 4474              		.fpu fpv4-sp-d16
 4476              	vTaskSetTimeOutState:
 4477              	.LFB35:
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4478              		.loc 1 3197 1
ARM GAS  /tmp/cc65XYwf.s 			page 139


 4479              		.cfi_startproc
 4480              		@ args = 0, pretend = 0, frame = 16
 4481              		@ frame_needed = 1, uses_anonymous_args = 0
 4482 0000 80B5     		push	{r7, lr}
 4483              	.LCFI157:
 4484              		.cfi_def_cfa_offset 8
 4485              		.cfi_offset 7, -8
 4486              		.cfi_offset 14, -4
 4487 0002 84B0     		sub	sp, sp, #16
 4488              	.LCFI158:
 4489              		.cfi_def_cfa_offset 24
 4490 0004 00AF     		add	r7, sp, #0
 4491              	.LCFI159:
 4492              		.cfi_def_cfa_register 7
 4493 0006 7860     		str	r0, [r7, #4]
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4494              		.loc 1 3198 2
 4495 0008 7B68     		ldr	r3, [r7, #4]
 4496 000a 002B     		cmp	r3, #0
 4497 000c 09D1     		bne	.L289
 4498              	.LBB192:
 4499              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4500              		.loc 2 195 2 discriminator 1
 4501              		.syntax unified
 4502              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4503 000e 4FF05003 			mov r3, #80												
 4504 0012 83F31188 		msr basepri, r3											
 4505 0016 BFF36F8F 		isb														
 4506 001a BFF34F8F 		dsb														
 4507              	
 4508              	@ 0 "" 2
 4509              		.thumb
 4510              		.syntax unified
 4511 001e FB60     		str	r3, [r7, #12]
 4512              	.L290:
 4513              	.LBE193:
 4514              	.LBE192:
 4515              		.loc 1 3198 2 discriminator 1
 4516 0020 FEE7     		b	.L290
 4517              	.L289:
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4518              		.loc 1 3199 2
 4519 0022 FFF7FEFF 		bl	vPortEnterCritical
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4520              		.loc 1 3201 29
 4521 0026 074B     		ldr	r3, .L291
 4522 0028 1A68     		ldr	r2, [r3]
 4523 002a 7B68     		ldr	r3, [r7, #4]
 4524 002c 1A60     		str	r2, [r3]
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4525              		.loc 1 3202 30
 4526 002e 064B     		ldr	r3, .L291+4
 4527 0030 1A68     		ldr	r2, [r3]
 4528 0032 7B68     		ldr	r3, [r7, #4]
 4529 0034 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/cc65XYwf.s 			page 140


3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4530              		.loc 1 3204 2
 4531 0036 FFF7FEFF 		bl	vPortExitCritical
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4532              		.loc 1 3205 1
 4533 003a 00BF     		nop
 4534 003c 1037     		adds	r7, r7, #16
 4535              	.LCFI160:
 4536              		.cfi_def_cfa_offset 8
 4537 003e BD46     		mov	sp, r7
 4538              	.LCFI161:
 4539              		.cfi_def_cfa_register 13
 4540              		@ sp needed
 4541 0040 80BD     		pop	{r7, pc}
 4542              	.L292:
 4543 0042 00BF     		.align	2
 4544              	.L291:
 4545 0044 00000000 		.word	xNumOfOverflows
 4546 0048 00000000 		.word	xTickCount
 4547              		.cfi_endproc
 4548              	.LFE35:
 4550              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4551              		.align	1
 4552              		.global	vTaskInternalSetTimeOutState
 4553              		.syntax unified
 4554              		.thumb
 4555              		.thumb_func
 4556              		.fpu fpv4-sp-d16
 4558              	vTaskInternalSetTimeOutState:
 4559              	.LFB36:
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4560              		.loc 1 3209 1
 4561              		.cfi_startproc
 4562              		@ args = 0, pretend = 0, frame = 8
 4563              		@ frame_needed = 1, uses_anonymous_args = 0
 4564              		@ link register save eliminated.
 4565 0000 80B4     		push	{r7}
 4566              	.LCFI162:
 4567              		.cfi_def_cfa_offset 4
 4568              		.cfi_offset 7, -4
 4569 0002 83B0     		sub	sp, sp, #12
 4570              	.LCFI163:
 4571              		.cfi_def_cfa_offset 16
 4572 0004 00AF     		add	r7, sp, #0
 4573              	.LCFI164:
 4574              		.cfi_def_cfa_register 7
 4575 0006 7860     		str	r0, [r7, #4]
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4576              		.loc 1 3211 28
 4577 0008 064B     		ldr	r3, .L294
 4578 000a 1A68     		ldr	r2, [r3]
 4579 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc65XYwf.s 			page 141


 4580 000e 1A60     		str	r2, [r3]
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4581              		.loc 1 3212 29
 4582 0010 054B     		ldr	r3, .L294+4
 4583 0012 1A68     		ldr	r2, [r3]
 4584 0014 7B68     		ldr	r3, [r7, #4]
 4585 0016 5A60     		str	r2, [r3, #4]
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4586              		.loc 1 3213 1
 4587 0018 00BF     		nop
 4588 001a 0C37     		adds	r7, r7, #12
 4589              	.LCFI165:
 4590              		.cfi_def_cfa_offset 4
 4591 001c BD46     		mov	sp, r7
 4592              	.LCFI166:
 4593              		.cfi_def_cfa_register 13
 4594              		@ sp needed
 4595 001e 5DF8047B 		ldr	r7, [sp], #4
 4596              	.LCFI167:
 4597              		.cfi_restore 7
 4598              		.cfi_def_cfa_offset 0
 4599 0022 7047     		bx	lr
 4600              	.L295:
 4601              		.align	2
 4602              	.L294:
 4603 0024 00000000 		.word	xNumOfOverflows
 4604 0028 00000000 		.word	xTickCount
 4605              		.cfi_endproc
 4606              	.LFE36:
 4608              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4609              		.align	1
 4610              		.global	xTaskCheckForTimeOut
 4611              		.syntax unified
 4612              		.thumb
 4613              		.thumb_func
 4614              		.fpu fpv4-sp-d16
 4616              	xTaskCheckForTimeOut:
 4617              	.LFB37:
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4618              		.loc 1 3217 1
 4619              		.cfi_startproc
 4620              		@ args = 0, pretend = 0, frame = 32
 4621              		@ frame_needed = 1, uses_anonymous_args = 0
 4622 0000 80B5     		push	{r7, lr}
 4623              	.LCFI168:
 4624              		.cfi_def_cfa_offset 8
 4625              		.cfi_offset 7, -8
 4626              		.cfi_offset 14, -4
 4627 0002 88B0     		sub	sp, sp, #32
 4628              	.LCFI169:
 4629              		.cfi_def_cfa_offset 40
 4630 0004 00AF     		add	r7, sp, #0
 4631              	.LCFI170:
 4632              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cc65XYwf.s 			page 142


 4633 0006 7860     		str	r0, [r7, #4]
 4634 0008 3960     		str	r1, [r7]
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4635              		.loc 1 3220 2
 4636 000a 7B68     		ldr	r3, [r7, #4]
 4637 000c 002B     		cmp	r3, #0
 4638 000e 09D1     		bne	.L297
 4639              	.LBB194:
 4640              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4641              		.loc 2 195 2 discriminator 1
 4642              		.syntax unified
 4643              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4644 0010 4FF05003 			mov r3, #80												
 4645 0014 83F31188 		msr basepri, r3											
 4646 0018 BFF36F8F 		isb														
 4647 001c BFF34F8F 		dsb														
 4648              	
 4649              	@ 0 "" 2
 4650              		.thumb
 4651              		.syntax unified
 4652 0020 3B61     		str	r3, [r7, #16]
 4653              	.L298:
 4654              	.LBE195:
 4655              	.LBE194:
 4656              		.loc 1 3220 2 discriminator 1
 4657 0022 FEE7     		b	.L298
 4658              	.L297:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4659              		.loc 1 3221 2
 4660 0024 3B68     		ldr	r3, [r7]
 4661 0026 002B     		cmp	r3, #0
 4662 0028 09D1     		bne	.L299
 4663              	.LBB196:
 4664              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4665              		.loc 2 195 2 discriminator 1
 4666              		.syntax unified
 4667              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4668 002a 4FF05003 			mov r3, #80												
 4669 002e 83F31188 		msr basepri, r3											
 4670 0032 BFF36F8F 		isb														
 4671 0036 BFF34F8F 		dsb														
 4672              	
 4673              	@ 0 "" 2
 4674              		.thumb
 4675              		.syntax unified
 4676 003a FB60     		str	r3, [r7, #12]
 4677              	.L300:
 4678              	.LBE197:
 4679              	.LBE196:
 4680              		.loc 1 3221 2 discriminator 2
 4681 003c FEE7     		b	.L300
 4682              	.L299:
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 143


3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4683              		.loc 1 3223 2
 4684 003e FFF7FEFF 		bl	vPortEnterCritical
 4685              	.LBB198:
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4686              		.loc 1 3226 20
 4687 0042 1D4B     		ldr	r3, .L306
 4688 0044 1B68     		ldr	r3, [r3]
 4689 0046 BB61     		str	r3, [r7, #24]
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4690              		.loc 1 3227 62
 4691 0048 7B68     		ldr	r3, [r7, #4]
 4692 004a 5B68     		ldr	r3, [r3, #4]
 4693              		.loc 1 3227 20
 4694 004c BA69     		ldr	r2, [r7, #24]
 4695 004e D31A     		subs	r3, r2, r3
 4696 0050 7B61     		str	r3, [r7, #20]
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4697              		.loc 1 3241 8
 4698 0052 3B68     		ldr	r3, [r7]
 4699 0054 1B68     		ldr	r3, [r3]
 4700              		.loc 1 3241 6
 4701 0056 B3F1FF3F 		cmp	r3, #-1
 4702 005a 02D1     		bne	.L301
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 4703              		.loc 1 3246 13
 4704 005c 0023     		movs	r3, #0
 4705 005e FB61     		str	r3, [r7, #28]
 4706 0060 23E0     		b	.L302
 4707              	.L301:
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4708              		.loc 1 3251 37
 4709 0062 7B68     		ldr	r3, [r7, #4]
 4710 0064 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/cc65XYwf.s 			page 144


 4711              		.loc 1 3251 25
 4712 0066 154B     		ldr	r3, .L306+4
 4713 0068 1B68     		ldr	r3, [r3]
 4714              		.loc 1 3251 5
 4715 006a 9A42     		cmp	r2, r3
 4716 006c 07D0     		beq	.L303
 4717              		.loc 1 3251 89 discriminator 1
 4718 006e 7B68     		ldr	r3, [r7, #4]
 4719 0070 5B68     		ldr	r3, [r3, #4]
 4720              		.loc 1 3251 56 discriminator 1
 4721 0072 BA69     		ldr	r2, [r7, #24]
 4722 0074 9A42     		cmp	r2, r3
 4723 0076 02D3     		bcc	.L303
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4724              		.loc 1 3258 12
 4725 0078 0123     		movs	r3, #1
 4726 007a FB61     		str	r3, [r7, #28]
 4727 007c 15E0     		b	.L302
 4728              	.L303:
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4729              		.loc 1 3260 27
 4730 007e 3B68     		ldr	r3, [r7]
 4731 0080 1B68     		ldr	r3, [r3]
 4732              		.loc 1 3260 10
 4733 0082 7A69     		ldr	r2, [r7, #20]
 4734 0084 9A42     		cmp	r2, r3
 4735 0086 0BD2     		bcs	.L304
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4736              		.loc 1 3263 19
 4737 0088 3B68     		ldr	r3, [r7]
 4738 008a 1A68     		ldr	r2, [r3]
 4739 008c 7B69     		ldr	r3, [r7, #20]
 4740 008e D21A     		subs	r2, r2, r3
 4741 0090 3B68     		ldr	r3, [r7]
 4742 0092 1A60     		str	r2, [r3]
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4743              		.loc 1 3264 4
 4744 0094 7868     		ldr	r0, [r7, #4]
 4745 0096 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4746              		.loc 1 3265 12
 4747 009a 0023     		movs	r3, #0
 4748 009c FB61     		str	r3, [r7, #28]
 4749 009e 04E0     		b	.L302
 4750              	.L304:
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc65XYwf.s 			page 145


3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 4751              		.loc 1 3269 19
 4752 00a0 3B68     		ldr	r3, [r7]
 4753 00a2 0022     		movs	r2, #0
 4754 00a4 1A60     		str	r2, [r3]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4755              		.loc 1 3270 12
 4756 00a6 0123     		movs	r3, #1
 4757 00a8 FB61     		str	r3, [r7, #28]
 4758              	.L302:
 4759              	.LBE198:
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4760              		.loc 1 3273 2
 4761 00aa FFF7FEFF 		bl	vPortExitCritical
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4762              		.loc 1 3275 9
 4763 00ae FB69     		ldr	r3, [r7, #28]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4764              		.loc 1 3276 1
 4765 00b0 1846     		mov	r0, r3
 4766 00b2 2037     		adds	r7, r7, #32
 4767              	.LCFI171:
 4768              		.cfi_def_cfa_offset 8
 4769 00b4 BD46     		mov	sp, r7
 4770              	.LCFI172:
 4771              		.cfi_def_cfa_register 13
 4772              		@ sp needed
 4773 00b6 80BD     		pop	{r7, pc}
 4774              	.L307:
 4775              		.align	2
 4776              	.L306:
 4777 00b8 00000000 		.word	xTickCount
 4778 00bc 00000000 		.word	xNumOfOverflows
 4779              		.cfi_endproc
 4780              	.LFE37:
 4782              		.section	.text.vTaskMissedYield,"ax",%progbits
 4783              		.align	1
 4784              		.global	vTaskMissedYield
 4785              		.syntax unified
 4786              		.thumb
 4787              		.thumb_func
 4788              		.fpu fpv4-sp-d16
 4790              	vTaskMissedYield:
 4791              	.LFB38:
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4792              		.loc 1 3280 1
 4793              		.cfi_startproc
 4794              		@ args = 0, pretend = 0, frame = 0
 4795              		@ frame_needed = 1, uses_anonymous_args = 0
 4796              		@ link register save eliminated.
 4797 0000 80B4     		push	{r7}
ARM GAS  /tmp/cc65XYwf.s 			page 146


 4798              	.LCFI173:
 4799              		.cfi_def_cfa_offset 4
 4800              		.cfi_offset 7, -4
 4801 0002 00AF     		add	r7, sp, #0
 4802              	.LCFI174:
 4803              		.cfi_def_cfa_register 7
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4804              		.loc 1 3281 16
 4805 0004 034B     		ldr	r3, .L309
 4806 0006 0122     		movs	r2, #1
 4807 0008 1A60     		str	r2, [r3]
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4808              		.loc 1 3282 1
 4809 000a 00BF     		nop
 4810 000c BD46     		mov	sp, r7
 4811              	.LCFI175:
 4812              		.cfi_def_cfa_register 13
 4813              		@ sp needed
 4814 000e 5DF8047B 		ldr	r7, [sp], #4
 4815              	.LCFI176:
 4816              		.cfi_restore 7
 4817              		.cfi_def_cfa_offset 0
 4818 0012 7047     		bx	lr
 4819              	.L310:
 4820              		.align	2
 4821              	.L309:
 4822 0014 00000000 		.word	xYieldPending
 4823              		.cfi_endproc
 4824              	.LFE38:
 4826              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4827              		.align	1
 4828              		.global	uxTaskGetTaskNumber
 4829              		.syntax unified
 4830              		.thumb
 4831              		.thumb_func
 4832              		.fpu fpv4-sp-d16
 4834              	uxTaskGetTaskNumber:
 4835              	.LFB39:
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4836              		.loc 1 3288 2
 4837              		.cfi_startproc
 4838              		@ args = 0, pretend = 0, frame = 16
 4839              		@ frame_needed = 1, uses_anonymous_args = 0
 4840              		@ link register save eliminated.
 4841 0000 80B4     		push	{r7}
 4842              	.LCFI177:
 4843              		.cfi_def_cfa_offset 4
 4844              		.cfi_offset 7, -4
 4845 0002 85B0     		sub	sp, sp, #20
 4846              	.LCFI178:
 4847              		.cfi_def_cfa_offset 24
 4848 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cc65XYwf.s 			page 147


 4849              	.LCFI179:
 4850              		.cfi_def_cfa_register 7
 4851 0006 7860     		str	r0, [r7, #4]
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 4852              		.loc 1 3292 5
 4853 0008 7B68     		ldr	r3, [r7, #4]
 4854 000a 002B     		cmp	r3, #0
 4855 000c 05D0     		beq	.L312
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 4856              		.loc 1 3294 10
 4857 000e 7B68     		ldr	r3, [r7, #4]
 4858 0010 BB60     		str	r3, [r7, #8]
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 4859              		.loc 1 3295 13
 4860 0012 BB68     		ldr	r3, [r7, #8]
 4861 0014 9B6C     		ldr	r3, [r3, #72]
 4862 0016 FB60     		str	r3, [r7, #12]
 4863 0018 01E0     		b	.L313
 4864              	.L312:
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
 4865              		.loc 1 3299 13
 4866 001a 0023     		movs	r3, #0
 4867 001c FB60     		str	r3, [r7, #12]
 4868              	.L313:
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 4869              		.loc 1 3302 10
 4870 001e FB68     		ldr	r3, [r7, #12]
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4871              		.loc 1 3303 2
 4872 0020 1846     		mov	r0, r3
 4873 0022 1437     		adds	r7, r7, #20
 4874              	.LCFI180:
 4875              		.cfi_def_cfa_offset 4
 4876 0024 BD46     		mov	sp, r7
 4877              	.LCFI181:
 4878              		.cfi_def_cfa_register 13
 4879              		@ sp needed
 4880 0026 5DF8047B 		ldr	r7, [sp], #4
 4881              	.LCFI182:
 4882              		.cfi_restore 7
 4883              		.cfi_def_cfa_offset 0
 4884 002a 7047     		bx	lr
 4885              		.cfi_endproc
 4886              	.LFE39:
 4888              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4889              		.align	1
 4890              		.global	vTaskSetTaskNumber
 4891              		.syntax unified
ARM GAS  /tmp/cc65XYwf.s 			page 148


 4892              		.thumb
 4893              		.thumb_func
 4894              		.fpu fpv4-sp-d16
 4896              	vTaskSetTaskNumber:
 4897              	.LFB40:
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4898              		.loc 1 3311 2
 4899              		.cfi_startproc
 4900              		@ args = 0, pretend = 0, frame = 16
 4901              		@ frame_needed = 1, uses_anonymous_args = 0
 4902              		@ link register save eliminated.
 4903 0000 80B4     		push	{r7}
 4904              	.LCFI183:
 4905              		.cfi_def_cfa_offset 4
 4906              		.cfi_offset 7, -4
 4907 0002 85B0     		sub	sp, sp, #20
 4908              	.LCFI184:
 4909              		.cfi_def_cfa_offset 24
 4910 0004 00AF     		add	r7, sp, #0
 4911              	.LCFI185:
 4912              		.cfi_def_cfa_register 7
 4913 0006 7860     		str	r0, [r7, #4]
 4914 0008 3960     		str	r1, [r7]
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 4915              		.loc 1 3314 5
 4916 000a 7B68     		ldr	r3, [r7, #4]
 4917 000c 002B     		cmp	r3, #0
 4918 000e 04D0     		beq	.L317
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 4919              		.loc 1 3316 10
 4920 0010 7B68     		ldr	r3, [r7, #4]
 4921 0012 FB60     		str	r3, [r7, #12]
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 4922              		.loc 1 3317 24
 4923 0014 FB68     		ldr	r3, [r7, #12]
 4924 0016 3A68     		ldr	r2, [r7]
 4925 0018 9A64     		str	r2, [r3, #72]
 4926              	.L317:
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4927              		.loc 1 3319 2
 4928 001a 00BF     		nop
 4929 001c 1437     		adds	r7, r7, #20
 4930              	.LCFI186:
 4931              		.cfi_def_cfa_offset 4
 4932 001e BD46     		mov	sp, r7
 4933              	.LCFI187:
ARM GAS  /tmp/cc65XYwf.s 			page 149


 4934              		.cfi_def_cfa_register 13
 4935              		@ sp needed
 4936 0020 5DF8047B 		ldr	r7, [sp], #4
 4937              	.LCFI188:
 4938              		.cfi_restore 7
 4939              		.cfi_def_cfa_offset 0
 4940 0024 7047     		bx	lr
 4941              		.cfi_endproc
 4942              	.LFE40:
 4944              		.section	.text.prvIdleTask,"ax",%progbits
 4945              		.align	1
 4946              		.syntax unified
 4947              		.thumb
 4948              		.thumb_func
 4949              		.fpu fpv4-sp-d16
 4951              	prvIdleTask:
 4952              	.LFB41:
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4953              		.loc 1 3335 1
 4954              		.cfi_startproc
 4955              		@ args = 0, pretend = 0, frame = 8
 4956              		@ frame_needed = 1, uses_anonymous_args = 0
 4957 0000 80B5     		push	{r7, lr}
 4958              	.LCFI189:
 4959              		.cfi_def_cfa_offset 8
 4960              		.cfi_offset 7, -8
 4961              		.cfi_offset 14, -4
 4962 0002 82B0     		sub	sp, sp, #8
 4963              	.LCFI190:
 4964              		.cfi_def_cfa_offset 16
 4965 0004 00AF     		add	r7, sp, #0
 4966              	.LCFI191:
 4967              		.cfi_def_cfa_register 7
 4968 0006 7860     		str	r0, [r7, #4]
 4969              	.L320:
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
ARM GAS  /tmp/cc65XYwf.s 			page 150


3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 4970              		.loc 1 3351 3
 4971 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 4972              		.loc 1 3374 8
 4973 000c 064B     		ldr	r3, .L321
 4974 000e 1B68     		ldr	r3, [r3]
 4975              		.loc 1 3374 6
 4976 0010 012B     		cmp	r3, #1
 4977 0012 F9D9     		bls	.L320
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 4978              		.loc 1 3376 5
 4979 0014 054B     		ldr	r3, .L321+4
 4980 0016 4FF08052 		mov	r2, #268435456
 4981 001a 1A60     		str	r2, [r3]
 4982              		.syntax unified
 4983              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4984 001c BFF34F8F 		dsb
 4985              	@ 0 "" 2
 4986              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4987 0020 BFF36F8F 		isb
 4988              	@ 0 "" 2
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4989              		.loc 1 3351 3
 4990              		.thumb
 4991              		.syntax unified
ARM GAS  /tmp/cc65XYwf.s 			page 151


 4992 0024 F0E7     		b	.L320
 4993              	.L322:
 4994 0026 00BF     		.align	2
 4995              	.L321:
 4996 0028 00000000 		.word	pxReadyTasksLists
 4997 002c 04ED00E0 		.word	-536810236
 4998              		.cfi_endproc
 4999              	.LFE41:
 5001              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5002              		.align	1
 5003              		.syntax unified
 5004              		.thumb
 5005              		.thumb_func
 5006              		.fpu fpv4-sp-d16
 5008              	prvInitialiseTaskLists:
 5009              	.LFB42:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
ARM GAS  /tmp/cc65XYwf.s 			page 152


3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
ARM GAS  /tmp/cc65XYwf.s 			page 153


3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 154


3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5010              		.loc 1 3547 1
 5011              		.cfi_startproc
 5012              		@ args = 0, pretend = 0, frame = 8
 5013              		@ frame_needed = 1, uses_anonymous_args = 0
 5014 0000 80B5     		push	{r7, lr}
 5015              	.LCFI192:
 5016              		.cfi_def_cfa_offset 8
 5017              		.cfi_offset 7, -8
 5018              		.cfi_offset 14, -4
 5019 0002 82B0     		sub	sp, sp, #8
 5020              	.LCFI193:
 5021              		.cfi_def_cfa_offset 16
 5022 0004 00AF     		add	r7, sp, #0
 5023              	.LCFI194:
 5024              		.cfi_def_cfa_register 7
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 5025              		.loc 1 3550 18
 5026 0006 0023     		movs	r3, #0
 5027 0008 7B60     		str	r3, [r7, #4]
 5028              		.loc 1 3550 2
 5029 000a 0CE0     		b	.L324
 5030              	.L325:
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5031              		.loc 1 3552 3 discriminator 3
 5032 000c 7A68     		ldr	r2, [r7, #4]
 5033 000e 1346     		mov	r3, r2
 5034 0010 9B00     		lsls	r3, r3, #2
 5035 0012 1344     		add	r3, r3, r2
 5036 0014 9B00     		lsls	r3, r3, #2
 5037 0016 124A     		ldr	r2, .L326
 5038 0018 1344     		add	r3, r3, r2
 5039 001a 1846     		mov	r0, r3
 5040 001c FFF7FEFF 		bl	vListInitialise
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5041              		.loc 1 3550 101 discriminator 3
 5042 0020 7B68     		ldr	r3, [r7, #4]
 5043 0022 0133     		adds	r3, r3, #1
 5044 0024 7B60     		str	r3, [r7, #4]
ARM GAS  /tmp/cc65XYwf.s 			page 155


 5045              	.L324:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5046              		.loc 1 3550 2 discriminator 1
 5047 0026 7B68     		ldr	r3, [r7, #4]
 5048 0028 372B     		cmp	r3, #55
 5049 002a EFD9     		bls	.L325
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 5050              		.loc 1 3555 2
 5051 002c 0D48     		ldr	r0, .L326+4
 5052 002e FFF7FEFF 		bl	vListInitialise
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5053              		.loc 1 3556 2
 5054 0032 0D48     		ldr	r0, .L326+8
 5055 0034 FFF7FEFF 		bl	vListInitialise
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5056              		.loc 1 3557 2
 5057 0038 0C48     		ldr	r0, .L326+12
 5058 003a FFF7FEFF 		bl	vListInitialise
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5059              		.loc 1 3561 3
 5060 003e 0C48     		ldr	r0, .L326+16
 5061 0040 FFF7FEFF 		bl	vListInitialise
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 5062              		.loc 1 3567 3
 5063 0044 0B48     		ldr	r0, .L326+20
 5064 0046 FFF7FEFF 		bl	vListInitialise
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5065              		.loc 1 3573 20
 5066 004a 0B4B     		ldr	r3, .L326+24
 5067 004c 054A     		ldr	r2, .L326+4
 5068 004e 1A60     		str	r2, [r3]
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5069              		.loc 1 3574 28
 5070 0050 0A4B     		ldr	r3, .L326+28
 5071 0052 054A     		ldr	r2, .L326+8
 5072 0054 1A60     		str	r2, [r3]
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5073              		.loc 1 3575 1
 5074 0056 00BF     		nop
 5075 0058 0837     		adds	r7, r7, #8
 5076              	.LCFI195:
 5077              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc65XYwf.s 			page 156


 5078 005a BD46     		mov	sp, r7
 5079              	.LCFI196:
 5080              		.cfi_def_cfa_register 13
 5081              		@ sp needed
 5082 005c 80BD     		pop	{r7, pc}
 5083              	.L327:
 5084 005e 00BF     		.align	2
 5085              	.L326:
 5086 0060 00000000 		.word	pxReadyTasksLists
 5087 0064 00000000 		.word	xDelayedTaskList1
 5088 0068 00000000 		.word	xDelayedTaskList2
 5089 006c 00000000 		.word	xPendingReadyList
 5090 0070 00000000 		.word	xTasksWaitingTermination
 5091 0074 00000000 		.word	xSuspendedTaskList
 5092 0078 00000000 		.word	pxDelayedTaskList
 5093 007c 00000000 		.word	pxOverflowDelayedTaskList
 5094              		.cfi_endproc
 5095              	.LFE42:
 5097              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5098              		.align	1
 5099              		.syntax unified
 5100              		.thumb
 5101              		.thumb_func
 5102              		.fpu fpv4-sp-d16
 5104              	prvCheckTasksWaitingTermination:
 5105              	.LFB43:
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5106              		.loc 1 3579 1
 5107              		.cfi_startproc
 5108              		@ args = 0, pretend = 0, frame = 8
 5109              		@ frame_needed = 1, uses_anonymous_args = 0
 5110 0000 80B5     		push	{r7, lr}
 5111              	.LCFI197:
 5112              		.cfi_def_cfa_offset 8
 5113              		.cfi_offset 7, -8
 5114              		.cfi_offset 14, -4
 5115 0002 82B0     		sub	sp, sp, #8
 5116              	.LCFI198:
 5117              		.cfi_def_cfa_offset 16
 5118 0004 00AF     		add	r7, sp, #0
 5119              	.LCFI199:
 5120              		.cfi_def_cfa_register 7
 5121              	.LBB199:
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5122              		.loc 1 3589 8
ARM GAS  /tmp/cc65XYwf.s 			page 157


 5123 0006 19E0     		b	.L329
 5124              	.L330:
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 5125              		.loc 1 3591 4
 5126 0008 FFF7FEFF 		bl	vPortEnterCritical
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 5127              		.loc 1 3593 13
 5128 000c 0F4B     		ldr	r3, .L331
 5129 000e DB68     		ldr	r3, [r3, #12]
 5130              		.loc 1 3593 11
 5131 0010 DB68     		ldr	r3, [r3, #12]
 5132 0012 7B60     		str	r3, [r7, #4]
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5133              		.loc 1 3594 14
 5134 0014 7B68     		ldr	r3, [r7, #4]
 5135 0016 0433     		adds	r3, r3, #4
 5136 0018 1846     		mov	r0, r3
 5137 001a FFF7FEFF 		bl	uxListRemove
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 5138              		.loc 1 3595 5
 5139 001e 0C4B     		ldr	r3, .L331+4
 5140 0020 1B68     		ldr	r3, [r3]
 5141 0022 013B     		subs	r3, r3, #1
 5142 0024 0A4A     		ldr	r2, .L331+4
 5143 0026 1360     		str	r3, [r2]
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5144              		.loc 1 3596 5
 5145 0028 0A4B     		ldr	r3, .L331+8
 5146 002a 1B68     		ldr	r3, [r3]
 5147 002c 013B     		subs	r3, r3, #1
 5148 002e 094A     		ldr	r2, .L331+8
 5149 0030 1360     		str	r3, [r2]
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 5150              		.loc 1 3598 4
 5151 0032 FFF7FEFF 		bl	vPortExitCritical
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 5152              		.loc 1 3600 4
 5153 0036 7868     		ldr	r0, [r7, #4]
 5154 0038 FFF7FEFF 		bl	prvDeleteTCB
 5155              	.L329:
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5156              		.loc 1 3589 39
 5157 003c 054B     		ldr	r3, .L331+8
 5158 003e 1B68     		ldr	r3, [r3]
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5159              		.loc 1 3589 8
 5160 0040 002B     		cmp	r3, #0
 5161 0042 E1D1     		bne	.L330
 5162              	.LBE199:
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/cc65XYwf.s 			page 158


 5163              		.loc 1 3604 1
 5164 0044 00BF     		nop
 5165 0046 0837     		adds	r7, r7, #8
 5166              	.LCFI200:
 5167              		.cfi_def_cfa_offset 8
 5168 0048 BD46     		mov	sp, r7
 5169              	.LCFI201:
 5170              		.cfi_def_cfa_register 13
 5171              		@ sp needed
 5172 004a 80BD     		pop	{r7, pc}
 5173              	.L332:
 5174              		.align	2
 5175              	.L331:
 5176 004c 00000000 		.word	xTasksWaitingTermination
 5177 0050 00000000 		.word	uxCurrentNumberOfTasks
 5178 0054 00000000 		.word	uxDeletedTasksWaitingCleanUp
 5179              		.cfi_endproc
 5180              	.LFE43:
 5182              		.section	.text.vTaskGetInfo,"ax",%progbits
 5183              		.align	1
 5184              		.global	vTaskGetInfo
 5185              		.syntax unified
 5186              		.thumb
 5187              		.thumb_func
 5188              		.fpu fpv4-sp-d16
 5190              	vTaskGetInfo:
 5191              	.LFB44:
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5192              		.loc 1 3610 2
 5193              		.cfi_startproc
 5194              		@ args = 0, pretend = 0, frame = 24
 5195              		@ frame_needed = 1, uses_anonymous_args = 0
 5196 0000 80B5     		push	{r7, lr}
 5197              	.LCFI202:
 5198              		.cfi_def_cfa_offset 8
 5199              		.cfi_offset 7, -8
 5200              		.cfi_offset 14, -4
 5201 0002 86B0     		sub	sp, sp, #24
 5202              	.LCFI203:
 5203              		.cfi_def_cfa_offset 32
 5204 0004 00AF     		add	r7, sp, #0
 5205              	.LCFI204:
 5206              		.cfi_def_cfa_register 7
 5207 0006 F860     		str	r0, [r7, #12]
 5208 0008 B960     		str	r1, [r7, #8]
 5209 000a 7A60     		str	r2, [r7, #4]
 5210 000c FB70     		strb	r3, [r7, #3]
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5211              		.loc 1 3614 11
ARM GAS  /tmp/cc65XYwf.s 			page 159


 5212 000e FB68     		ldr	r3, [r7, #12]
 5213 0010 002B     		cmp	r3, #0
 5214 0012 02D1     		bne	.L334
 5215              		.loc 1 3614 11 is_stmt 0 discriminator 1
 5216 0014 2C4B     		ldr	r3, .L344
 5217 0016 1B68     		ldr	r3, [r3]
 5218 0018 00E0     		b	.L335
 5219              	.L334:
 5220              		.loc 1 3614 11 discriminator 2
 5221 001a FB68     		ldr	r3, [r7, #12]
 5222              	.L335:
 5223              		.loc 1 3614 9 is_stmt 1 discriminator 4
 5224 001c 7B61     		str	r3, [r7, #20]
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5225              		.loc 1 3616 25 discriminator 4
 5226 001e BB68     		ldr	r3, [r7, #8]
 5227 0020 7A69     		ldr	r2, [r7, #20]
 5228 0022 1A60     		str	r2, [r3]
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5229              		.loc 1 3617 47 discriminator 4
 5230 0024 7B69     		ldr	r3, [r7, #20]
 5231 0026 03F13402 		add	r2, r3, #52
 5232              		.loc 1 3617 28 discriminator 4
 5233 002a BB68     		ldr	r3, [r7, #8]
 5234 002c 5A60     		str	r2, [r3, #4]
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5235              		.loc 1 3618 42 discriminator 4
 5236 002e 7B69     		ldr	r3, [r7, #20]
 5237 0030 DA6A     		ldr	r2, [r3, #44]
 5238              		.loc 1 3618 35 discriminator 4
 5239 0032 BB68     		ldr	r3, [r7, #8]
 5240 0034 1A61     		str	r2, [r3, #16]
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5241              		.loc 1 3619 36 discriminator 4
 5242 0036 7B69     		ldr	r3, [r7, #20]
 5243 0038 1A6B     		ldr	r2, [r3, #48]
 5244              		.loc 1 3619 29 discriminator 4
 5245 003a BB68     		ldr	r3, [r7, #8]
 5246 003c DA61     		str	r2, [r3, #28]
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5247              		.loc 1 3620 36 discriminator 4
 5248 003e 7B69     		ldr	r3, [r7, #20]
 5249 0040 5A6C     		ldr	r2, [r3, #68]
 5250              		.loc 1 3620 29 discriminator 4
 5251 0042 BB68     		ldr	r3, [r7, #8]
 5252 0044 9A60     		str	r2, [r3, #8]
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5253              		.loc 1 3624 40 discriminator 4
 5254 0046 7B69     		ldr	r3, [r7, #20]
 5255 0048 DA6C     		ldr	r2, [r3, #76]
 5256              		.loc 1 3624 33 discriminator 4
 5257 004a BB68     		ldr	r3, [r7, #8]
 5258 004c 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/cc65XYwf.s 			page 160


3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 5259              		.loc 1 3638 35 discriminator 4
 5260 004e BB68     		ldr	r3, [r7, #8]
 5261 0050 0022     		movs	r2, #0
 5262 0052 9A61     		str	r2, [r3, #24]
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
 5263              		.loc 1 3645 5 discriminator 4
 5264 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5265 0056 052B     		cmp	r3, #5
 5266 0058 1AD0     		beq	.L336
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5267              		.loc 1 3647 14
 5268 005a 1B4B     		ldr	r3, .L344
 5269 005c 1B68     		ldr	r3, [r3]
 5270              		.loc 1 3647 6
 5271 005e 7A69     		ldr	r2, [r7, #20]
 5272 0060 9A42     		cmp	r2, r3
 5273 0062 03D1     		bne	.L337
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5274              		.loc 1 3649 33
 5275 0064 BB68     		ldr	r3, [r7, #8]
 5276 0066 0022     		movs	r2, #0
 5277 0068 1A73     		strb	r2, [r3, #12]
 5278 006a 18E0     		b	.L340
 5279              	.L337:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5280              		.loc 1 3653 33
 5281 006c BB68     		ldr	r3, [r7, #8]
 5282 006e FA78     		ldrb	r2, [r7, #3]
 5283 0070 1A73     		strb	r2, [r3, #12]
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cc65XYwf.s 			page 161


3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
 5284              		.loc 1 3660 8
 5285 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5286 0074 032B     		cmp	r3, #3
 5287 0076 12D1     		bne	.L340
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
 5288              		.loc 1 3662 7
 5289 0078 FFF7FEFF 		bl	vTaskSuspendAll
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5290              		.loc 1 3664 12
 5291 007c 7B69     		ldr	r3, [r7, #20]
 5292 007e 9B6A     		ldr	r3, [r3, #40]
 5293              		.loc 1 3664 10
 5294 0080 002B     		cmp	r3, #0
 5295 0082 02D0     		beq	.L339
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5296              		.loc 1 3666 37
 5297 0084 BB68     		ldr	r3, [r7, #8]
 5298 0086 0222     		movs	r2, #2
 5299 0088 1A73     		strb	r2, [r3, #12]
 5300              	.L339:
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
 5301              		.loc 1 3669 16
 5302 008a FFF7FEFF 		bl	xTaskResumeAll
 5303 008e 06E0     		b	.L340
 5304              	.L336:
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5305              		.loc 1 3677 34
 5306 0090 7869     		ldr	r0, [r7, #20]
 5307 0092 FFF7FEFF 		bl	eTaskGetState
 5308 0096 0346     		mov	r3, r0
 5309 0098 1A46     		mov	r2, r3
 5310              		.loc 1 3677 32
 5311 009a BB68     		ldr	r3, [r7, #8]
 5312 009c 1A73     		strb	r2, [r3, #12]
 5313              	.L340:
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5314              		.loc 1 3682 5
ARM GAS  /tmp/cc65XYwf.s 			page 162


 5315 009e 7B68     		ldr	r3, [r7, #4]
 5316 00a0 002B     		cmp	r3, #0
 5317 00a2 09D0     		beq	.L341
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5318              		.loc 1 3690 89
 5319 00a4 7B69     		ldr	r3, [r7, #20]
 5320 00a6 1B6B     		ldr	r3, [r3, #48]
 5321              		.loc 1 3690 42
 5322 00a8 1846     		mov	r0, r3
 5323 00aa FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5324 00ae 0346     		mov	r3, r0
 5325 00b0 1A46     		mov	r2, r3
 5326              		.loc 1 3690 40
 5327 00b2 BB68     		ldr	r3, [r7, #8]
 5328 00b4 1A84     		strh	r2, [r3, #32]	@ movhi
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5329              		.loc 1 3698 2
 5330 00b6 02E0     		b	.L343
 5331              	.L341:
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5332              		.loc 1 3696 39
 5333 00b8 BB68     		ldr	r3, [r7, #8]
 5334 00ba 0022     		movs	r2, #0
 5335 00bc 1A84     		strh	r2, [r3, #32]	@ movhi
 5336              	.L343:
 5337              		.loc 1 3698 2
 5338 00be 00BF     		nop
 5339 00c0 1837     		adds	r7, r7, #24
 5340              	.LCFI205:
 5341              		.cfi_def_cfa_offset 8
 5342 00c2 BD46     		mov	sp, r7
 5343              	.LCFI206:
 5344              		.cfi_def_cfa_register 13
 5345              		@ sp needed
 5346 00c4 80BD     		pop	{r7, pc}
 5347              	.L345:
 5348 00c6 00BF     		.align	2
 5349              	.L344:
 5350 00c8 00000000 		.word	pxCurrentTCB
 5351              		.cfi_endproc
 5352              	.LFE44:
 5354              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5355              		.align	1
ARM GAS  /tmp/cc65XYwf.s 			page 163


 5356              		.syntax unified
 5357              		.thumb
 5358              		.thumb_func
 5359              		.fpu fpv4-sp-d16
 5361              	prvListTasksWithinSingleList:
 5362              	.LFB45:
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5363              		.loc 1 3706 2
 5364              		.cfi_startproc
 5365              		@ args = 0, pretend = 0, frame = 40
 5366              		@ frame_needed = 1, uses_anonymous_args = 0
 5367 0000 80B5     		push	{r7, lr}
 5368              	.LCFI207:
 5369              		.cfi_def_cfa_offset 8
 5370              		.cfi_offset 7, -8
 5371              		.cfi_offset 14, -4
 5372 0002 8AB0     		sub	sp, sp, #40
 5373              	.LCFI208:
 5374              		.cfi_def_cfa_offset 48
 5375 0004 00AF     		add	r7, sp, #0
 5376              	.LCFI209:
 5377              		.cfi_def_cfa_register 7
 5378 0006 F860     		str	r0, [r7, #12]
 5379 0008 B960     		str	r1, [r7, #8]
 5380 000a 1346     		mov	r3, r2
 5381 000c FB71     		strb	r3, [r7, #7]
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 5382              		.loc 1 3708 14
 5383 000e 0023     		movs	r3, #0
 5384 0010 7B62     		str	r3, [r7, #36]
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5385              		.loc 1 3710 7
 5386 0012 BB68     		ldr	r3, [r7, #8]
 5387 0014 1B68     		ldr	r3, [r3]
 5388              		.loc 1 3710 5
 5389 0016 002B     		cmp	r3, #0
 5390 0018 3FD0     		beq	.L347
 5391              	.LBB200:
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5392              		.loc 1 3712 4
 5393 001a BB68     		ldr	r3, [r7, #8]
 5394 001c 3B62     		str	r3, [r7, #32]
 5395 001e 3B6A     		ldr	r3, [r7, #32]
 5396 0020 5B68     		ldr	r3, [r3, #4]
 5397 0022 5A68     		ldr	r2, [r3, #4]
 5398 0024 3B6A     		ldr	r3, [r7, #32]
 5399 0026 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/cc65XYwf.s 			page 164


 5400 0028 3B6A     		ldr	r3, [r7, #32]
 5401 002a 5A68     		ldr	r2, [r3, #4]
 5402 002c 3B6A     		ldr	r3, [r7, #32]
 5403 002e 0833     		adds	r3, r3, #8
 5404 0030 9A42     		cmp	r2, r3
 5405 0032 04D1     		bne	.L348
 5406              		.loc 1 3712 4 is_stmt 0 discriminator 1
 5407 0034 3B6A     		ldr	r3, [r7, #32]
 5408 0036 5B68     		ldr	r3, [r3, #4]
 5409 0038 5A68     		ldr	r2, [r3, #4]
 5410 003a 3B6A     		ldr	r3, [r7, #32]
 5411 003c 5A60     		str	r2, [r3, #4]
 5412              	.L348:
 5413              		.loc 1 3712 4 discriminator 3
 5414 003e 3B6A     		ldr	r3, [r7, #32]
 5415 0040 5B68     		ldr	r3, [r3, #4]
 5416 0042 DB68     		ldr	r3, [r3, #12]
 5417 0044 FB61     		str	r3, [r7, #28]
 5418              	.L350:
 5419              	.LBE200:
 5420              	.LBB201:
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5421              		.loc 1 3720 5 is_stmt 1
 5422 0046 BB68     		ldr	r3, [r7, #8]
 5423 0048 BB61     		str	r3, [r7, #24]
 5424 004a BB69     		ldr	r3, [r7, #24]
 5425 004c 5B68     		ldr	r3, [r3, #4]
 5426 004e 5A68     		ldr	r2, [r3, #4]
 5427 0050 BB69     		ldr	r3, [r7, #24]
 5428 0052 5A60     		str	r2, [r3, #4]
 5429 0054 BB69     		ldr	r3, [r7, #24]
 5430 0056 5A68     		ldr	r2, [r3, #4]
 5431 0058 BB69     		ldr	r3, [r7, #24]
 5432 005a 0833     		adds	r3, r3, #8
 5433 005c 9A42     		cmp	r2, r3
 5434 005e 04D1     		bne	.L349
 5435              		.loc 1 3720 5 is_stmt 0 discriminator 1
 5436 0060 BB69     		ldr	r3, [r7, #24]
 5437 0062 5B68     		ldr	r3, [r3, #4]
 5438 0064 5A68     		ldr	r2, [r3, #4]
 5439 0066 BB69     		ldr	r3, [r7, #24]
 5440 0068 5A60     		str	r2, [r3, #4]
 5441              	.L349:
 5442              		.loc 1 3720 5 discriminator 3
 5443 006a BB69     		ldr	r3, [r7, #24]
 5444 006c 5B68     		ldr	r3, [r3, #4]
 5445 006e DB68     		ldr	r3, [r3, #12]
 5446 0070 7B61     		str	r3, [r7, #20]
 5447              	.LBE201:
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
ARM GAS  /tmp/cc65XYwf.s 			page 165


 5448              		.loc 1 3721 67 is_stmt 1 discriminator 3
 5449 0072 7A6A     		ldr	r2, [r7, #36]
 5450 0074 1346     		mov	r3, r2
 5451 0076 DB00     		lsls	r3, r3, #3
 5452 0078 1344     		add	r3, r3, r2
 5453 007a 9B00     		lsls	r3, r3, #2
 5454 007c 1A46     		mov	r2, r3
 5455              		.loc 1 3721 5 discriminator 3
 5456 007e FB68     		ldr	r3, [r7, #12]
 5457 0080 9918     		adds	r1, r3, r2
 5458 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5459 0084 0122     		movs	r2, #1
 5460 0086 7869     		ldr	r0, [r7, #20]
 5461 0088 FFF7FEFF 		bl	vTaskGetInfo
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5462              		.loc 1 3722 11 discriminator 3
 5463 008c 7B6A     		ldr	r3, [r7, #36]
 5464 008e 0133     		adds	r3, r3, #1
 5465 0090 7B62     		str	r3, [r7, #36]
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5466              		.loc 1 3723 4 discriminator 3
 5467 0092 7A69     		ldr	r2, [r7, #20]
 5468 0094 FB69     		ldr	r3, [r7, #28]
 5469 0096 9A42     		cmp	r2, r3
 5470 0098 D5D1     		bne	.L350
 5471              	.L347:
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 5472              		.loc 1 3730 10
 5473 009a 7B6A     		ldr	r3, [r7, #36]
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5474              		.loc 1 3731 2
 5475 009c 1846     		mov	r0, r3
 5476 009e 2837     		adds	r7, r7, #40
 5477              	.LCFI210:
 5478              		.cfi_def_cfa_offset 8
 5479 00a0 BD46     		mov	sp, r7
 5480              	.LCFI211:
 5481              		.cfi_def_cfa_register 13
 5482              		@ sp needed
 5483 00a2 80BD     		pop	{r7, pc}
 5484              		.cfi_endproc
 5485              	.LFE45:
 5487              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5488              		.align	1
 5489              		.syntax unified
 5490              		.thumb
 5491              		.thumb_func
 5492              		.fpu fpv4-sp-d16
 5494              	prvTaskCheckFreeStackSpace:
 5495              	.LFB46:
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 166


3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5496              		.loc 1 3739 2
 5497              		.cfi_startproc
 5498              		@ args = 0, pretend = 0, frame = 16
 5499              		@ frame_needed = 1, uses_anonymous_args = 0
 5500              		@ link register save eliminated.
 5501 0000 80B4     		push	{r7}
 5502              	.LCFI212:
 5503              		.cfi_def_cfa_offset 4
 5504              		.cfi_offset 7, -4
 5505 0002 85B0     		sub	sp, sp, #20
 5506              	.LCFI213:
 5507              		.cfi_def_cfa_offset 24
 5508 0004 00AF     		add	r7, sp, #0
 5509              	.LCFI214:
 5510              		.cfi_def_cfa_register 7
 5511 0006 7860     		str	r0, [r7, #4]
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 5512              		.loc 1 3740 11
 5513 0008 0023     		movs	r3, #0
 5514 000a FB60     		str	r3, [r7, #12]
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5515              		.loc 1 3742 8
 5516 000c 05E0     		b	.L353
 5517              	.L354:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 5518              		.loc 1 3744 17
 5519 000e 7B68     		ldr	r3, [r7, #4]
 5520 0010 0133     		adds	r3, r3, #1
 5521 0012 7B60     		str	r3, [r7, #4]
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 5522              		.loc 1 3745 11
 5523 0014 FB68     		ldr	r3, [r7, #12]
 5524 0016 0133     		adds	r3, r3, #1
 5525 0018 FB60     		str	r3, [r7, #12]
 5526              	.L353:
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5527              		.loc 1 3742 10
 5528 001a 7B68     		ldr	r3, [r7, #4]
 5529 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5530              		.loc 1 3742 8
 5531 001e A52B     		cmp	r3, #165
 5532 0020 F5D0     		beq	.L354
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 5533              		.loc 1 3748 11
 5534 0022 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc65XYwf.s 			page 167


 5535 0024 9B08     		lsrs	r3, r3, #2
 5536 0026 FB60     		str	r3, [r7, #12]
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 5537              		.loc 1 3750 10
 5538 0028 FB68     		ldr	r3, [r7, #12]
 5539 002a 9BB2     		uxth	r3, r3
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5540              		.loc 1 3751 2
 5541 002c 1846     		mov	r0, r3
 5542 002e 1437     		adds	r7, r7, #20
 5543              	.LCFI215:
 5544              		.cfi_def_cfa_offset 4
 5545 0030 BD46     		mov	sp, r7
 5546              	.LCFI216:
 5547              		.cfi_def_cfa_register 13
 5548              		@ sp needed
 5549 0032 5DF8047B 		ldr	r7, [sp], #4
 5550              	.LCFI217:
 5551              		.cfi_restore 7
 5552              		.cfi_def_cfa_offset 0
 5553 0036 7047     		bx	lr
 5554              		.cfi_endproc
 5555              	.LFE46:
 5557              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5558              		.align	1
 5559              		.global	uxTaskGetStackHighWaterMark
 5560              		.syntax unified
 5561              		.thumb
 5562              		.thumb_func
 5563              		.fpu fpv4-sp-d16
 5565              	uxTaskGetStackHighWaterMark:
 5566              	.LFB47:
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 168


3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5567              		.loc 1 3799 2
 5568              		.cfi_startproc
 5569              		@ args = 0, pretend = 0, frame = 24
 5570              		@ frame_needed = 1, uses_anonymous_args = 0
 5571 0000 80B5     		push	{r7, lr}
 5572              	.LCFI218:
 5573              		.cfi_def_cfa_offset 8
 5574              		.cfi_offset 7, -8
 5575              		.cfi_offset 14, -4
 5576 0002 86B0     		sub	sp, sp, #24
 5577              	.LCFI219:
 5578              		.cfi_def_cfa_offset 32
 5579 0004 00AF     		add	r7, sp, #0
 5580              	.LCFI220:
 5581              		.cfi_def_cfa_register 7
 5582 0006 7860     		str	r0, [r7, #4]
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5583              		.loc 1 3804 11
 5584 0008 7B68     		ldr	r3, [r7, #4]
 5585 000a 002B     		cmp	r3, #0
 5586 000c 02D1     		bne	.L357
 5587              		.loc 1 3804 11 is_stmt 0 discriminator 1
 5588 000e 094B     		ldr	r3, .L360
 5589 0010 1B68     		ldr	r3, [r3]
 5590 0012 00E0     		b	.L358
 5591              	.L357:
 5592              		.loc 1 3804 11 discriminator 2
 5593 0014 7B68     		ldr	r3, [r7, #4]
 5594              	.L358:
ARM GAS  /tmp/cc65XYwf.s 			page 169


 5595              		.loc 1 3804 9 is_stmt 1 discriminator 4
 5596 0016 7B61     		str	r3, [r7, #20]
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 5597              		.loc 1 3808 18 discriminator 4
 5598 0018 7B69     		ldr	r3, [r7, #20]
 5599 001a 1B6B     		ldr	r3, [r3, #48]
 5600 001c 3B61     		str	r3, [r7, #16]
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 5601              		.loc 1 3816 30 discriminator 4
 5602 001e 3869     		ldr	r0, [r7, #16]
 5603 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5604 0024 0346     		mov	r3, r0
 5605              		.loc 1 3816 12 discriminator 4
 5606 0026 FB60     		str	r3, [r7, #12]
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5607              		.loc 1 3818 10 discriminator 4
 5608 0028 FB68     		ldr	r3, [r7, #12]
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5609              		.loc 1 3819 2 discriminator 4
 5610 002a 1846     		mov	r0, r3
 5611 002c 1837     		adds	r7, r7, #24
 5612              	.LCFI221:
 5613              		.cfi_def_cfa_offset 8
 5614 002e BD46     		mov	sp, r7
 5615              	.LCFI222:
 5616              		.cfi_def_cfa_register 13
 5617              		@ sp needed
 5618 0030 80BD     		pop	{r7, pc}
 5619              	.L361:
 5620 0032 00BF     		.align	2
 5621              	.L360:
 5622 0034 00000000 		.word	pxCurrentTCB
 5623              		.cfi_endproc
 5624              	.LFE47:
 5626              		.section	.text.prvDeleteTCB,"ax",%progbits
 5627              		.align	1
 5628              		.syntax unified
 5629              		.thumb
 5630              		.thumb_func
 5631              		.fpu fpv4-sp-d16
 5633              	prvDeleteTCB:
 5634              	.LFB48:
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 170


3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5635              		.loc 1 3827 2
 5636              		.cfi_startproc
 5637              		@ args = 0, pretend = 0, frame = 16
 5638              		@ frame_needed = 1, uses_anonymous_args = 0
 5639 0000 80B5     		push	{r7, lr}
 5640              	.LCFI223:
 5641              		.cfi_def_cfa_offset 8
 5642              		.cfi_offset 7, -8
 5643              		.cfi_offset 14, -4
 5644 0002 84B0     		sub	sp, sp, #16
 5645              	.LCFI224:
 5646              		.cfi_def_cfa_offset 24
 5647 0004 00AF     		add	r7, sp, #0
 5648              	.LCFI225:
 5649              		.cfi_def_cfa_register 7
 5650 0006 7860     		str	r0, [r7, #4]
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 5651              		.loc 1 3853 13
 5652 0008 7B68     		ldr	r3, [r7, #4]
 5653 000a 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 5654              		.loc 1 3853 6
 5655 000e 002B     		cmp	r3, #0
 5656 0010 08D1     		bne	.L363
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 5657              		.loc 1 3857 21
ARM GAS  /tmp/cc65XYwf.s 			page 171


 5658 0012 7B68     		ldr	r3, [r7, #4]
 5659 0014 1B6B     		ldr	r3, [r3, #48]
 5660              		.loc 1 3857 5
 5661 0016 1846     		mov	r0, r3
 5662 0018 FFF7FEFF 		bl	vPortFree
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 5663              		.loc 1 3858 5
 5664 001c 7868     		ldr	r0, [r7, #4]
 5665 001e FFF7FEFF 		bl	vPortFree
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5666              		.loc 1 3875 2
 5667 0022 17E0     		b	.L367
 5668              	.L363:
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5669              		.loc 1 3860 18
 5670 0024 7B68     		ldr	r3, [r7, #4]
 5671 0026 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5672              		.loc 1 3860 11
 5673 002a 012B     		cmp	r3, #1
 5674 002c 03D1     		bne	.L365
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5675              		.loc 1 3864 5
 5676 002e 7868     		ldr	r0, [r7, #4]
 5677 0030 FFF7FEFF 		bl	vPortFree
 5678              		.loc 1 3875 2
 5679 0034 0EE0     		b	.L367
 5680              	.L365:
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5681              		.loc 1 3870 5
 5682 0036 7B68     		ldr	r3, [r7, #4]
 5683 0038 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 5684 003c 022B     		cmp	r3, #2
 5685 003e 09D0     		beq	.L367
 5686              	.LBB202:
 5687              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5688              		.loc 2 195 2 discriminator 1
 5689              		.syntax unified
 5690              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5691 0040 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cc65XYwf.s 			page 172


 5692 0044 83F31188 		msr basepri, r3											
 5693 0048 BFF36F8F 		isb														
 5694 004c BFF34F8F 		dsb														
 5695              	
 5696              	@ 0 "" 2
 5697              		.thumb
 5698              		.syntax unified
 5699 0050 FB60     		str	r3, [r7, #12]
 5700              	.L366:
 5701              	.LBE203:
 5702              	.LBE202:
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5703              		.loc 1 3870 5 discriminator 1
 5704 0052 FEE7     		b	.L366
 5705              	.L367:
 5706              		.loc 1 3875 2
 5707 0054 00BF     		nop
 5708 0056 1037     		adds	r7, r7, #16
 5709              	.LCFI226:
 5710              		.cfi_def_cfa_offset 8
 5711 0058 BD46     		mov	sp, r7
 5712              	.LCFI227:
 5713              		.cfi_def_cfa_register 13
 5714              		@ sp needed
 5715 005a 80BD     		pop	{r7, pc}
 5716              		.cfi_endproc
 5717              	.LFE48:
 5719              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 5720              		.align	1
 5721              		.syntax unified
 5722              		.thumb
 5723              		.thumb_func
 5724              		.fpu fpv4-sp-d16
 5726              	prvResetNextTaskUnblockTime:
 5727              	.LFB49:
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5728              		.loc 1 3881 1
 5729              		.cfi_startproc
 5730              		@ args = 0, pretend = 0, frame = 8
 5731              		@ frame_needed = 1, uses_anonymous_args = 0
 5732              		@ link register save eliminated.
 5733 0000 80B4     		push	{r7}
 5734              	.LCFI228:
 5735              		.cfi_def_cfa_offset 4
 5736              		.cfi_offset 7, -4
 5737 0002 83B0     		sub	sp, sp, #12
 5738              	.LCFI229:
 5739              		.cfi_def_cfa_offset 16
 5740 0004 00AF     		add	r7, sp, #0
 5741              	.LCFI230:
 5742              		.cfi_def_cfa_register 7
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
ARM GAS  /tmp/cc65XYwf.s 			page 173


3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5743              		.loc 1 3884 6
 5744 0006 0C4B     		ldr	r3, .L372
 5745 0008 1B68     		ldr	r3, [r3]
 5746 000a 1B68     		ldr	r3, [r3]
 5747              		.loc 1 3884 4
 5748 000c 002B     		cmp	r3, #0
 5749 000e 04D1     		bne	.L369
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 5750              		.loc 1 3890 24
 5751 0010 0A4B     		ldr	r3, .L372+4
 5752 0012 4FF0FF32 		mov	r2, #-1
 5753 0016 1A60     		str	r2, [r3]
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5754              		.loc 1 3901 1
 5755 0018 08E0     		b	.L371
 5756              	.L369:
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5757              		.loc 1 3898 15
 5758 001a 074B     		ldr	r3, .L372
 5759 001c 1B68     		ldr	r3, [r3]
 5760 001e DB68     		ldr	r3, [r3, #12]
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5761              		.loc 1 3898 13
 5762 0020 DB68     		ldr	r3, [r3, #12]
 5763 0022 7B60     		str	r3, [r7, #4]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5764              		.loc 1 3899 26
 5765 0024 7B68     		ldr	r3, [r7, #4]
 5766 0026 5B68     		ldr	r3, [r3, #4]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5767              		.loc 1 3899 24
 5768 0028 044A     		ldr	r2, .L372+4
 5769 002a 1360     		str	r3, [r2]
 5770              	.L371:
 5771              		.loc 1 3901 1
 5772 002c 00BF     		nop
 5773 002e 0C37     		adds	r7, r7, #12
 5774              	.LCFI231:
 5775              		.cfi_def_cfa_offset 4
 5776 0030 BD46     		mov	sp, r7
ARM GAS  /tmp/cc65XYwf.s 			page 174


 5777              	.LCFI232:
 5778              		.cfi_def_cfa_register 13
 5779              		@ sp needed
 5780 0032 5DF8047B 		ldr	r7, [sp], #4
 5781              	.LCFI233:
 5782              		.cfi_restore 7
 5783              		.cfi_def_cfa_offset 0
 5784 0036 7047     		bx	lr
 5785              	.L373:
 5786              		.align	2
 5787              	.L372:
 5788 0038 00000000 		.word	pxDelayedTaskList
 5789 003c 00000000 		.word	xNextTaskUnblockTime
 5790              		.cfi_endproc
 5791              	.LFE49:
 5793              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5794              		.align	1
 5795              		.global	xTaskGetCurrentTaskHandle
 5796              		.syntax unified
 5797              		.thumb
 5798              		.thumb_func
 5799              		.fpu fpv4-sp-d16
 5801              	xTaskGetCurrentTaskHandle:
 5802              	.LFB50:
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5803              		.loc 1 3907 2
 5804              		.cfi_startproc
 5805              		@ args = 0, pretend = 0, frame = 8
 5806              		@ frame_needed = 1, uses_anonymous_args = 0
 5807              		@ link register save eliminated.
 5808 0000 80B4     		push	{r7}
 5809              	.LCFI234:
 5810              		.cfi_def_cfa_offset 4
 5811              		.cfi_offset 7, -4
 5812 0002 83B0     		sub	sp, sp, #12
 5813              	.LCFI235:
 5814              		.cfi_def_cfa_offset 16
 5815 0004 00AF     		add	r7, sp, #0
 5816              	.LCFI236:
 5817              		.cfi_def_cfa_register 7
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 5818              		.loc 1 3913 11
 5819 0006 054B     		ldr	r3, .L376
 5820 0008 1B68     		ldr	r3, [r3]
 5821 000a 7B60     		str	r3, [r7, #4]
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
ARM GAS  /tmp/cc65XYwf.s 			page 175


 5822              		.loc 1 3915 10
 5823 000c 7B68     		ldr	r3, [r7, #4]
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5824              		.loc 1 3916 2
 5825 000e 1846     		mov	r0, r3
 5826 0010 0C37     		adds	r7, r7, #12
 5827              	.LCFI237:
 5828              		.cfi_def_cfa_offset 4
 5829 0012 BD46     		mov	sp, r7
 5830              	.LCFI238:
 5831              		.cfi_def_cfa_register 13
 5832              		@ sp needed
 5833 0014 5DF8047B 		ldr	r7, [sp], #4
 5834              	.LCFI239:
 5835              		.cfi_restore 7
 5836              		.cfi_def_cfa_offset 0
 5837 0018 7047     		bx	lr
 5838              	.L377:
 5839 001a 00BF     		.align	2
 5840              	.L376:
 5841 001c 00000000 		.word	pxCurrentTCB
 5842              		.cfi_endproc
 5843              	.LFE50:
 5845              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5846              		.align	1
 5847              		.global	xTaskGetSchedulerState
 5848              		.syntax unified
 5849              		.thumb
 5850              		.thumb_func
 5851              		.fpu fpv4-sp-d16
 5853              	xTaskGetSchedulerState:
 5854              	.LFB51:
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5855              		.loc 1 3924 2
 5856              		.cfi_startproc
 5857              		@ args = 0, pretend = 0, frame = 8
 5858              		@ frame_needed = 1, uses_anonymous_args = 0
 5859              		@ link register save eliminated.
 5860 0000 80B4     		push	{r7}
 5861              	.LCFI240:
 5862              		.cfi_def_cfa_offset 4
 5863              		.cfi_offset 7, -4
 5864 0002 83B0     		sub	sp, sp, #12
 5865              	.LCFI241:
 5866              		.cfi_def_cfa_offset 16
 5867 0004 00AF     		add	r7, sp, #0
 5868              	.LCFI242:
 5869              		.cfi_def_cfa_register 7
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 176


3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 5870              		.loc 1 3927 25
 5871 0006 0B4B     		ldr	r3, .L383
 5872 0008 1B68     		ldr	r3, [r3]
 5873              		.loc 1 3927 5
 5874 000a 002B     		cmp	r3, #0
 5875 000c 02D1     		bne	.L379
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 5876              		.loc 1 3929 12
 5877 000e 0123     		movs	r3, #1
 5878 0010 7B60     		str	r3, [r7, #4]
 5879 0012 08E0     		b	.L380
 5880              	.L379:
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5881              		.loc 1 3933 29
 5882 0014 084B     		ldr	r3, .L383+4
 5883 0016 1B68     		ldr	r3, [r3]
 5884              		.loc 1 3933 6
 5885 0018 002B     		cmp	r3, #0
 5886 001a 02D1     		bne	.L381
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 5887              		.loc 1 3935 13
 5888 001c 0223     		movs	r3, #2
 5889 001e 7B60     		str	r3, [r7, #4]
 5890 0020 01E0     		b	.L380
 5891              	.L381:
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 5892              		.loc 1 3939 13
 5893 0022 0023     		movs	r3, #0
 5894 0024 7B60     		str	r3, [r7, #4]
 5895              	.L380:
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5896              		.loc 1 3943 10
 5897 0026 7B68     		ldr	r3, [r7, #4]
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5898              		.loc 1 3944 2
 5899 0028 1846     		mov	r0, r3
 5900 002a 0C37     		adds	r7, r7, #12
 5901              	.LCFI243:
 5902              		.cfi_def_cfa_offset 4
 5903 002c BD46     		mov	sp, r7
 5904              	.LCFI244:
 5905              		.cfi_def_cfa_register 13
 5906              		@ sp needed
 5907 002e 5DF8047B 		ldr	r7, [sp], #4
 5908              	.LCFI245:
ARM GAS  /tmp/cc65XYwf.s 			page 177


 5909              		.cfi_restore 7
 5910              		.cfi_def_cfa_offset 0
 5911 0032 7047     		bx	lr
 5912              	.L384:
 5913              		.align	2
 5914              	.L383:
 5915 0034 00000000 		.word	xSchedulerRunning
 5916 0038 00000000 		.word	uxSchedulerSuspended
 5917              		.cfi_endproc
 5918              	.LFE51:
 5920              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 5921              		.align	1
 5922              		.global	xTaskPriorityInherit
 5923              		.syntax unified
 5924              		.thumb
 5925              		.thumb_func
 5926              		.fpu fpv4-sp-d16
 5928              	xTaskPriorityInherit:
 5929              	.LFB52:
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5930              		.loc 1 3952 2
 5931              		.cfi_startproc
 5932              		@ args = 0, pretend = 0, frame = 16
 5933              		@ frame_needed = 1, uses_anonymous_args = 0
 5934 0000 80B5     		push	{r7, lr}
 5935              	.LCFI246:
 5936              		.cfi_def_cfa_offset 8
 5937              		.cfi_offset 7, -8
 5938              		.cfi_offset 14, -4
 5939 0002 84B0     		sub	sp, sp, #16
 5940              	.LCFI247:
 5941              		.cfi_def_cfa_offset 24
 5942 0004 00AF     		add	r7, sp, #0
 5943              	.LCFI248:
 5944              		.cfi_def_cfa_register 7
 5945 0006 7860     		str	r0, [r7, #4]
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 5946              		.loc 1 3953 16
 5947 0008 7B68     		ldr	r3, [r7, #4]
 5948 000a BB60     		str	r3, [r7, #8]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5949              		.loc 1 3954 13
 5950 000c 0023     		movs	r3, #0
 5951 000e FB60     		str	r3, [r7, #12]
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5952              		.loc 1 3959 5
ARM GAS  /tmp/cc65XYwf.s 			page 178


 5953 0010 7B68     		ldr	r3, [r7, #4]
 5954 0012 002B     		cmp	r3, #0
 5955 0014 51D0     		beq	.L386
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 5956              		.loc 1 3964 24
 5957 0016 BB68     		ldr	r3, [r7, #8]
 5958 0018 DA6A     		ldr	r2, [r3, #44]
 5959              		.loc 1 3964 51
 5960 001a 2A4B     		ldr	r3, .L393
 5961 001c 1B68     		ldr	r3, [r3]
 5962 001e DB6A     		ldr	r3, [r3, #44]
 5963              		.loc 1 3964 6
 5964 0020 9A42     		cmp	r2, r3
 5965 0022 41D2     		bcs	.L387
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 5966              		.loc 1 3969 11
 5967 0024 BB68     		ldr	r3, [r7, #8]
 5968 0026 9B69     		ldr	r3, [r3, #24]
 5969              		.loc 1 3969 7
 5970 0028 002B     		cmp	r3, #0
 5971 002a 06DB     		blt	.L388
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 5972              		.loc 1 3971 6
 5973 002c 254B     		ldr	r3, .L393
 5974 002e 1B68     		ldr	r3, [r3]
 5975 0030 DB6A     		ldr	r3, [r3, #44]
 5976 0032 C3F13802 		rsb	r2, r3, #56
 5977 0036 BB68     		ldr	r3, [r7, #8]
 5978 0038 9A61     		str	r2, [r3, #24]
 5979              	.L388:
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 5980              		.loc 1 3980 9
 5981 003a BB68     		ldr	r3, [r7, #8]
 5982 003c 5969     		ldr	r1, [r3, #20]
 5983 003e BB68     		ldr	r3, [r7, #8]
 5984 0040 DA6A     		ldr	r2, [r3, #44]
 5985 0042 1346     		mov	r3, r2
 5986 0044 9B00     		lsls	r3, r3, #2
 5987 0046 1344     		add	r3, r3, r2
 5988 0048 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/cc65XYwf.s 			page 179


 5989 004a 1F4A     		ldr	r2, .L393+4
 5990 004c 1344     		add	r3, r3, r2
 5991              		.loc 1 3980 7
 5992 004e 9942     		cmp	r1, r3
 5993 0050 22D1     		bne	.L389
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5994              		.loc 1 3982 10
 5995 0052 BB68     		ldr	r3, [r7, #8]
 5996 0054 0433     		adds	r3, r3, #4
 5997 0056 1846     		mov	r0, r3
 5998 0058 FFF7FEFF 		bl	uxListRemove
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 5999              		.loc 1 3992 49
 6000 005c 194B     		ldr	r3, .L393
 6001 005e 1B68     		ldr	r3, [r3]
 6002 0060 DA6A     		ldr	r2, [r3, #44]
 6003              		.loc 1 3992 35
 6004 0062 BB68     		ldr	r3, [r7, #8]
 6005 0064 DA62     		str	r2, [r3, #44]
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6006              		.loc 1 3993 6
 6007 0066 BB68     		ldr	r3, [r7, #8]
 6008 0068 DA6A     		ldr	r2, [r3, #44]
 6009 006a 184B     		ldr	r3, .L393+8
 6010 006c 1B68     		ldr	r3, [r3]
 6011 006e 9A42     		cmp	r2, r3
 6012 0070 03D9     		bls	.L390
 6013              		.loc 1 3993 6 is_stmt 0 discriminator 1
 6014 0072 BB68     		ldr	r3, [r7, #8]
 6015 0074 DB6A     		ldr	r3, [r3, #44]
 6016 0076 154A     		ldr	r2, .L393+8
 6017 0078 1360     		str	r3, [r2]
 6018              	.L390:
 6019              		.loc 1 3993 6 discriminator 3
 6020 007a BB68     		ldr	r3, [r7, #8]
 6021 007c DA6A     		ldr	r2, [r3, #44]
 6022 007e 1346     		mov	r3, r2
 6023 0080 9B00     		lsls	r3, r3, #2
 6024 0082 1344     		add	r3, r3, r2
 6025 0084 9B00     		lsls	r3, r3, #2
 6026 0086 104A     		ldr	r2, .L393+4
 6027 0088 1A44     		add	r2, r2, r3
 6028 008a BB68     		ldr	r3, [r7, #8]
 6029 008c 0433     		adds	r3, r3, #4
 6030 008e 1946     		mov	r1, r3
 6031 0090 1046     		mov	r0, r2
 6032 0092 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  /tmp/cc65XYwf.s 			page 180


 6033 0096 04E0     		b	.L391
 6034              	.L389:
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6035              		.loc 1 3998 49 is_stmt 1
 6036 0098 0A4B     		ldr	r3, .L393
 6037 009a 1B68     		ldr	r3, [r3]
 6038 009c DA6A     		ldr	r2, [r3, #44]
 6039              		.loc 1 3998 35
 6040 009e BB68     		ldr	r3, [r7, #8]
 6041 00a0 DA62     		str	r2, [r3, #44]
 6042              	.L391:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6043              		.loc 1 4004 13
 6044 00a2 0123     		movs	r3, #1
 6045 00a4 FB60     		str	r3, [r7, #12]
 6046 00a6 08E0     		b	.L386
 6047              	.L387:
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6048              		.loc 1 4008 25
 6049 00a8 BB68     		ldr	r3, [r7, #8]
 6050 00aa DA6C     		ldr	r2, [r3, #76]
 6051              		.loc 1 4008 56
 6052 00ac 054B     		ldr	r3, .L393
 6053 00ae 1B68     		ldr	r3, [r3]
 6054 00b0 DB6A     		ldr	r3, [r3, #44]
 6055              		.loc 1 4008 7
 6056 00b2 9A42     		cmp	r2, r3
 6057 00b4 01D2     		bcs	.L386
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6058              		.loc 1 4017 14
 6059 00b6 0123     		movs	r3, #1
 6060 00b8 FB60     		str	r3, [r7, #12]
 6061              	.L386:
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cc65XYwf.s 			page 181


4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6062              		.loc 1 4030 10
 6063 00ba FB68     		ldr	r3, [r7, #12]
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6064              		.loc 1 4031 2
 6065 00bc 1846     		mov	r0, r3
 6066 00be 1037     		adds	r7, r7, #16
 6067              	.LCFI249:
 6068              		.cfi_def_cfa_offset 8
 6069 00c0 BD46     		mov	sp, r7
 6070              	.LCFI250:
 6071              		.cfi_def_cfa_register 13
 6072              		@ sp needed
 6073 00c2 80BD     		pop	{r7, pc}
 6074              	.L394:
 6075              		.align	2
 6076              	.L393:
 6077 00c4 00000000 		.word	pxCurrentTCB
 6078 00c8 00000000 		.word	pxReadyTasksLists
 6079 00cc 00000000 		.word	uxTopReadyPriority
 6080              		.cfi_endproc
 6081              	.LFE52:
 6083              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6084              		.align	1
 6085              		.global	xTaskPriorityDisinherit
 6086              		.syntax unified
 6087              		.thumb
 6088              		.thumb_func
 6089              		.fpu fpv4-sp-d16
 6091              	xTaskPriorityDisinherit:
 6092              	.LFB53:
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6093              		.loc 1 4039 2
 6094              		.cfi_startproc
 6095              		@ args = 0, pretend = 0, frame = 24
 6096              		@ frame_needed = 1, uses_anonymous_args = 0
 6097 0000 80B5     		push	{r7, lr}
 6098              	.LCFI251:
 6099              		.cfi_def_cfa_offset 8
 6100              		.cfi_offset 7, -8
 6101              		.cfi_offset 14, -4
 6102 0002 86B0     		sub	sp, sp, #24
ARM GAS  /tmp/cc65XYwf.s 			page 182


 6103              	.LCFI252:
 6104              		.cfi_def_cfa_offset 32
 6105 0004 00AF     		add	r7, sp, #0
 6106              	.LCFI253:
 6107              		.cfi_def_cfa_register 7
 6108 0006 7860     		str	r0, [r7, #4]
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6109              		.loc 1 4040 16
 6110 0008 7B68     		ldr	r3, [r7, #4]
 6111 000a 3B61     		str	r3, [r7, #16]
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6112              		.loc 1 4041 13
 6113 000c 0023     		movs	r3, #0
 6114 000e 7B61     		str	r3, [r7, #20]
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6115              		.loc 1 4043 5
 6116 0010 7B68     		ldr	r3, [r7, #4]
 6117 0012 002B     		cmp	r3, #0
 6118 0014 54D0     		beq	.L396
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6119              		.loc 1 4049 4
 6120 0016 2D4B     		ldr	r3, .L403
 6121 0018 1B68     		ldr	r3, [r3]
 6122 001a 3A69     		ldr	r2, [r7, #16]
 6123 001c 9A42     		cmp	r2, r3
 6124 001e 09D0     		beq	.L397
 6125              	.LBB204:
 6126              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6127              		.loc 2 195 2 discriminator 1
 6128              		.syntax unified
 6129              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6130 0020 4FF05003 			mov r3, #80												
 6131 0024 83F31188 		msr basepri, r3											
 6132 0028 BFF36F8F 		isb														
 6133 002c BFF34F8F 		dsb														
 6134              	
 6135              	@ 0 "" 2
 6136              		.thumb
 6137              		.syntax unified
 6138 0030 FB60     		str	r3, [r7, #12]
 6139              	.L398:
 6140              	.LBE205:
 6141              	.LBE204:
 6142              		.loc 1 4049 4 discriminator 1
 6143 0032 FEE7     		b	.L398
 6144              	.L397:
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6145              		.loc 1 4050 4
 6146 0034 3B69     		ldr	r3, [r7, #16]
 6147 0036 1B6D     		ldr	r3, [r3, #80]
ARM GAS  /tmp/cc65XYwf.s 			page 183


 6148 0038 002B     		cmp	r3, #0
 6149 003a 09D1     		bne	.L399
 6150              	.LBB206:
 6151              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6152              		.loc 2 195 2 discriminator 1
 6153              		.syntax unified
 6154              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6155 003c 4FF05003 			mov r3, #80												
 6156 0040 83F31188 		msr basepri, r3											
 6157 0044 BFF36F8F 		isb														
 6158 0048 BFF34F8F 		dsb														
 6159              	
 6160              	@ 0 "" 2
 6161              		.thumb
 6162              		.syntax unified
 6163 004c BB60     		str	r3, [r7, #8]
 6164              	.L400:
 6165              	.LBE207:
 6166              	.LBE206:
 6167              		.loc 1 4050 4 discriminator 2
 6168 004e FEE7     		b	.L400
 6169              	.L399:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6170              		.loc 1 4051 11
 6171 0050 3B69     		ldr	r3, [r7, #16]
 6172 0052 1B6D     		ldr	r3, [r3, #80]
 6173              		.loc 1 4051 28
 6174 0054 5A1E     		subs	r2, r3, #1
 6175 0056 3B69     		ldr	r3, [r7, #16]
 6176 0058 1A65     		str	r2, [r3, #80]
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6177              		.loc 1 4055 13
 6178 005a 3B69     		ldr	r3, [r7, #16]
 6179 005c DA6A     		ldr	r2, [r3, #44]
 6180              		.loc 1 4055 34
 6181 005e 3B69     		ldr	r3, [r7, #16]
 6182 0060 DB6C     		ldr	r3, [r3, #76]
 6183              		.loc 1 4055 6
 6184 0062 9A42     		cmp	r2, r3
 6185 0064 2CD0     		beq	.L396
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6186              		.loc 1 4058 14
 6187 0066 3B69     		ldr	r3, [r7, #16]
 6188 0068 1B6D     		ldr	r3, [r3, #80]
 6189              		.loc 1 4058 7
 6190 006a 002B     		cmp	r3, #0
 6191 006c 28D1     		bne	.L396
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
ARM GAS  /tmp/cc65XYwf.s 			page 184


4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6192              		.loc 1 4065 10
 6193 006e 3B69     		ldr	r3, [r7, #16]
 6194 0070 0433     		adds	r3, r3, #4
 6195 0072 1846     		mov	r0, r3
 6196 0074 FFF7FEFF 		bl	uxListRemove
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6197              		.loc 1 4077 31
 6198 0078 3B69     		ldr	r3, [r7, #16]
 6199 007a DA6C     		ldr	r2, [r3, #76]
 6200              		.loc 1 4077 24
 6201 007c 3B69     		ldr	r3, [r7, #16]
 6202 007e DA62     		str	r2, [r3, #44]
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6203              		.loc 1 4082 6
 6204 0080 3B69     		ldr	r3, [r7, #16]
 6205 0082 DB6A     		ldr	r3, [r3, #44]
 6206 0084 C3F13802 		rsb	r2, r3, #56
 6207 0088 3B69     		ldr	r3, [r7, #16]
 6208 008a 9A61     		str	r2, [r3, #24]
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6209              		.loc 1 4083 6
 6210 008c 3B69     		ldr	r3, [r7, #16]
 6211 008e DA6A     		ldr	r2, [r3, #44]
 6212 0090 0F4B     		ldr	r3, .L403+4
 6213 0092 1B68     		ldr	r3, [r3]
 6214 0094 9A42     		cmp	r2, r3
 6215 0096 03D9     		bls	.L401
 6216              		.loc 1 4083 6 is_stmt 0 discriminator 1
 6217 0098 3B69     		ldr	r3, [r7, #16]
 6218 009a DB6A     		ldr	r3, [r3, #44]
 6219 009c 0C4A     		ldr	r2, .L403+4
 6220 009e 1360     		str	r3, [r2]
 6221              	.L401:
 6222              		.loc 1 4083 6 discriminator 3
 6223 00a0 3B69     		ldr	r3, [r7, #16]
 6224 00a2 DA6A     		ldr	r2, [r3, #44]
 6225 00a4 1346     		mov	r3, r2
 6226 00a6 9B00     		lsls	r3, r3, #2
 6227 00a8 1344     		add	r3, r3, r2
ARM GAS  /tmp/cc65XYwf.s 			page 185


 6228 00aa 9B00     		lsls	r3, r3, #2
 6229 00ac 094A     		ldr	r2, .L403+8
 6230 00ae 1A44     		add	r2, r2, r3
 6231 00b0 3B69     		ldr	r3, [r7, #16]
 6232 00b2 0433     		adds	r3, r3, #4
 6233 00b4 1946     		mov	r1, r3
 6234 00b6 1046     		mov	r0, r2
 6235 00b8 FFF7FEFF 		bl	vListInsertEnd
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6236              		.loc 1 4093 14 is_stmt 1 discriminator 3
 6237 00bc 0123     		movs	r3, #1
 6238 00be 7B61     		str	r3, [r7, #20]
 6239              	.L396:
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6240              		.loc 1 4110 10
 6241 00c0 7B69     		ldr	r3, [r7, #20]
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6242              		.loc 1 4111 2
 6243 00c2 1846     		mov	r0, r3
 6244 00c4 1837     		adds	r7, r7, #24
 6245              	.LCFI254:
 6246              		.cfi_def_cfa_offset 8
 6247 00c6 BD46     		mov	sp, r7
 6248              	.LCFI255:
 6249              		.cfi_def_cfa_register 13
 6250              		@ sp needed
 6251 00c8 80BD     		pop	{r7, pc}
 6252              	.L404:
 6253 00ca 00BF     		.align	2
 6254              	.L403:
 6255 00cc 00000000 		.word	pxCurrentTCB
 6256 00d0 00000000 		.word	uxTopReadyPriority
ARM GAS  /tmp/cc65XYwf.s 			page 186


 6257 00d4 00000000 		.word	pxReadyTasksLists
 6258              		.cfi_endproc
 6259              	.LFE53:
 6261              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6262              		.align	1
 6263              		.global	vTaskPriorityDisinheritAfterTimeout
 6264              		.syntax unified
 6265              		.thumb
 6266              		.thumb_func
 6267              		.fpu fpv4-sp-d16
 6269              	vTaskPriorityDisinheritAfterTimeout:
 6270              	.LFB54:
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6271              		.loc 1 4119 2
 6272              		.cfi_startproc
 6273              		@ args = 0, pretend = 0, frame = 32
 6274              		@ frame_needed = 1, uses_anonymous_args = 0
 6275 0000 80B5     		push	{r7, lr}
 6276              	.LCFI256:
 6277              		.cfi_def_cfa_offset 8
 6278              		.cfi_offset 7, -8
 6279              		.cfi_offset 14, -4
 6280 0002 88B0     		sub	sp, sp, #32
 6281              	.LCFI257:
 6282              		.cfi_def_cfa_offset 40
 6283 0004 00AF     		add	r7, sp, #0
 6284              	.LCFI258:
 6285              		.cfi_def_cfa_register 7
 6286 0006 7860     		str	r0, [r7, #4]
 6287 0008 3960     		str	r1, [r7]
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6288              		.loc 1 4120 16
 6289 000a 7B68     		ldr	r3, [r7, #4]
 6290 000c BB61     		str	r3, [r7, #24]
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6291              		.loc 1 4122 20
 6292 000e 0123     		movs	r3, #1
 6293 0010 7B61     		str	r3, [r7, #20]
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6294              		.loc 1 4124 5
 6295 0012 7B68     		ldr	r3, [r7, #4]
 6296 0014 002B     		cmp	r3, #0
 6297 0016 68D0     		beq	.L415
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6298              		.loc 1 4128 4
ARM GAS  /tmp/cc65XYwf.s 			page 187


 6299 0018 BB69     		ldr	r3, [r7, #24]
 6300 001a 1B6D     		ldr	r3, [r3, #80]
 6301 001c 002B     		cmp	r3, #0
 6302 001e 09D1     		bne	.L407
 6303              	.LBB208:
 6304              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6305              		.loc 2 195 2 discriminator 1
 6306              		.syntax unified
 6307              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6308 0020 4FF05003 			mov r3, #80												
 6309 0024 83F31188 		msr basepri, r3											
 6310 0028 BFF36F8F 		isb														
 6311 002c BFF34F8F 		dsb														
 6312              	
 6313              	@ 0 "" 2
 6314              		.thumb
 6315              		.syntax unified
 6316 0030 FB60     		str	r3, [r7, #12]
 6317              	.L408:
 6318              	.LBE209:
 6319              	.LBE208:
 6320              		.loc 1 4128 4 discriminator 1
 6321 0032 FEE7     		b	.L408
 6322              	.L407:
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6323              		.loc 1 4134 13
 6324 0034 BB69     		ldr	r3, [r7, #24]
 6325 0036 DB6C     		ldr	r3, [r3, #76]
 6326              		.loc 1 4134 6
 6327 0038 3A68     		ldr	r2, [r7]
 6328 003a 9A42     		cmp	r2, r3
 6329 003c 02D9     		bls	.L409
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6330              		.loc 1 4136 21
 6331 003e 3B68     		ldr	r3, [r7]
 6332 0040 FB61     		str	r3, [r7, #28]
 6333 0042 02E0     		b	.L410
 6334              	.L409:
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 6335              		.loc 1 4140 21
 6336 0044 BB69     		ldr	r3, [r7, #24]
 6337 0046 DB6C     		ldr	r3, [r3, #76]
 6338 0048 FB61     		str	r3, [r7, #28]
 6339              	.L410:
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
ARM GAS  /tmp/cc65XYwf.s 			page 188


4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 6340              		.loc 1 4144 13
 6341 004a BB69     		ldr	r3, [r7, #24]
 6342 004c DB6A     		ldr	r3, [r3, #44]
 6343              		.loc 1 4144 6
 6344 004e FA69     		ldr	r2, [r7, #28]
 6345 0050 9A42     		cmp	r2, r3
 6346 0052 4AD0     		beq	.L415
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6347              		.loc 1 4150 14
 6348 0054 BB69     		ldr	r3, [r7, #24]
 6349 0056 1B6D     		ldr	r3, [r3, #80]
 6350              		.loc 1 4150 7
 6351 0058 7A69     		ldr	r2, [r7, #20]
 6352 005a 9A42     		cmp	r2, r3
 6353 005c 45D1     		bne	.L415
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 6354              		.loc 1 4155 6
 6355 005e 254B     		ldr	r3, .L416
 6356 0060 1B68     		ldr	r3, [r3]
 6357 0062 BA69     		ldr	r2, [r7, #24]
 6358 0064 9A42     		cmp	r2, r3
 6359 0066 09D1     		bne	.L411
 6360              	.LBB210:
 6361              	.LBB211:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6362              		.loc 2 195 2 discriminator 1
 6363              		.syntax unified
 6364              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6365 0068 4FF05003 			mov r3, #80												
 6366 006c 83F31188 		msr basepri, r3											
 6367 0070 BFF36F8F 		isb														
 6368 0074 BFF34F8F 		dsb														
 6369              	
 6370              	@ 0 "" 2
 6371              		.thumb
 6372              		.syntax unified
 6373 0078 BB60     		str	r3, [r7, #8]
 6374              	.L412:
 6375              	.LBE211:
 6376              	.LBE210:
 6377              		.loc 1 4155 6 discriminator 2
 6378 007a FEE7     		b	.L412
 6379              	.L411:
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
ARM GAS  /tmp/cc65XYwf.s 			page 189


4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6380              		.loc 1 4161 28
 6381 007c BB69     		ldr	r3, [r7, #24]
 6382 007e DB6A     		ldr	r3, [r3, #44]
 6383 0080 3B61     		str	r3, [r7, #16]
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6384              		.loc 1 4162 24
 6385 0082 BB69     		ldr	r3, [r7, #24]
 6386 0084 FA69     		ldr	r2, [r7, #28]
 6387 0086 DA62     		str	r2, [r3, #44]
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6388              		.loc 1 4166 12
 6389 0088 BB69     		ldr	r3, [r7, #24]
 6390 008a 9B69     		ldr	r3, [r3, #24]
 6391              		.loc 1 4166 8
 6392 008c 002B     		cmp	r3, #0
 6393 008e 04DB     		blt	.L413
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6394              		.loc 1 4168 7
 6395 0090 FB69     		ldr	r3, [r7, #28]
 6396 0092 C3F13802 		rsb	r2, r3, #56
 6397 0096 BB69     		ldr	r3, [r7, #24]
 6398 0098 9A61     		str	r2, [r3, #24]
 6399              	.L413:
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6400              		.loc 1 4181 10
 6401 009a BB69     		ldr	r3, [r7, #24]
 6402 009c 5969     		ldr	r1, [r3, #20]
 6403 009e 3A69     		ldr	r2, [r7, #16]
 6404 00a0 1346     		mov	r3, r2
 6405 00a2 9B00     		lsls	r3, r3, #2
 6406 00a4 1344     		add	r3, r3, r2
 6407 00a6 9B00     		lsls	r3, r3, #2
 6408 00a8 134A     		ldr	r2, .L416+4
 6409 00aa 1344     		add	r3, r3, r2
 6410              		.loc 1 4181 8
 6411 00ac 9942     		cmp	r1, r3
 6412 00ae 1CD1     		bne	.L415
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
ARM GAS  /tmp/cc65XYwf.s 			page 190


 6413              		.loc 1 4183 11
 6414 00b0 BB69     		ldr	r3, [r7, #24]
 6415 00b2 0433     		adds	r3, r3, #4
 6416 00b4 1846     		mov	r0, r3
 6417 00b6 FFF7FEFF 		bl	uxListRemove
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6418              		.loc 1 4192 7
 6419 00ba BB69     		ldr	r3, [r7, #24]
 6420 00bc DA6A     		ldr	r2, [r3, #44]
 6421 00be 0F4B     		ldr	r3, .L416+8
 6422 00c0 1B68     		ldr	r3, [r3]
 6423 00c2 9A42     		cmp	r2, r3
 6424 00c4 03D9     		bls	.L414
 6425              		.loc 1 4192 7 is_stmt 0 discriminator 1
 6426 00c6 BB69     		ldr	r3, [r7, #24]
 6427 00c8 DB6A     		ldr	r3, [r3, #44]
 6428 00ca 0C4A     		ldr	r2, .L416+8
 6429 00cc 1360     		str	r3, [r2]
 6430              	.L414:
 6431              		.loc 1 4192 7 discriminator 3
 6432 00ce BB69     		ldr	r3, [r7, #24]
 6433 00d0 DA6A     		ldr	r2, [r3, #44]
 6434 00d2 1346     		mov	r3, r2
 6435 00d4 9B00     		lsls	r3, r3, #2
 6436 00d6 1344     		add	r3, r3, r2
 6437 00d8 9B00     		lsls	r3, r3, #2
 6438 00da 074A     		ldr	r2, .L416+4
 6439 00dc 1A44     		add	r2, r2, r3
 6440 00de BB69     		ldr	r3, [r7, #24]
 6441 00e0 0433     		adds	r3, r3, #4
 6442 00e2 1946     		mov	r1, r3
 6443 00e4 1046     		mov	r0, r2
 6444 00e6 FFF7FEFF 		bl	vListInsertEnd
 6445              	.L415:
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cc65XYwf.s 			page 191


4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6446              		.loc 1 4213 2 is_stmt 1
 6447 00ea 00BF     		nop
 6448 00ec 2037     		adds	r7, r7, #32
 6449              	.LCFI259:
 6450              		.cfi_def_cfa_offset 8
 6451 00ee BD46     		mov	sp, r7
 6452              	.LCFI260:
 6453              		.cfi_def_cfa_register 13
 6454              		@ sp needed
 6455 00f0 80BD     		pop	{r7, pc}
 6456              	.L417:
 6457 00f2 00BF     		.align	2
 6458              	.L416:
 6459 00f4 00000000 		.word	pxCurrentTCB
 6460 00f8 00000000 		.word	pxReadyTasksLists
 6461 00fc 00000000 		.word	uxTopReadyPriority
 6462              		.cfi_endproc
 6463              	.LFE54:
 6465              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6466              		.align	1
 6467              		.global	uxTaskResetEventItemValue
 6468              		.syntax unified
 6469              		.thumb
 6470              		.thumb_func
 6471              		.fpu fpv4-sp-d16
 6473              	uxTaskResetEventItemValue:
 6474              	.LFB55:
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cc65XYwf.s 			page 192


4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
ARM GAS  /tmp/cc65XYwf.s 			page 193


4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc65XYwf.s 			page 194


4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
ARM GAS  /tmp/cc65XYwf.s 			page 195


4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
ARM GAS  /tmp/cc65XYwf.s 			page 196


4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
ARM GAS  /tmp/cc65XYwf.s 			page 197


4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6475              		.loc 1 4534 1
 6476              		.cfi_startproc
 6477              		@ args = 0, pretend = 0, frame = 8
 6478              		@ frame_needed = 1, uses_anonymous_args = 0
 6479              		@ link register save eliminated.
 6480 0000 80B4     		push	{r7}
 6481              	.LCFI261:
 6482              		.cfi_def_cfa_offset 4
 6483              		.cfi_offset 7, -4
 6484 0002 83B0     		sub	sp, sp, #12
 6485              	.LCFI262:
 6486              		.cfi_def_cfa_offset 16
 6487 0004 00AF     		add	r7, sp, #0
 6488              	.LCFI263:
 6489              		.cfi_def_cfa_register 7
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 6490              		.loc 1 4537 13
 6491 0006 094B     		ldr	r3, .L420
 6492 0008 1B68     		ldr	r3, [r3]
 6493              		.loc 1 4537 11
 6494 000a 9B69     		ldr	r3, [r3, #24]
 6495 000c 7B60     		str	r3, [r7, #4]
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 6496              		.loc 1 4541 2
 6497 000e 074B     		ldr	r3, .L420
 6498 0010 1B68     		ldr	r3, [r3]
 6499 0012 DA6A     		ldr	r2, [r3, #44]
 6500 0014 054B     		ldr	r3, .L420
 6501 0016 1B68     		ldr	r3, [r3]
 6502 0018 C2F13802 		rsb	r2, r2, #56
 6503 001c 9A61     		str	r2, [r3, #24]
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 6504              		.loc 1 4543 9
 6505 001e 7B68     		ldr	r3, [r7, #4]
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6506              		.loc 1 4544 1
 6507 0020 1846     		mov	r0, r3
 6508 0022 0C37     		adds	r7, r7, #12
 6509              	.LCFI264:
ARM GAS  /tmp/cc65XYwf.s 			page 198


 6510              		.cfi_def_cfa_offset 4
 6511 0024 BD46     		mov	sp, r7
 6512              	.LCFI265:
 6513              		.cfi_def_cfa_register 13
 6514              		@ sp needed
 6515 0026 5DF8047B 		ldr	r7, [sp], #4
 6516              	.LCFI266:
 6517              		.cfi_restore 7
 6518              		.cfi_def_cfa_offset 0
 6519 002a 7047     		bx	lr
 6520              	.L421:
 6521              		.align	2
 6522              	.L420:
 6523 002c 00000000 		.word	pxCurrentTCB
 6524              		.cfi_endproc
 6525              	.LFE55:
 6527              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6528              		.align	1
 6529              		.global	pvTaskIncrementMutexHeldCount
 6530              		.syntax unified
 6531              		.thumb
 6532              		.thumb_func
 6533              		.fpu fpv4-sp-d16
 6535              	pvTaskIncrementMutexHeldCount:
 6536              	.LFB56:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6537              		.loc 1 4550 2
 6538              		.cfi_startproc
 6539              		@ args = 0, pretend = 0, frame = 0
 6540              		@ frame_needed = 1, uses_anonymous_args = 0
 6541              		@ link register save eliminated.
 6542 0000 80B4     		push	{r7}
 6543              	.LCFI267:
 6544              		.cfi_def_cfa_offset 4
 6545              		.cfi_offset 7, -4
 6546 0002 00AF     		add	r7, sp, #0
 6547              	.LCFI268:
 6548              		.cfi_def_cfa_register 7
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 6549              		.loc 1 4553 20
 6550 0004 074B     		ldr	r3, .L425
 6551 0006 1B68     		ldr	r3, [r3]
 6552              		.loc 1 4553 5
 6553 0008 002B     		cmp	r3, #0
 6554 000a 04D0     		beq	.L423
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 6555              		.loc 1 4555 18
 6556 000c 054B     		ldr	r3, .L425
 6557 000e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc65XYwf.s 			page 199


 6558 0010 1A6D     		ldr	r2, [r3, #80]
 6559              		.loc 1 4555 35
 6560 0012 0132     		adds	r2, r2, #1
 6561 0014 1A65     		str	r2, [r3, #80]
 6562              	.L423:
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 6563              		.loc 1 4558 10
 6564 0016 034B     		ldr	r3, .L425
 6565 0018 1B68     		ldr	r3, [r3]
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6566              		.loc 1 4559 2
 6567 001a 1846     		mov	r0, r3
 6568 001c BD46     		mov	sp, r7
 6569              	.LCFI269:
 6570              		.cfi_def_cfa_register 13
 6571              		@ sp needed
 6572 001e 5DF8047B 		ldr	r7, [sp], #4
 6573              	.LCFI270:
 6574              		.cfi_restore 7
 6575              		.cfi_def_cfa_offset 0
 6576 0022 7047     		bx	lr
 6577              	.L426:
 6578              		.align	2
 6579              	.L425:
 6580 0024 00000000 		.word	pxCurrentTCB
 6581              		.cfi_endproc
 6582              	.LFE56:
 6584              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 6585              		.align	1
 6586              		.global	ulTaskNotifyTake
 6587              		.syntax unified
 6588              		.thumb
 6589              		.thumb_func
 6590              		.fpu fpv4-sp-d16
 6592              	ulTaskNotifyTake:
 6593              	.LFB57:
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6594              		.loc 1 4567 2
 6595              		.cfi_startproc
 6596              		@ args = 0, pretend = 0, frame = 16
 6597              		@ frame_needed = 1, uses_anonymous_args = 0
 6598 0000 80B5     		push	{r7, lr}
 6599              	.LCFI271:
 6600              		.cfi_def_cfa_offset 8
 6601              		.cfi_offset 7, -8
 6602              		.cfi_offset 14, -4
 6603 0002 84B0     		sub	sp, sp, #16
 6604              	.LCFI272:
ARM GAS  /tmp/cc65XYwf.s 			page 200


 6605              		.cfi_def_cfa_offset 24
 6606 0004 00AF     		add	r7, sp, #0
 6607              	.LCFI273:
 6608              		.cfi_def_cfa_register 7
 6609 0006 7860     		str	r0, [r7, #4]
 6610 0008 3960     		str	r1, [r7]
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6611              		.loc 1 4570 3
 6612 000a FFF7FEFF 		bl	vPortEnterCritical
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 6613              		.loc 1 4573 20
 6614 000e 1E4B     		ldr	r3, .L433
 6615 0010 1B68     		ldr	r3, [r3]
 6616 0012 5B6D     		ldr	r3, [r3, #84]
 6617              		.loc 1 4573 6
 6618 0014 002B     		cmp	r3, #0
 6619 0016 13D1     		bne	.L428
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6620              		.loc 1 4576 17
 6621 0018 1B4B     		ldr	r3, .L433
 6622 001a 1B68     		ldr	r3, [r3]
 6623              		.loc 1 4576 33
 6624 001c 0122     		movs	r2, #1
 6625 001e 83F85820 		strb	r2, [r3, #88]
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6626              		.loc 1 4578 7
 6627 0022 3B68     		ldr	r3, [r7]
 6628 0024 002B     		cmp	r3, #0
 6629 0026 0BD0     		beq	.L428
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6630              		.loc 1 4580 6
 6631 0028 0121     		movs	r1, #1
 6632 002a 3868     		ldr	r0, [r7]
 6633 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6634              		.loc 1 4587 6
 6635 0030 164B     		ldr	r3, .L433+4
 6636 0032 4FF08052 		mov	r2, #268435456
 6637 0036 1A60     		str	r2, [r3]
 6638              		.syntax unified
 6639              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6640 0038 BFF34F8F 		dsb
 6641              	@ 0 "" 2
ARM GAS  /tmp/cc65XYwf.s 			page 201


 6642              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6643 003c BFF36F8F 		isb
 6644              	@ 0 "" 2
 6645              		.thumb
 6646              		.syntax unified
 6647              	.L428:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6648              		.loc 1 4599 3
 6649 0040 FFF7FEFF 		bl	vPortExitCritical
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6650              		.loc 1 4601 3
 6651 0044 FFF7FEFF 		bl	vPortEnterCritical
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6652              		.loc 1 4604 27
 6653 0048 0F4B     		ldr	r3, .L433
 6654 004a 1B68     		ldr	r3, [r3]
 6655              		.loc 1 4604 13
 6656 004c 5B6D     		ldr	r3, [r3, #84]
 6657 004e FB60     		str	r3, [r7, #12]
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 6658              		.loc 1 4606 6
 6659 0050 FB68     		ldr	r3, [r7, #12]
 6660 0052 002B     		cmp	r3, #0
 6661 0054 0CD0     		beq	.L429
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 6662              		.loc 1 4608 7
 6663 0056 7B68     		ldr	r3, [r7, #4]
 6664 0058 002B     		cmp	r3, #0
 6665 005a 04D0     		beq	.L430
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 6666              		.loc 1 4610 18
 6667 005c 0A4B     		ldr	r3, .L433
 6668 005e 1B68     		ldr	r3, [r3]
 6669              		.loc 1 4610 36
 6670 0060 0022     		movs	r2, #0
 6671 0062 5A65     		str	r2, [r3, #84]
 6672 0064 04E0     		b	.L429
 6673              	.L430:
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/cc65XYwf.s 			page 202


4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 6674              		.loc 1 4614 18
 6675 0066 084B     		ldr	r3, .L433
 6676 0068 1B68     		ldr	r3, [r3]
 6677              		.loc 1 4614 47
 6678 006a FA68     		ldr	r2, [r7, #12]
 6679 006c 013A     		subs	r2, r2, #1
 6680              		.loc 1 4614 36
 6681 006e 5A65     		str	r2, [r3, #84]
 6682              	.L429:
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6683              		.loc 1 4622 16
 6684 0070 054B     		ldr	r3, .L433
 6685 0072 1B68     		ldr	r3, [r3]
 6686              		.loc 1 4622 32
 6687 0074 0022     		movs	r2, #0
 6688 0076 83F85820 		strb	r2, [r3, #88]
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6689              		.loc 1 4624 3
 6690 007a FFF7FEFF 		bl	vPortExitCritical
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 6691              		.loc 1 4626 10
 6692 007e FB68     		ldr	r3, [r7, #12]
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6693              		.loc 1 4627 2
 6694 0080 1846     		mov	r0, r3
 6695 0082 1037     		adds	r7, r7, #16
 6696              	.LCFI274:
 6697              		.cfi_def_cfa_offset 8
 6698 0084 BD46     		mov	sp, r7
 6699              	.LCFI275:
 6700              		.cfi_def_cfa_register 13
 6701              		@ sp needed
 6702 0086 80BD     		pop	{r7, pc}
 6703              	.L434:
 6704              		.align	2
 6705              	.L433:
 6706 0088 00000000 		.word	pxCurrentTCB
 6707 008c 04ED00E0 		.word	-536810236
 6708              		.cfi_endproc
 6709              	.LFE57:
 6711              		.section	.text.xTaskNotifyWait,"ax",%progbits
 6712              		.align	1
 6713              		.global	xTaskNotifyWait
 6714              		.syntax unified
 6715              		.thumb
 6716              		.thumb_func
ARM GAS  /tmp/cc65XYwf.s 			page 203


 6717              		.fpu fpv4-sp-d16
 6719              	xTaskNotifyWait:
 6720              	.LFB58:
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6721              		.loc 1 4635 2
 6722              		.cfi_startproc
 6723              		@ args = 0, pretend = 0, frame = 24
 6724              		@ frame_needed = 1, uses_anonymous_args = 0
 6725 0000 80B5     		push	{r7, lr}
 6726              	.LCFI276:
 6727              		.cfi_def_cfa_offset 8
 6728              		.cfi_offset 7, -8
 6729              		.cfi_offset 14, -4
 6730 0002 86B0     		sub	sp, sp, #24
 6731              	.LCFI277:
 6732              		.cfi_def_cfa_offset 32
 6733 0004 00AF     		add	r7, sp, #0
 6734              	.LCFI278:
 6735              		.cfi_def_cfa_register 7
 6736 0006 F860     		str	r0, [r7, #12]
 6737 0008 B960     		str	r1, [r7, #8]
 6738 000a 7A60     		str	r2, [r7, #4]
 6739 000c 3B60     		str	r3, [r7]
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6740              		.loc 1 4638 3
 6741 000e FFF7FEFF 		bl	vPortEnterCritical
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6742              		.loc 1 4641 20
 6743 0012 264B     		ldr	r3, .L441
 6744 0014 1B68     		ldr	r3, [r3]
 6745 0016 93F85830 		ldrb	r3, [r3, #88]
 6746 001a DBB2     		uxtb	r3, r3
 6747              		.loc 1 4641 6
 6748 001c 022B     		cmp	r3, #2
 6749 001e 1AD0     		beq	.L436
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 6750              		.loc 1 4646 35
 6751 0020 224B     		ldr	r3, .L441
 6752 0022 1B68     		ldr	r3, [r3]
 6753 0024 596D     		ldr	r1, [r3, #84]
 6754              		.loc 1 4646 38
 6755 0026 FA68     		ldr	r2, [r7, #12]
ARM GAS  /tmp/cc65XYwf.s 			page 204


 6756 0028 D243     		mvns	r2, r2
 6757              		.loc 1 4646 35
 6758 002a 0A40     		ands	r2, r2, r1
 6759 002c 5A65     		str	r2, [r3, #84]
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6760              		.loc 1 4649 17
 6761 002e 1F4B     		ldr	r3, .L441
 6762 0030 1B68     		ldr	r3, [r3]
 6763              		.loc 1 4649 33
 6764 0032 0122     		movs	r2, #1
 6765 0034 83F85820 		strb	r2, [r3, #88]
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6766              		.loc 1 4651 7
 6767 0038 3B68     		ldr	r3, [r7]
 6768 003a 002B     		cmp	r3, #0
 6769 003c 0BD0     		beq	.L436
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6770              		.loc 1 4653 6
 6771 003e 0121     		movs	r1, #1
 6772 0040 3868     		ldr	r0, [r7]
 6773 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6774              		.loc 1 4660 6
 6775 0046 1A4B     		ldr	r3, .L441+4
 6776 0048 4FF08052 		mov	r2, #268435456
 6777 004c 1A60     		str	r2, [r3]
 6778              		.syntax unified
 6779              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6780 004e BFF34F8F 		dsb
 6781              	@ 0 "" 2
 6782              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6783 0052 BFF36F8F 		isb
 6784              	@ 0 "" 2
 6785              		.thumb
 6786              		.syntax unified
 6787              	.L436:
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc65XYwf.s 			page 205


4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6788              		.loc 1 4672 3
 6789 0056 FFF7FEFF 		bl	vPortExitCritical
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6790              		.loc 1 4674 3
 6791 005a FFF7FEFF 		bl	vPortEnterCritical
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 6792              		.loc 1 4678 6
 6793 005e 7B68     		ldr	r3, [r7, #4]
 6794 0060 002B     		cmp	r3, #0
 6795 0062 04D0     		beq	.L437
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 6796              		.loc 1 4682 41
 6797 0064 114B     		ldr	r3, .L441
 6798 0066 1B68     		ldr	r3, [r3]
 6799 0068 5A6D     		ldr	r2, [r3, #84]
 6800              		.loc 1 4682 27
 6801 006a 7B68     		ldr	r3, [r7, #4]
 6802 006c 1A60     		str	r2, [r3]
 6803              	.L437:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6804              		.loc 1 4689 20
 6805 006e 0F4B     		ldr	r3, .L441
 6806 0070 1B68     		ldr	r3, [r3]
 6807 0072 93F85830 		ldrb	r3, [r3, #88]
 6808 0076 DBB2     		uxtb	r3, r3
 6809              		.loc 1 4689 6
 6810 0078 022B     		cmp	r3, #2
 6811 007a 02D0     		beq	.L438
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 6812              		.loc 1 4692 13
 6813 007c 0023     		movs	r3, #0
 6814 007e 7B61     		str	r3, [r7, #20]
 6815 0080 08E0     		b	.L439
 6816              	.L438:
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 6817              		.loc 1 4698 35
ARM GAS  /tmp/cc65XYwf.s 			page 206


 6818 0082 0A4B     		ldr	r3, .L441
 6819 0084 1B68     		ldr	r3, [r3]
 6820 0086 596D     		ldr	r1, [r3, #84]
 6821              		.loc 1 4698 38
 6822 0088 BA68     		ldr	r2, [r7, #8]
 6823 008a D243     		mvns	r2, r2
 6824              		.loc 1 4698 35
 6825 008c 0A40     		ands	r2, r2, r1
 6826 008e 5A65     		str	r2, [r3, #84]
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6827              		.loc 1 4699 13
 6828 0090 0123     		movs	r3, #1
 6829 0092 7B61     		str	r3, [r7, #20]
 6830              	.L439:
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6831              		.loc 1 4702 16
 6832 0094 054B     		ldr	r3, .L441
 6833 0096 1B68     		ldr	r3, [r3]
 6834              		.loc 1 4702 32
 6835 0098 0022     		movs	r2, #0
 6836 009a 83F85820 		strb	r2, [r3, #88]
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6837              		.loc 1 4704 3
 6838 009e FFF7FEFF 		bl	vPortExitCritical
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6839              		.loc 1 4706 10
 6840 00a2 7B69     		ldr	r3, [r7, #20]
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6841              		.loc 1 4707 2
 6842 00a4 1846     		mov	r0, r3
 6843 00a6 1837     		adds	r7, r7, #24
 6844              	.LCFI279:
 6845              		.cfi_def_cfa_offset 8
 6846 00a8 BD46     		mov	sp, r7
 6847              	.LCFI280:
 6848              		.cfi_def_cfa_register 13
 6849              		@ sp needed
 6850 00aa 80BD     		pop	{r7, pc}
 6851              	.L442:
 6852              		.align	2
 6853              	.L441:
 6854 00ac 00000000 		.word	pxCurrentTCB
 6855 00b0 04ED00E0 		.word	-536810236
 6856              		.cfi_endproc
 6857              	.LFE58:
 6859              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6860              		.align	1
 6861              		.global	xTaskGenericNotify
 6862              		.syntax unified
 6863              		.thumb
 6864              		.thumb_func
 6865              		.fpu fpv4-sp-d16
 6867              	xTaskGenericNotify:
ARM GAS  /tmp/cc65XYwf.s 			page 207


 6868              	.LFB59:
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6869              		.loc 1 4715 2
 6870              		.cfi_startproc
 6871              		@ args = 0, pretend = 0, frame = 40
 6872              		@ frame_needed = 1, uses_anonymous_args = 0
 6873 0000 80B5     		push	{r7, lr}
 6874              	.LCFI281:
 6875              		.cfi_def_cfa_offset 8
 6876              		.cfi_offset 7, -8
 6877              		.cfi_offset 14, -4
 6878 0002 8AB0     		sub	sp, sp, #40
 6879              	.LCFI282:
 6880              		.cfi_def_cfa_offset 48
 6881 0004 00AF     		add	r7, sp, #0
 6882              	.LCFI283:
 6883              		.cfi_def_cfa_register 7
 6884 0006 F860     		str	r0, [r7, #12]
 6885 0008 B960     		str	r1, [r7, #8]
 6886 000a 3B60     		str	r3, [r7]
 6887 000c 1346     		mov	r3, r2
 6888 000e FB71     		strb	r3, [r7, #7]
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 6889              		.loc 1 4717 13
 6890 0010 0123     		movs	r3, #1
 6891 0012 7B62     		str	r3, [r7, #36]
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6892              		.loc 1 4720 3
 6893 0014 FB68     		ldr	r3, [r7, #12]
 6894 0016 002B     		cmp	r3, #0
 6895 0018 09D1     		bne	.L444
 6896              	.LBB212:
 6897              	.LBB213:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6898              		.loc 2 195 2 discriminator 1
 6899              		.syntax unified
 6900              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6901 001a 4FF05003 			mov r3, #80												
 6902 001e 83F31188 		msr basepri, r3											
 6903 0022 BFF36F8F 		isb														
 6904 0026 BFF34F8F 		dsb														
 6905              	
 6906              	@ 0 "" 2
 6907              		.thumb
 6908              		.syntax unified
 6909 002a BB61     		str	r3, [r7, #24]
 6910              	.L445:
ARM GAS  /tmp/cc65XYwf.s 			page 208


 6911              	.LBE213:
 6912              	.LBE212:
 6913              		.loc 1 4720 3 discriminator 1
 6914 002c FEE7     		b	.L445
 6915              	.L444:
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 6916              		.loc 1 4721 9
 6917 002e FB68     		ldr	r3, [r7, #12]
 6918 0030 3B62     		str	r3, [r7, #32]
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6919              		.loc 1 4723 3
 6920 0032 FFF7FEFF 		bl	vPortEnterCritical
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6921              		.loc 1 4725 6
 6922 0036 3B68     		ldr	r3, [r7]
 6923 0038 002B     		cmp	r3, #0
 6924 003a 03D0     		beq	.L446
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6925              		.loc 1 4727 42
 6926 003c 3B6A     		ldr	r3, [r7, #32]
 6927 003e 5A6D     		ldr	r2, [r3, #84]
 6928              		.loc 1 4727 35
 6929 0040 3B68     		ldr	r3, [r7]
 6930 0042 1A60     		str	r2, [r3]
 6931              	.L446:
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6932              		.loc 1 4730 26
 6933 0044 3B6A     		ldr	r3, [r7, #32]
 6934 0046 93F85830 		ldrb	r3, [r3, #88]
 6935 004a FB77     		strb	r3, [r7, #31]
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6936              		.loc 1 4732 25
 6937 004c 3B6A     		ldr	r3, [r7, #32]
 6938 004e 0222     		movs	r2, #2
 6939 0050 83F85820 		strb	r2, [r3, #88]
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 6940              		.loc 1 4734 4
 6941 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6942 0056 042B     		cmp	r3, #4
 6943 0058 27D8     		bhi	.L447
 6944 005a 01A2     		adr	r2, .L449
 6945 005c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6946              		.p2align 2
 6947              	.L449:
 6948 0060 C9000000 		.word	.L464+1
 6949 0064 75000000 		.word	.L452+1
 6950 0068 83000000 		.word	.L451+1
 6951 006c 8F000000 		.word	.L450+1
 6952 0070 97000000 		.word	.L448+1
 6953              		.p2align 1
ARM GAS  /tmp/cc65XYwf.s 			page 209


 6954              	.L452:
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6955              		.loc 1 4737 29
 6956 0074 3B6A     		ldr	r3, [r7, #32]
 6957 0076 5A6D     		ldr	r2, [r3, #84]
 6958 0078 BB68     		ldr	r3, [r7, #8]
 6959 007a 1A43     		orrs	r2, r2, r3
 6960 007c 3B6A     		ldr	r3, [r7, #32]
 6961 007e 5A65     		str	r2, [r3, #84]
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6962              		.loc 1 4738 6
 6963 0080 25E0     		b	.L454
 6964              	.L451:
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6965              		.loc 1 4741 13
 6966 0082 3B6A     		ldr	r3, [r7, #32]
 6967 0084 5B6D     		ldr	r3, [r3, #84]
 6968              		.loc 1 4741 32
 6969 0086 5A1C     		adds	r2, r3, #1
 6970 0088 3B6A     		ldr	r3, [r7, #32]
 6971 008a 5A65     		str	r2, [r3, #84]
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6972              		.loc 1 4742 6
 6973 008c 1FE0     		b	.L454
 6974              	.L450:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6975              		.loc 1 4745 29
 6976 008e 3B6A     		ldr	r3, [r7, #32]
 6977 0090 BA68     		ldr	r2, [r7, #8]
 6978 0092 5A65     		str	r2, [r3, #84]
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6979              		.loc 1 4746 6
 6980 0094 1BE0     		b	.L454
 6981              	.L448:
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 6982              		.loc 1 4749 8
 6983 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6984 0098 022B     		cmp	r3, #2
 6985 009a 03D0     		beq	.L455
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 6986              		.loc 1 4751 30
 6987 009c 3B6A     		ldr	r3, [r7, #32]
 6988 009e BA68     		ldr	r2, [r7, #8]
 6989 00a0 5A65     		str	r2, [r3, #84]
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
ARM GAS  /tmp/cc65XYwf.s 			page 210


4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6990              		.loc 1 4758 6
 6991 00a2 14E0     		b	.L454
 6992              	.L455:
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6993              		.loc 1 4756 15
 6994 00a4 0023     		movs	r3, #0
 6995 00a6 7B62     		str	r3, [r7, #36]
 6996              		.loc 1 4758 6
 6997 00a8 11E0     		b	.L454
 6998              	.L447:
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 6999              		.loc 1 4769 6
 7000 00aa 3B6A     		ldr	r3, [r7, #32]
 7001 00ac 5B6D     		ldr	r3, [r3, #84]
 7002 00ae B3F1FF3F 		cmp	r3, #-1
 7003 00b2 0BD0     		beq	.L465
 7004              	.LBB214:
 7005              	.LBB215:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7006              		.loc 2 195 2 discriminator 1
 7007              		.syntax unified
 7008              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7009 00b4 4FF05003 			mov r3, #80												
 7010 00b8 83F31188 		msr basepri, r3											
 7011 00bc BFF36F8F 		isb														
 7012 00c0 BFF34F8F 		dsb														
 7013              	
 7014              	@ 0 "" 2
 7015              		.thumb
 7016              		.syntax unified
 7017 00c4 7B61     		str	r3, [r7, #20]
 7018              	.L458:
 7019              	.LBE215:
 7020              	.LBE214:
 7021              		.loc 1 4769 6 discriminator 2
 7022 00c6 FEE7     		b	.L458
 7023              	.L464:
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7024              		.loc 1 4763 6
 7025 00c8 00BF     		nop
 7026 00ca 00E0     		b	.L454
 7027              	.L465:
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  /tmp/cc65XYwf.s 			page 211


 7028              		.loc 1 4771 6
 7029 00cc 00BF     		nop
 7030              	.L454:
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7031              		.loc 1 4778 6
 7032 00ce FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7033 00d0 012B     		cmp	r3, #1
 7034 00d2 39D1     		bne	.L459
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7035              		.loc 1 4780 14
 7036 00d4 3B6A     		ldr	r3, [r7, #32]
 7037 00d6 0433     		adds	r3, r3, #4
 7038 00d8 1846     		mov	r0, r3
 7039 00da FFF7FEFF 		bl	uxListRemove
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7040              		.loc 1 4781 5
 7041 00de 3B6A     		ldr	r3, [r7, #32]
 7042 00e0 DA6A     		ldr	r2, [r3, #44]
 7043 00e2 1D4B     		ldr	r3, .L466
 7044 00e4 1B68     		ldr	r3, [r3]
 7045 00e6 9A42     		cmp	r2, r3
 7046 00e8 03D9     		bls	.L460
 7047              		.loc 1 4781 5 is_stmt 0 discriminator 1
 7048 00ea 3B6A     		ldr	r3, [r7, #32]
 7049 00ec DB6A     		ldr	r3, [r3, #44]
 7050 00ee 1A4A     		ldr	r2, .L466
 7051 00f0 1360     		str	r3, [r2]
 7052              	.L460:
 7053              		.loc 1 4781 5 discriminator 3
 7054 00f2 3B6A     		ldr	r3, [r7, #32]
 7055 00f4 DA6A     		ldr	r2, [r3, #44]
 7056 00f6 1346     		mov	r3, r2
 7057 00f8 9B00     		lsls	r3, r3, #2
 7058 00fa 1344     		add	r3, r3, r2
 7059 00fc 9B00     		lsls	r3, r3, #2
 7060 00fe 174A     		ldr	r2, .L466+4
 7061 0100 1A44     		add	r2, r2, r3
 7062 0102 3B6A     		ldr	r3, [r7, #32]
 7063 0104 0433     		adds	r3, r3, #4
 7064 0106 1946     		mov	r1, r3
 7065 0108 1046     		mov	r0, r2
 7066 010a FFF7FEFF 		bl	vListInsertEnd
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7067              		.loc 1 4784 5 is_stmt 1 discriminator 3
 7068 010e 3B6A     		ldr	r3, [r7, #32]
 7069 0110 9B6A     		ldr	r3, [r3, #40]
 7070 0112 002B     		cmp	r3, #0
 7071 0114 09D0     		beq	.L461
ARM GAS  /tmp/cc65XYwf.s 			page 212


 7072              	.LBB216:
 7073              	.LBB217:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7074              		.loc 2 195 2 discriminator 1
 7075              		.syntax unified
 7076              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7077 0116 4FF05003 			mov r3, #80												
 7078 011a 83F31188 		msr basepri, r3											
 7079 011e BFF36F8F 		isb														
 7080 0122 BFF34F8F 		dsb														
 7081              	
 7082              	@ 0 "" 2
 7083              		.thumb
 7084              		.syntax unified
 7085 0126 3B61     		str	r3, [r7, #16]
 7086              	.L462:
 7087              	.LBE217:
 7088              	.LBE216:
 7089              		.loc 1 4784 5 discriminator 3
 7090 0128 FEE7     		b	.L462
 7091              	.L461:
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7092              		.loc 1 4802 14
 7093 012a 3B6A     		ldr	r3, [r7, #32]
 7094 012c DA6A     		ldr	r2, [r3, #44]
 7095              		.loc 1 4802 41
 7096 012e 0C4B     		ldr	r3, .L466+8
 7097 0130 1B68     		ldr	r3, [r3]
 7098 0132 DB6A     		ldr	r3, [r3, #44]
 7099              		.loc 1 4802 7
 7100 0134 9A42     		cmp	r2, r3
 7101 0136 07D9     		bls	.L459
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 7102              		.loc 1 4806 6
 7103 0138 0A4B     		ldr	r3, .L466+12
 7104 013a 4FF08052 		mov	r2, #268435456
 7105 013e 1A60     		str	r2, [r3]
ARM GAS  /tmp/cc65XYwf.s 			page 213


 7106              		.syntax unified
 7107              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7108 0140 BFF34F8F 		dsb
 7109              	@ 0 "" 2
 7110              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7111 0144 BFF36F8F 		isb
 7112              	@ 0 "" 2
 7113              		.thumb
 7114              		.syntax unified
 7115              	.L459:
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7116              		.loc 1 4818 3
 7117 0148 FFF7FEFF 		bl	vPortExitCritical
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7118              		.loc 1 4820 10
 7119 014c 7B6A     		ldr	r3, [r7, #36]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7120              		.loc 1 4821 2
 7121 014e 1846     		mov	r0, r3
 7122 0150 2837     		adds	r7, r7, #40
 7123              	.LCFI284:
 7124              		.cfi_def_cfa_offset 8
 7125 0152 BD46     		mov	sp, r7
 7126              	.LCFI285:
 7127              		.cfi_def_cfa_register 13
 7128              		@ sp needed
 7129 0154 80BD     		pop	{r7, pc}
 7130              	.L467:
 7131 0156 00BF     		.align	2
 7132              	.L466:
 7133 0158 00000000 		.word	uxTopReadyPriority
 7134 015c 00000000 		.word	pxReadyTasksLists
 7135 0160 00000000 		.word	pxCurrentTCB
 7136 0164 04ED00E0 		.word	-536810236
 7137              		.cfi_endproc
 7138              	.LFE59:
 7140              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7141              		.align	1
 7142              		.global	xTaskGenericNotifyFromISR
 7143              		.syntax unified
 7144              		.thumb
 7145              		.thumb_func
 7146              		.fpu fpv4-sp-d16
 7148              	xTaskGenericNotifyFromISR:
 7149              	.LFB60:
ARM GAS  /tmp/cc65XYwf.s 			page 214


4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7150              		.loc 1 4829 2
 7151              		.cfi_startproc
 7152              		@ args = 4, pretend = 0, frame = 56
 7153              		@ frame_needed = 1, uses_anonymous_args = 0
 7154 0000 80B5     		push	{r7, lr}
 7155              	.LCFI286:
 7156              		.cfi_def_cfa_offset 8
 7157              		.cfi_offset 7, -8
 7158              		.cfi_offset 14, -4
 7159 0002 8EB0     		sub	sp, sp, #56
 7160              	.LCFI287:
 7161              		.cfi_def_cfa_offset 64
 7162 0004 00AF     		add	r7, sp, #0
 7163              	.LCFI288:
 7164              		.cfi_def_cfa_register 7
 7165 0006 F860     		str	r0, [r7, #12]
 7166 0008 B960     		str	r1, [r7, #8]
 7167 000a 3B60     		str	r3, [r7]
 7168 000c 1346     		mov	r3, r2
 7169 000e FB71     		strb	r3, [r7, #7]
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7170              		.loc 1 4832 13
 7171 0010 0123     		movs	r3, #1
 7172 0012 7B63     		str	r3, [r7, #52]
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7173              		.loc 1 4835 3
 7174 0014 FB68     		ldr	r3, [r7, #12]
 7175 0016 002B     		cmp	r3, #0
 7176 0018 09D1     		bne	.L469
 7177              	.LBB218:
 7178              	.LBB219:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7179              		.loc 2 195 2 discriminator 1
 7180              		.syntax unified
 7181              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7182 001a 4FF05003 			mov r3, #80												
 7183 001e 83F31188 		msr basepri, r3											
 7184 0022 BFF36F8F 		isb														
 7185 0026 BFF34F8F 		dsb														
 7186              	
 7187              	@ 0 "" 2
 7188              		.thumb
 7189              		.syntax unified
 7190 002a 7B62     		str	r3, [r7, #36]
 7191              	.L470:
ARM GAS  /tmp/cc65XYwf.s 			page 215


 7192              	.LBE219:
 7193              	.LBE218:
 7194              		.loc 1 4835 3 discriminator 1
 7195 002c FEE7     		b	.L470
 7196              	.L469:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7197              		.loc 1 4853 3
 7198 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7199              		.loc 1 4855 9
 7200 0032 FB68     		ldr	r3, [r7, #12]
 7201 0034 3B63     		str	r3, [r7, #48]
 7202              	.LBB220:
 7203              	.LBB221:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7204              		.loc 2 211 2
 7205              		.syntax unified
 7206              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7207 0036 EFF31182 			mrs r2, basepri											
 7208 003a 4FF05003 		mov r3, #80												
 7209 003e 83F31188 		msr basepri, r3											
 7210 0042 BFF36F8F 		isb														
 7211 0046 BFF34F8F 		dsb														
 7212              	
 7213              	@ 0 "" 2
 7214              		.thumb
 7215              		.syntax unified
 7216 004a 3A62     		str	r2, [r7, #32]
 7217 004c FB61     		str	r3, [r7, #28]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7218              		.loc 2 223 9
 7219 004e 3B6A     		ldr	r3, [r7, #32]
 7220              	.LBE221:
 7221              	.LBE220:
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7222              		.loc 1 4857 28
 7223 0050 FB62     		str	r3, [r7, #44]
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc65XYwf.s 			page 216


4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7224              		.loc 1 4859 6
 7225 0052 3B68     		ldr	r3, [r7]
 7226 0054 002B     		cmp	r3, #0
 7227 0056 03D0     		beq	.L472
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7228              		.loc 1 4861 42
 7229 0058 3B6B     		ldr	r3, [r7, #48]
 7230 005a 5A6D     		ldr	r2, [r3, #84]
 7231              		.loc 1 4861 35
 7232 005c 3B68     		ldr	r3, [r7]
 7233 005e 1A60     		str	r2, [r3]
 7234              	.L472:
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7235              		.loc 1 4864 26
 7236 0060 3B6B     		ldr	r3, [r7, #48]
 7237 0062 93F85830 		ldrb	r3, [r3, #88]
 7238 0066 87F82B30 		strb	r3, [r7, #43]
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7239              		.loc 1 4865 25
 7240 006a 3B6B     		ldr	r3, [r7, #48]
 7241 006c 0222     		movs	r2, #2
 7242 006e 83F85820 		strb	r2, [r3, #88]
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7243              		.loc 1 4867 4
 7244 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7245 0074 042B     		cmp	r3, #4
 7246 0076 29D8     		bhi	.L473
 7247 0078 01A2     		adr	r2, .L475
 7248 007a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7249 007e 00BF     		.p2align 2
 7250              	.L475:
 7251 0080 EB000000 		.word	.L493+1
 7252 0084 95000000 		.word	.L478+1
 7253 0088 A3000000 		.word	.L477+1
 7254 008c AF000000 		.word	.L476+1
 7255 0090 B7000000 		.word	.L474+1
 7256              		.p2align 1
 7257              	.L478:
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7258              		.loc 1 4870 29
 7259 0094 3B6B     		ldr	r3, [r7, #48]
 7260 0096 5A6D     		ldr	r2, [r3, #84]
 7261 0098 BB68     		ldr	r3, [r7, #8]
 7262 009a 1A43     		orrs	r2, r2, r3
 7263 009c 3B6B     		ldr	r3, [r7, #48]
 7264 009e 5A65     		str	r2, [r3, #84]
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7265              		.loc 1 4871 6
 7266 00a0 26E0     		b	.L480
 7267              	.L477:
ARM GAS  /tmp/cc65XYwf.s 			page 217


4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7268              		.loc 1 4874 13
 7269 00a2 3B6B     		ldr	r3, [r7, #48]
 7270 00a4 5B6D     		ldr	r3, [r3, #84]
 7271              		.loc 1 4874 32
 7272 00a6 5A1C     		adds	r2, r3, #1
 7273 00a8 3B6B     		ldr	r3, [r7, #48]
 7274 00aa 5A65     		str	r2, [r3, #84]
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7275              		.loc 1 4875 6
 7276 00ac 20E0     		b	.L480
 7277              	.L476:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7278              		.loc 1 4878 29
 7279 00ae 3B6B     		ldr	r3, [r7, #48]
 7280 00b0 BA68     		ldr	r2, [r7, #8]
 7281 00b2 5A65     		str	r2, [r3, #84]
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7282              		.loc 1 4879 6
 7283 00b4 1CE0     		b	.L480
 7284              	.L474:
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7285              		.loc 1 4882 8
 7286 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7287 00ba 022B     		cmp	r3, #2
 7288 00bc 03D0     		beq	.L481
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7289              		.loc 1 4884 30
 7290 00be 3B6B     		ldr	r3, [r7, #48]
 7291 00c0 BA68     		ldr	r2, [r7, #8]
 7292 00c2 5A65     		str	r2, [r3, #84]
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7293              		.loc 1 4891 6
 7294 00c4 14E0     		b	.L480
 7295              	.L481:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7296              		.loc 1 4889 15
 7297 00c6 0023     		movs	r3, #0
 7298 00c8 7B63     		str	r3, [r7, #52]
 7299              		.loc 1 4891 6
 7300 00ca 11E0     		b	.L480
 7301              	.L473:
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
ARM GAS  /tmp/cc65XYwf.s 			page 218


4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7302              		.loc 1 4902 6
 7303 00cc 3B6B     		ldr	r3, [r7, #48]
 7304 00ce 5B6D     		ldr	r3, [r3, #84]
 7305 00d0 B3F1FF3F 		cmp	r3, #-1
 7306 00d4 0BD0     		beq	.L494
 7307              	.LBB222:
 7308              	.LBB223:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7309              		.loc 2 195 2 discriminator 1
 7310              		.syntax unified
 7311              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7312 00d6 4FF05003 			mov r3, #80												
 7313 00da 83F31188 		msr basepri, r3											
 7314 00de BFF36F8F 		isb														
 7315 00e2 BFF34F8F 		dsb														
 7316              	
 7317              	@ 0 "" 2
 7318              		.thumb
 7319              		.syntax unified
 7320 00e6 BB61     		str	r3, [r7, #24]
 7321              	.L484:
 7322              	.LBE223:
 7323              	.LBE222:
 7324              		.loc 1 4902 6 discriminator 2
 7325 00e8 FEE7     		b	.L484
 7326              	.L493:
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7327              		.loc 1 4896 6
 7328 00ea 00BF     		nop
 7329 00ec 00E0     		b	.L480
 7330              	.L494:
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7331              		.loc 1 4903 6
 7332 00ee 00BF     		nop
 7333              	.L480:
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7334              		.loc 1 4910 6
 7335 00f0 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7336 00f4 012B     		cmp	r3, #1
 7337 00f6 45D1     		bne	.L485
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
ARM GAS  /tmp/cc65XYwf.s 			page 219


4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7338              		.loc 1 4913 5
 7339 00f8 3B6B     		ldr	r3, [r7, #48]
 7340 00fa 9B6A     		ldr	r3, [r3, #40]
 7341 00fc 002B     		cmp	r3, #0
 7342 00fe 09D0     		beq	.L486
 7343              	.LBB224:
 7344              	.LBB225:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7345              		.loc 2 195 2 discriminator 1
 7346              		.syntax unified
 7347              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7348 0100 4FF05003 			mov r3, #80												
 7349 0104 83F31188 		msr basepri, r3											
 7350 0108 BFF36F8F 		isb														
 7351 010c BFF34F8F 		dsb														
 7352              	
 7353              	@ 0 "" 2
 7354              		.thumb
 7355              		.syntax unified
 7356 0110 7B61     		str	r3, [r7, #20]
 7357              	.L487:
 7358              	.LBE225:
 7359              	.LBE224:
 7360              		.loc 1 4913 5 discriminator 3
 7361 0112 FEE7     		b	.L487
 7362              	.L486:
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7363              		.loc 1 4915 30
 7364 0114 204B     		ldr	r3, .L495
 7365 0116 1B68     		ldr	r3, [r3]
 7366              		.loc 1 4915 7
 7367 0118 002B     		cmp	r3, #0
 7368 011a 1DD1     		bne	.L488
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7369              		.loc 1 4917 15
 7370 011c 3B6B     		ldr	r3, [r7, #48]
 7371 011e 0433     		adds	r3, r3, #4
 7372 0120 1846     		mov	r0, r3
 7373 0122 FFF7FEFF 		bl	uxListRemove
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7374              		.loc 1 4918 6
 7375 0126 3B6B     		ldr	r3, [r7, #48]
 7376 0128 DA6A     		ldr	r2, [r3, #44]
 7377 012a 1C4B     		ldr	r3, .L495+4
 7378 012c 1B68     		ldr	r3, [r3]
 7379 012e 9A42     		cmp	r2, r3
 7380 0130 03D9     		bls	.L489
 7381              		.loc 1 4918 6 is_stmt 0 discriminator 1
 7382 0132 3B6B     		ldr	r3, [r7, #48]
 7383 0134 DB6A     		ldr	r3, [r3, #44]
 7384 0136 194A     		ldr	r2, .L495+4
 7385 0138 1360     		str	r3, [r2]
 7386              	.L489:
 7387              		.loc 1 4918 6 discriminator 3
ARM GAS  /tmp/cc65XYwf.s 			page 220


 7388 013a 3B6B     		ldr	r3, [r7, #48]
 7389 013c DA6A     		ldr	r2, [r3, #44]
 7390 013e 1346     		mov	r3, r2
 7391 0140 9B00     		lsls	r3, r3, #2
 7392 0142 1344     		add	r3, r3, r2
 7393 0144 9B00     		lsls	r3, r3, #2
 7394 0146 164A     		ldr	r2, .L495+8
 7395 0148 1A44     		add	r2, r2, r3
 7396 014a 3B6B     		ldr	r3, [r7, #48]
 7397 014c 0433     		adds	r3, r3, #4
 7398 014e 1946     		mov	r1, r3
 7399 0150 1046     		mov	r0, r2
 7400 0152 FFF7FEFF 		bl	vListInsertEnd
 7401 0156 05E0     		b	.L490
 7402              	.L488:
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7403              		.loc 1 4924 6 is_stmt 1
 7404 0158 3B6B     		ldr	r3, [r7, #48]
 7405 015a 1833     		adds	r3, r3, #24
 7406 015c 1946     		mov	r1, r3
 7407 015e 1148     		ldr	r0, .L495+12
 7408 0160 FFF7FEFF 		bl	vListInsertEnd
 7409              	.L490:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7410              		.loc 1 4927 14
 7411 0164 3B6B     		ldr	r3, [r7, #48]
 7412 0166 DA6A     		ldr	r2, [r3, #44]
 7413              		.loc 1 4927 41
 7414 0168 0F4B     		ldr	r3, .L495+16
 7415 016a 1B68     		ldr	r3, [r3]
 7416 016c DB6A     		ldr	r3, [r3, #44]
 7417              		.loc 1 4927 7
 7418 016e 9A42     		cmp	r2, r3
 7419 0170 08D9     		bls	.L485
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7420              		.loc 1 4931 8
 7421 0172 3B6C     		ldr	r3, [r7, #64]
 7422 0174 002B     		cmp	r3, #0
 7423 0176 02D0     		beq	.L491
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7424              		.loc 1 4933 34
 7425 0178 3B6C     		ldr	r3, [r7, #64]
 7426 017a 0122     		movs	r2, #1
 7427 017c 1A60     		str	r2, [r3]
 7428              	.L491:
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cc65XYwf.s 			page 221


4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7429              		.loc 1 4939 20
 7430 017e 0B4B     		ldr	r3, .L495+20
 7431 0180 0122     		movs	r2, #1
 7432 0182 1A60     		str	r2, [r3]
 7433              	.L485:
 7434 0184 FB6A     		ldr	r3, [r7, #44]
 7435 0186 3B61     		str	r3, [r7, #16]
 7436              	.LBB226:
 7437              	.LBB227:
 7438              		.loc 2 229 2
 7439 0188 3B69     		ldr	r3, [r7, #16]
 7440              		.syntax unified
 7441              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7442 018a 83F31188 			msr basepri, r3	
 7443              	@ 0 "" 2
 7444              		.thumb
 7445              		.syntax unified
 7446              	.LBE227:
 7447              	.LBE226:
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7448              		.loc 1 4949 10
 7449 018e 7B6B     		ldr	r3, [r7, #52]
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7450              		.loc 1 4950 2
 7451 0190 1846     		mov	r0, r3
 7452 0192 3837     		adds	r7, r7, #56
 7453              	.LCFI289:
 7454              		.cfi_def_cfa_offset 8
 7455 0194 BD46     		mov	sp, r7
 7456              	.LCFI290:
 7457              		.cfi_def_cfa_register 13
 7458              		@ sp needed
 7459 0196 80BD     		pop	{r7, pc}
 7460              	.L496:
 7461              		.align	2
 7462              	.L495:
 7463 0198 00000000 		.word	uxSchedulerSuspended
 7464 019c 00000000 		.word	uxTopReadyPriority
 7465 01a0 00000000 		.word	pxReadyTasksLists
 7466 01a4 00000000 		.word	xPendingReadyList
 7467 01a8 00000000 		.word	pxCurrentTCB
 7468 01ac 00000000 		.word	xYieldPending
 7469              		.cfi_endproc
ARM GAS  /tmp/cc65XYwf.s 			page 222


 7470              	.LFE60:
 7472              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 7473              		.align	1
 7474              		.global	vTaskNotifyGiveFromISR
 7475              		.syntax unified
 7476              		.thumb
 7477              		.thumb_func
 7478              		.fpu fpv4-sp-d16
 7480              	vTaskNotifyGiveFromISR:
 7481              	.LFB61:
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7482              		.loc 1 4958 2
 7483              		.cfi_startproc
 7484              		@ args = 0, pretend = 0, frame = 40
 7485              		@ frame_needed = 1, uses_anonymous_args = 0
 7486 0000 80B5     		push	{r7, lr}
 7487              	.LCFI291:
 7488              		.cfi_def_cfa_offset 8
 7489              		.cfi_offset 7, -8
 7490              		.cfi_offset 14, -4
 7491 0002 8AB0     		sub	sp, sp, #40
 7492              	.LCFI292:
 7493              		.cfi_def_cfa_offset 48
 7494 0004 00AF     		add	r7, sp, #0
 7495              	.LCFI293:
 7496              		.cfi_def_cfa_register 7
 7497 0006 7860     		str	r0, [r7, #4]
 7498 0008 3960     		str	r1, [r7]
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7499              		.loc 1 4963 3
 7500 000a 7B68     		ldr	r3, [r7, #4]
 7501 000c 002B     		cmp	r3, #0
 7502 000e 09D1     		bne	.L498
 7503              	.LBB228:
 7504              	.LBB229:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7505              		.loc 2 195 2 discriminator 1
 7506              		.syntax unified
 7507              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7508 0010 4FF05003 			mov r3, #80												
 7509 0014 83F31188 		msr basepri, r3											
 7510 0018 BFF36F8F 		isb														
 7511 001c BFF34F8F 		dsb														
 7512              	
 7513              	@ 0 "" 2
 7514              		.thumb
ARM GAS  /tmp/cc65XYwf.s 			page 223


 7515              		.syntax unified
 7516 0020 BB61     		str	r3, [r7, #24]
 7517              	.L499:
 7518              	.LBE229:
 7519              	.LBE228:
 7520              		.loc 1 4963 3 discriminator 1
 7521 0022 FEE7     		b	.L499
 7522              	.L498:
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7523              		.loc 1 4981 3
 7524 0024 FFF7FEFF 		bl	vPortValidateInterruptPriority
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7525              		.loc 1 4983 9
 7526 0028 7B68     		ldr	r3, [r7, #4]
 7527 002a 7B62     		str	r3, [r7, #36]
 7528              	.LBB230:
 7529              	.LBB231:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7530              		.loc 2 211 2
 7531              		.syntax unified
 7532              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7533 002c EFF31182 			mrs r2, basepri											
 7534 0030 4FF05003 		mov r3, #80												
 7535 0034 83F31188 		msr basepri, r3											
 7536 0038 BFF36F8F 		isb														
 7537 003c BFF34F8F 		dsb														
 7538              	
 7539              	@ 0 "" 2
 7540              		.thumb
 7541              		.syntax unified
 7542 0040 7A61     		str	r2, [r7, #20]
 7543 0042 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7544              		.loc 2 223 9
 7545 0044 7B69     		ldr	r3, [r7, #20]
 7546              	.LBE231:
 7547              	.LBE230:
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
ARM GAS  /tmp/cc65XYwf.s 			page 224


 7548              		.loc 1 4985 28
 7549 0046 3B62     		str	r3, [r7, #32]
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7550              		.loc 1 4987 26
 7551 0048 7B6A     		ldr	r3, [r7, #36]
 7552 004a 93F85830 		ldrb	r3, [r3, #88]
 7553 004e FB77     		strb	r3, [r7, #31]
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7554              		.loc 1 4988 25
 7555 0050 7B6A     		ldr	r3, [r7, #36]
 7556 0052 0222     		movs	r2, #2
 7557 0054 83F85820 		strb	r2, [r3, #88]
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 7558              		.loc 1 4992 11
 7559 0058 7B6A     		ldr	r3, [r7, #36]
 7560 005a 5B6D     		ldr	r3, [r3, #84]
 7561              		.loc 1 4992 30
 7562 005c 5A1C     		adds	r2, r3, #1
 7563 005e 7B6A     		ldr	r3, [r7, #36]
 7564 0060 5A65     		str	r2, [r3, #84]
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7565              		.loc 1 4998 6
 7566 0062 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7567 0064 012B     		cmp	r3, #1
 7568 0066 45D1     		bne	.L501
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7569              		.loc 1 5001 5
 7570 0068 7B6A     		ldr	r3, [r7, #36]
 7571 006a 9B6A     		ldr	r3, [r3, #40]
 7572 006c 002B     		cmp	r3, #0
 7573 006e 09D0     		beq	.L502
 7574              	.LBB232:
 7575              	.LBB233:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7576              		.loc 2 195 2 discriminator 1
 7577              		.syntax unified
 7578              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7579 0070 4FF05003 			mov r3, #80												
 7580 0074 83F31188 		msr basepri, r3											
 7581 0078 BFF36F8F 		isb														
 7582 007c BFF34F8F 		dsb														
 7583              	
 7584              	@ 0 "" 2
 7585              		.thumb
 7586              		.syntax unified
 7587 0080 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/cc65XYwf.s 			page 225


 7588              	.L503:
 7589              	.LBE233:
 7590              	.LBE232:
 7591              		.loc 1 5001 5 discriminator 2
 7592 0082 FEE7     		b	.L503
 7593              	.L502:
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7594              		.loc 1 5003 30
 7595 0084 204B     		ldr	r3, .L508
 7596 0086 1B68     		ldr	r3, [r3]
 7597              		.loc 1 5003 7
 7598 0088 002B     		cmp	r3, #0
 7599 008a 1DD1     		bne	.L504
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7600              		.loc 1 5005 15
 7601 008c 7B6A     		ldr	r3, [r7, #36]
 7602 008e 0433     		adds	r3, r3, #4
 7603 0090 1846     		mov	r0, r3
 7604 0092 FFF7FEFF 		bl	uxListRemove
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7605              		.loc 1 5006 6
 7606 0096 7B6A     		ldr	r3, [r7, #36]
 7607 0098 DA6A     		ldr	r2, [r3, #44]
 7608 009a 1C4B     		ldr	r3, .L508+4
 7609 009c 1B68     		ldr	r3, [r3]
 7610 009e 9A42     		cmp	r2, r3
 7611 00a0 03D9     		bls	.L505
 7612              		.loc 1 5006 6 is_stmt 0 discriminator 1
 7613 00a2 7B6A     		ldr	r3, [r7, #36]
 7614 00a4 DB6A     		ldr	r3, [r3, #44]
 7615 00a6 194A     		ldr	r2, .L508+4
 7616 00a8 1360     		str	r3, [r2]
 7617              	.L505:
 7618              		.loc 1 5006 6 discriminator 3
 7619 00aa 7B6A     		ldr	r3, [r7, #36]
 7620 00ac DA6A     		ldr	r2, [r3, #44]
 7621 00ae 1346     		mov	r3, r2
 7622 00b0 9B00     		lsls	r3, r3, #2
 7623 00b2 1344     		add	r3, r3, r2
 7624 00b4 9B00     		lsls	r3, r3, #2
 7625 00b6 164A     		ldr	r2, .L508+8
 7626 00b8 1A44     		add	r2, r2, r3
 7627 00ba 7B6A     		ldr	r3, [r7, #36]
 7628 00bc 0433     		adds	r3, r3, #4
 7629 00be 1946     		mov	r1, r3
 7630 00c0 1046     		mov	r0, r2
 7631 00c2 FFF7FEFF 		bl	vListInsertEnd
 7632 00c6 05E0     		b	.L506
 7633              	.L504:
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
ARM GAS  /tmp/cc65XYwf.s 			page 226


 7634              		.loc 1 5012 6 is_stmt 1
 7635 00c8 7B6A     		ldr	r3, [r7, #36]
 7636 00ca 1833     		adds	r3, r3, #24
 7637 00cc 1946     		mov	r1, r3
 7638 00ce 1148     		ldr	r0, .L508+12
 7639 00d0 FFF7FEFF 		bl	vListInsertEnd
 7640              	.L506:
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7641              		.loc 1 5015 14
 7642 00d4 7B6A     		ldr	r3, [r7, #36]
 7643 00d6 DA6A     		ldr	r2, [r3, #44]
 7644              		.loc 1 5015 41
 7645 00d8 0F4B     		ldr	r3, .L508+16
 7646 00da 1B68     		ldr	r3, [r3]
 7647 00dc DB6A     		ldr	r3, [r3, #44]
 7648              		.loc 1 5015 7
 7649 00de 9A42     		cmp	r2, r3
 7650 00e0 08D9     		bls	.L501
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7651              		.loc 1 5019 8
 7652 00e2 3B68     		ldr	r3, [r7]
 7653 00e4 002B     		cmp	r3, #0
 7654 00e6 02D0     		beq	.L507
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7655              		.loc 1 5021 34
 7656 00e8 3B68     		ldr	r3, [r7]
 7657 00ea 0122     		movs	r2, #1
 7658 00ec 1A60     		str	r2, [r3]
 7659              	.L507:
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7660              		.loc 1 5027 20
 7661 00ee 0B4B     		ldr	r3, .L508+20
 7662 00f0 0122     		movs	r2, #1
 7663 00f2 1A60     		str	r2, [r3]
 7664              	.L501:
 7665 00f4 3B6A     		ldr	r3, [r7, #32]
 7666 00f6 BB60     		str	r3, [r7, #8]
 7667              	.LBB234:
 7668              	.LBB235:
 7669              		.loc 2 229 2
 7670 00f8 BB68     		ldr	r3, [r7, #8]
 7671              		.syntax unified
 7672              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7673 00fa 83F31188 			msr basepri, r3	
 7674              	@ 0 "" 2
 7675              		.thumb
ARM GAS  /tmp/cc65XYwf.s 			page 227


 7676              		.syntax unified
 7677              	.LBE235:
 7678              	.LBE234:
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7679              		.loc 1 5036 2
 7680 00fe 00BF     		nop
 7681 0100 2837     		adds	r7, r7, #40
 7682              	.LCFI294:
 7683              		.cfi_def_cfa_offset 8
 7684 0102 BD46     		mov	sp, r7
 7685              	.LCFI295:
 7686              		.cfi_def_cfa_register 13
 7687              		@ sp needed
 7688 0104 80BD     		pop	{r7, pc}
 7689              	.L509:
 7690 0106 00BF     		.align	2
 7691              	.L508:
 7692 0108 00000000 		.word	uxSchedulerSuspended
 7693 010c 00000000 		.word	uxTopReadyPriority
 7694 0110 00000000 		.word	pxReadyTasksLists
 7695 0114 00000000 		.word	xPendingReadyList
 7696 0118 00000000 		.word	pxCurrentTCB
 7697 011c 00000000 		.word	xYieldPending
 7698              		.cfi_endproc
 7699              	.LFE61:
 7701              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 7702              		.align	1
 7703              		.global	xTaskNotifyStateClear
 7704              		.syntax unified
 7705              		.thumb
 7706              		.thumb_func
 7707              		.fpu fpv4-sp-d16
 7709              	xTaskNotifyStateClear:
 7710              	.LFB62:
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7711              		.loc 1 5045 2
 7712              		.cfi_startproc
 7713              		@ args = 0, pretend = 0, frame = 16
 7714              		@ frame_needed = 1, uses_anonymous_args = 0
 7715 0000 80B5     		push	{r7, lr}
 7716              	.LCFI296:
ARM GAS  /tmp/cc65XYwf.s 			page 228


 7717              		.cfi_def_cfa_offset 8
 7718              		.cfi_offset 7, -8
 7719              		.cfi_offset 14, -4
 7720 0002 84B0     		sub	sp, sp, #16
 7721              	.LCFI297:
 7722              		.cfi_def_cfa_offset 24
 7723 0004 00AF     		add	r7, sp, #0
 7724              	.LCFI298:
 7725              		.cfi_def_cfa_register 7
 7726 0006 7860     		str	r0, [r7, #4]
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7727              		.loc 1 5051 11
 7728 0008 7B68     		ldr	r3, [r7, #4]
 7729 000a 002B     		cmp	r3, #0
 7730 000c 02D1     		bne	.L511
 7731              		.loc 1 5051 11 is_stmt 0 discriminator 1
 7732 000e 0E4B     		ldr	r3, .L516
 7733 0010 1B68     		ldr	r3, [r3]
 7734 0012 00E0     		b	.L512
 7735              	.L511:
 7736              		.loc 1 5051 11 discriminator 2
 7737 0014 7B68     		ldr	r3, [r7, #4]
 7738              	.L512:
 7739              		.loc 1 5051 9 is_stmt 1 discriminator 4
 7740 0016 BB60     		str	r3, [r7, #8]
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7741              		.loc 1 5053 3 discriminator 4
 7742 0018 FFF7FEFF 		bl	vPortEnterCritical
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 7743              		.loc 1 5055 13 discriminator 4
 7744 001c BB68     		ldr	r3, [r7, #8]
 7745 001e 93F85830 		ldrb	r3, [r3, #88]
 7746 0022 DBB2     		uxtb	r3, r3
 7747              		.loc 1 5055 6 discriminator 4
 7748 0024 022B     		cmp	r3, #2
 7749 0026 06D1     		bne	.L513
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7750              		.loc 1 5057 26
 7751 0028 BB68     		ldr	r3, [r7, #8]
 7752 002a 0022     		movs	r2, #0
 7753 002c 83F85820 		strb	r2, [r3, #88]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 7754              		.loc 1 5058 13
 7755 0030 0123     		movs	r3, #1
 7756 0032 FB60     		str	r3, [r7, #12]
 7757 0034 01E0     		b	.L514
 7758              	.L513:
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/cc65XYwf.s 			page 229


5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 7759              		.loc 1 5062 13
 7760 0036 0023     		movs	r3, #0
 7761 0038 FB60     		str	r3, [r7, #12]
 7762              	.L514:
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7763              		.loc 1 5065 3
 7764 003a FFF7FEFF 		bl	vPortExitCritical
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7765              		.loc 1 5067 10
 7766 003e FB68     		ldr	r3, [r7, #12]
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7767              		.loc 1 5068 2
 7768 0040 1846     		mov	r0, r3
 7769 0042 1037     		adds	r7, r7, #16
 7770              	.LCFI299:
 7771              		.cfi_def_cfa_offset 8
 7772 0044 BD46     		mov	sp, r7
 7773              	.LCFI300:
 7774              		.cfi_def_cfa_register 13
 7775              		@ sp needed
 7776 0046 80BD     		pop	{r7, pc}
 7777              	.L517:
 7778              		.align	2
 7779              	.L516:
 7780 0048 00000000 		.word	pxCurrentTCB
 7781              		.cfi_endproc
 7782              	.LFE62:
 7784              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 7785              		.align	1
 7786              		.syntax unified
 7787              		.thumb
 7788              		.thumb_func
 7789              		.fpu fpv4-sp-d16
 7791              	prvAddCurrentTaskToDelayedList:
 7792              	.LFB63:
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 7793              		.loc 1 5082 1
 7794              		.cfi_startproc
 7795              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/cc65XYwf.s 			page 230


 7796              		@ frame_needed = 1, uses_anonymous_args = 0
 7797 0000 80B5     		push	{r7, lr}
 7798              	.LCFI301:
 7799              		.cfi_def_cfa_offset 8
 7800              		.cfi_offset 7, -8
 7801              		.cfi_offset 14, -4
 7802 0002 84B0     		sub	sp, sp, #16
 7803              	.LCFI302:
 7804              		.cfi_def_cfa_offset 24
 7805 0004 00AF     		add	r7, sp, #0
 7806              	.LCFI303:
 7807              		.cfi_def_cfa_register 7
 7808 0006 7860     		str	r0, [r7, #4]
 7809 0008 3960     		str	r1, [r7]
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 7810              		.loc 1 5084 18
 7811 000a 214B     		ldr	r3, .L523
 7812 000c 1B68     		ldr	r3, [r3]
 7813 000e FB60     		str	r3, [r7, #12]
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 7814              		.loc 1 5097 35
 7815 0010 204B     		ldr	r3, .L523+4
 7816 0012 1B68     		ldr	r3, [r3]
 7817              		.loc 1 5097 6
 7818 0014 0433     		adds	r3, r3, #4
 7819 0016 1846     		mov	r0, r3
 7820 0018 FFF7FEFF 		bl	uxListRemove
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 7821              		.loc 1 5110 5
 7822 001c 7B68     		ldr	r3, [r7, #4]
 7823 001e B3F1FF3F 		cmp	r3, #-1
 7824 0022 0AD1     		bne	.L519
ARM GAS  /tmp/cc65XYwf.s 			page 231


 7825              		.loc 1 5110 41 discriminator 1
 7826 0024 3B68     		ldr	r3, [r7]
 7827 0026 002B     		cmp	r3, #0
 7828 0028 07D0     		beq	.L519
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7829              		.loc 1 5115 56
 7830 002a 1A4B     		ldr	r3, .L523+4
 7831 002c 1B68     		ldr	r3, [r3]
 7832              		.loc 1 5115 4
 7833 002e 0433     		adds	r3, r3, #4
 7834 0030 1946     		mov	r1, r3
 7835 0032 1948     		ldr	r0, .L523+8
 7836 0034 FFF7FEFF 		bl	vListInsertEnd
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
ARM GAS  /tmp/cc65XYwf.s 			page 232


5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 7837              		.loc 1 5190 1
 7838 0038 26E0     		b	.L522
 7839              	.L519:
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7840              		.loc 1 5122 16
 7841 003a FA68     		ldr	r2, [r7, #12]
 7842 003c 7B68     		ldr	r3, [r7, #4]
 7843 003e 1344     		add	r3, r3, r2
 7844 0040 BB60     		str	r3, [r7, #8]
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7845              		.loc 1 5125 4
 7846 0042 144B     		ldr	r3, .L523+4
 7847 0044 1B68     		ldr	r3, [r3]
 7848 0046 BA68     		ldr	r2, [r7, #8]
 7849 0048 5A60     		str	r2, [r3, #4]
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 7850              		.loc 1 5127 6
 7851 004a BA68     		ldr	r2, [r7, #8]
 7852 004c FB68     		ldr	r3, [r7, #12]
 7853 004e 9A42     		cmp	r2, r3
 7854 0050 09D2     		bcs	.L521
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cc65XYwf.s 			page 233


 7855              		.loc 1 5131 5
 7856 0052 124B     		ldr	r3, .L523+12
 7857 0054 1A68     		ldr	r2, [r3]
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 7858              		.loc 1 5131 60
 7859 0056 0F4B     		ldr	r3, .L523+4
 7860 0058 1B68     		ldr	r3, [r3]
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 7861              		.loc 1 5131 5
 7862 005a 0433     		adds	r3, r3, #4
 7863 005c 1946     		mov	r1, r3
 7864 005e 1046     		mov	r0, r2
 7865 0060 FFF7FEFF 		bl	vListInsert
 7866              		.loc 1 5190 1
 7867 0064 10E0     		b	.L522
 7868              	.L521:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7869              		.loc 1 5137 5
 7870 0066 0E4B     		ldr	r3, .L523+16
 7871 0068 1A68     		ldr	r2, [r3]
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7872              		.loc 1 5137 52
 7873 006a 0A4B     		ldr	r3, .L523+4
 7874 006c 1B68     		ldr	r3, [r3]
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7875              		.loc 1 5137 5
 7876 006e 0433     		adds	r3, r3, #4
 7877 0070 1946     		mov	r1, r3
 7878 0072 1046     		mov	r0, r2
 7879 0074 FFF7FEFF 		bl	vListInsert
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 7880              		.loc 1 5142 21
 7881 0078 0A4B     		ldr	r3, .L523+20
 7882 007a 1B68     		ldr	r3, [r3]
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 7883              		.loc 1 5142 7
 7884 007c BA68     		ldr	r2, [r7, #8]
 7885 007e 9A42     		cmp	r2, r3
 7886 0080 02D2     		bcs	.L522
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 7887              		.loc 1 5144 27
 7888 0082 084A     		ldr	r2, .L523+20
 7889 0084 BB68     		ldr	r3, [r7, #8]
 7890 0086 1360     		str	r3, [r2]
 7891              	.L522:
 7892              		.loc 1 5190 1
 7893 0088 00BF     		nop
 7894 008a 1037     		adds	r7, r7, #16
 7895              	.LCFI304:
 7896              		.cfi_def_cfa_offset 8
 7897 008c BD46     		mov	sp, r7
 7898              	.LCFI305:
 7899              		.cfi_def_cfa_register 13
 7900              		@ sp needed
 7901 008e 80BD     		pop	{r7, pc}
 7902              	.L524:
 7903              		.align	2
ARM GAS  /tmp/cc65XYwf.s 			page 234


 7904              	.L523:
 7905 0090 00000000 		.word	xTickCount
 7906 0094 00000000 		.word	pxCurrentTCB
 7907 0098 00000000 		.word	xSuspendedTaskList
 7908 009c 00000000 		.word	pxOverflowDelayedTaskList
 7909 00a0 00000000 		.word	pxDelayedTaskList
 7910 00a4 00000000 		.word	xNextTaskUnblockTime
 7911              		.cfi_endproc
 7912              	.LFE63:
 7914              		.text
 7915              	.Letext0:
 7916              		.file 3 "/home/mego-ros2/microros_ws/firmware/toolchain/lib/gcc/arm-none-eabi/8.3.1/include/stddef
 7917              		.file 4 "/home/mego-ros2/microros_ws/firmware/toolchain/arm-none-eabi/include/machine/_default_typ
 7918              		.file 5 "/home/mego-ros2/microros_ws/firmware/toolchain/arm-none-eabi/include/sys/_types.h"
 7919              		.file 6 "/home/mego-ros2/microros_ws/firmware/toolchain/arm-none-eabi/include/sys/reent.h"
 7920              		.file 7 "/home/mego-ros2/microros_ws/firmware/toolchain/arm-none-eabi/include/sys/lock.h"
 7921              		.file 8 "/home/mego-ros2/microros_ws/firmware/toolchain/arm-none-eabi/include/stdlib.h"
 7922              		.file 9 "/home/mego-ros2/microros_ws/firmware/toolchain/arm-none-eabi/include/sys/_stdint.h"
 7923              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 7924              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 7925              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 7926              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 7927              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/cc65XYwf.s 			page 235


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/cc65XYwf.s:22     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/cc65XYwf.s:19     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/cc65XYwf.s:25     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/cc65XYwf.s:28     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/cc65XYwf.s:31     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/cc65XYwf.s:34     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/cc65XYwf.s:37     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/cc65XYwf.s:40     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/cc65XYwf.s:43     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/cc65XYwf.s:46     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/cc65XYwf.s:49     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/cc65XYwf.s:52     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/cc65XYwf.s:55     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/cc65XYwf.s:58     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/cc65XYwf.s:61     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/cc65XYwf.s:64     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/cc65XYwf.s:67     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/cc65XYwf.s:70     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/cc65XYwf.s:73     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/cc65XYwf.s:76     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/cc65XYwf.s:79     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/cc65XYwf.s:82     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/cc65XYwf.s:85     .bss.xTickCount:0000000000000000 $d
     /tmp/cc65XYwf.s:88     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/cc65XYwf.s:91     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/cc65XYwf.s:94     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/cc65XYwf.s:97     .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/cc65XYwf.s:100    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/cc65XYwf.s:103    .bss.uxPendedTicks:0000000000000000 $d
     /tmp/cc65XYwf.s:106    .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/cc65XYwf.s:109    .bss.xYieldPending:0000000000000000 $d
     /tmp/cc65XYwf.s:112    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/cc65XYwf.s:115    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/cc65XYwf.s:118    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/cc65XYwf.s:121    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/cc65XYwf.s:124    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/cc65XYwf.s:127    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/cc65XYwf.s:130    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/cc65XYwf.s:133    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/cc65XYwf.s:136    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/cc65XYwf.s:139    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/cc65XYwf.s:142    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/cc65XYwf.s:145    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/cc65XYwf.s:153    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/cc65XYwf.s:434    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/cc65XYwf.s:650    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/cc65XYwf.s:313    .text.xTaskCreate:0000000000000000 $t
     /tmp/cc65XYwf.s:320    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/cc65XYwf.s:428    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/cc65XYwf.s:644    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/cc65XYwf.s:5008   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/cc65XYwf.s:800    .text.prvAddNewTaskToReadyList:00000000000000c4 $d
     /tmp/cc65XYwf.s:811    .text.vTaskDelete:0000000000000000 $t
     /tmp/cc65XYwf.s:818    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/cc65XYwf.s:5633   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
ARM GAS  /tmp/cc65XYwf.s 			page 236


     /tmp/cc65XYwf.s:5726   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/cc65XYwf.s:975    .text.vTaskDelete:00000000000000c4 $d
     /tmp/cc65XYwf.s:987    .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/cc65XYwf.s:994    .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/cc65XYwf.s:2753   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/cc65XYwf.s:7791   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/cc65XYwf.s:2800   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/cc65XYwf.s:1195   .text.vTaskDelayUntil:00000000000000e8 $d
     /tmp/cc65XYwf.s:1202   .text.vTaskDelay:0000000000000000 $t
     /tmp/cc65XYwf.s:1209   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/cc65XYwf.s:1300   .text.vTaskDelay:0000000000000060 $d
     /tmp/cc65XYwf.s:1306   .text.eTaskGetState:0000000000000000 $t
     /tmp/cc65XYwf.s:1313   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/cc65XYwf.s:1469   .text.eTaskGetState:00000000000000b8 $d
     /tmp/cc65XYwf.s:1478   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/cc65XYwf.s:1485   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/cc65XYwf.s:1540   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/cc65XYwf.s:1545   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/cc65XYwf.s:1552   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/cc65XYwf.s:1641   .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/cc65XYwf.s:1646   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/cc65XYwf.s:1653   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/cc65XYwf.s:1881   .text.vTaskPrioritySet:0000000000000128 $d
     /tmp/cc65XYwf.s:1889   .text.vTaskSuspend:0000000000000000 $t
     /tmp/cc65XYwf.s:1896   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/cc65XYwf.s:3729   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/cc65XYwf.s:2066   .text.vTaskSuspend:00000000000000d0 $d
     /tmp/cc65XYwf.s:2076   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/cc65XYwf.s:2082   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/cc65XYwf.s:2173   .text.prvTaskIsTaskSuspended:0000000000000058 $d
     /tmp/cc65XYwf.s:2179   .text.vTaskResume:0000000000000000 $t
     /tmp/cc65XYwf.s:2186   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/cc65XYwf.s:2323   .text.vTaskResume:00000000000000ac $d
     /tmp/cc65XYwf.s:2331   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/cc65XYwf.s:2338   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/cc65XYwf.s:2507   .text.xTaskResumeFromISR:00000000000000cc $d
     /tmp/cc65XYwf.s:2516   .rodata:0000000000000000 $d
     /tmp/cc65XYwf.s:2520   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/cc65XYwf.s:2527   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/cc65XYwf.s:2672   .text.vTaskStartScheduler:00000000000000b0 $d
     /tmp/cc65XYwf.s:4951   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/cc65XYwf.s:2682   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/cc65XYwf.s:2689   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/cc65XYwf.s:2741   .text.vTaskEndScheduler:000000000000002c $d
     /tmp/cc65XYwf.s:2746   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/cc65XYwf.s:2788   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/cc65XYwf.s:2793   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/cc65XYwf.s:3463   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/cc65XYwf.s:3017   .text.xTaskResumeAll:0000000000000114 $d
     /tmp/cc65XYwf.s:3030   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/cc65XYwf.s:3037   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/cc65XYwf.s:3077   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/cc65XYwf.s:3082   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/cc65XYwf.s:3089   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/cc65XYwf.s:3130   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/cc65XYwf.s:3135   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/cc65XYwf.s:3142   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
ARM GAS  /tmp/cc65XYwf.s 			page 237


     /tmp/cc65XYwf.s:3173   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/cc65XYwf.s:3178   .text.pcTaskGetName:0000000000000000 $t
     /tmp/cc65XYwf.s:3185   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/cc65XYwf.s:3261   .text.pcTaskGetName:0000000000000044 $d
     /tmp/cc65XYwf.s:3266   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/cc65XYwf.s:3273   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/cc65XYwf.s:5361   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/cc65XYwf.s:3446   .text.uxTaskGetSystemState:0000000000000104 $d
     /tmp/cc65XYwf.s:3456   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/cc65XYwf.s:3707   .text.xTaskIncrementTick:0000000000000144 $d
     /tmp/cc65XYwf.s:3722   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/cc65XYwf.s:3867   .text.vTaskSwitchContext:00000000000000a4 $d
     /tmp/cc65XYwf.s:3876   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/cc65XYwf.s:3883   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/cc65XYwf.s:3951   .text.vTaskPlaceOnEventList:0000000000000044 $d
     /tmp/cc65XYwf.s:3956   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/cc65XYwf.s:3963   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/cc65XYwf.s:4063   .text.vTaskPlaceOnUnorderedEventList:000000000000006c $d
     /tmp/cc65XYwf.s:4069   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/cc65XYwf.s:4076   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/cc65XYwf.s:4153   .text.vTaskPlaceOnEventListRestricted:0000000000000050 $d
     /tmp/cc65XYwf.s:4158   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/cc65XYwf.s:4165   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/cc65XYwf.s:4303   .text.xTaskRemoveFromEventList:00000000000000ac $d
     /tmp/cc65XYwf.s:4313   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/cc65XYwf.s:4320   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/cc65XYwf.s:4460   .text.vTaskRemoveFromUnorderedEventList:00000000000000ac $d
     /tmp/cc65XYwf.s:4469   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/cc65XYwf.s:4476   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/cc65XYwf.s:4545   .text.vTaskSetTimeOutState:0000000000000044 $d
     /tmp/cc65XYwf.s:4551   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/cc65XYwf.s:4558   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/cc65XYwf.s:4603   .text.vTaskInternalSetTimeOutState:0000000000000024 $d
     /tmp/cc65XYwf.s:4609   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/cc65XYwf.s:4616   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/cc65XYwf.s:4777   .text.xTaskCheckForTimeOut:00000000000000b8 $d
     /tmp/cc65XYwf.s:4783   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/cc65XYwf.s:4790   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/cc65XYwf.s:4822   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/cc65XYwf.s:4827   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/cc65XYwf.s:4834   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/cc65XYwf.s:4889   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/cc65XYwf.s:4896   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/cc65XYwf.s:4945   .text.prvIdleTask:0000000000000000 $t
     /tmp/cc65XYwf.s:5104   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/cc65XYwf.s:4996   .text.prvIdleTask:0000000000000028 $d
     /tmp/cc65XYwf.s:5002   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/cc65XYwf.s:5086   .text.prvInitialiseTaskLists:0000000000000060 $d
     /tmp/cc65XYwf.s:5098   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/cc65XYwf.s:5176   .text.prvCheckTasksWaitingTermination:000000000000004c $d
     /tmp/cc65XYwf.s:5183   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/cc65XYwf.s:5190   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/cc65XYwf.s:5494   .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/cc65XYwf.s:5350   .text.vTaskGetInfo:00000000000000c8 $d
     /tmp/cc65XYwf.s:5355   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/cc65XYwf.s:5488   .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/cc65XYwf.s:5558   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
ARM GAS  /tmp/cc65XYwf.s 			page 238


     /tmp/cc65XYwf.s:5565   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/cc65XYwf.s:5622   .text.uxTaskGetStackHighWaterMark:0000000000000034 $d
     /tmp/cc65XYwf.s:5627   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/cc65XYwf.s:5720   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/cc65XYwf.s:5788   .text.prvResetNextTaskUnblockTime:0000000000000038 $d
     /tmp/cc65XYwf.s:5794   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/cc65XYwf.s:5801   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/cc65XYwf.s:5841   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/cc65XYwf.s:5846   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/cc65XYwf.s:5853   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/cc65XYwf.s:5915   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/cc65XYwf.s:5921   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/cc65XYwf.s:5928   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/cc65XYwf.s:6077   .text.xTaskPriorityInherit:00000000000000c4 $d
     /tmp/cc65XYwf.s:6084   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/cc65XYwf.s:6091   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/cc65XYwf.s:6255   .text.xTaskPriorityDisinherit:00000000000000cc $d
     /tmp/cc65XYwf.s:6262   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/cc65XYwf.s:6269   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/cc65XYwf.s:6459   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000f4 $d
     /tmp/cc65XYwf.s:6466   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/cc65XYwf.s:6473   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/cc65XYwf.s:6523   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/cc65XYwf.s:6528   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/cc65XYwf.s:6535   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/cc65XYwf.s:6580   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/cc65XYwf.s:6585   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/cc65XYwf.s:6592   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/cc65XYwf.s:6706   .text.ulTaskNotifyTake:0000000000000088 $d
     /tmp/cc65XYwf.s:6712   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/cc65XYwf.s:6719   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/cc65XYwf.s:6854   .text.xTaskNotifyWait:00000000000000ac $d
     /tmp/cc65XYwf.s:6860   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/cc65XYwf.s:6867   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/cc65XYwf.s:6948   .text.xTaskGenericNotify:0000000000000060 $d
     /tmp/cc65XYwf.s:6953   .text.xTaskGenericNotify:0000000000000074 $t
     /tmp/cc65XYwf.s:7133   .text.xTaskGenericNotify:0000000000000158 $d
     /tmp/cc65XYwf.s:7141   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/cc65XYwf.s:7148   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/cc65XYwf.s:7251   .text.xTaskGenericNotifyFromISR:0000000000000080 $d
     /tmp/cc65XYwf.s:7256   .text.xTaskGenericNotifyFromISR:0000000000000094 $t
     /tmp/cc65XYwf.s:7463   .text.xTaskGenericNotifyFromISR:0000000000000198 $d
     /tmp/cc65XYwf.s:7473   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/cc65XYwf.s:7480   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/cc65XYwf.s:7692   .text.vTaskNotifyGiveFromISR:0000000000000108 $d
     /tmp/cc65XYwf.s:7702   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/cc65XYwf.s:7709   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/cc65XYwf.s:7780   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/cc65XYwf.s:7785   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/cc65XYwf.s:7905   .text.prvAddCurrentTaskToDelayedList:0000000000000090 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
ARM GAS  /tmp/cc65XYwf.s 			page 239


vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
