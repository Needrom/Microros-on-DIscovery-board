ARM GAS  /tmp/cc5hVFFU.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	pxCurrentTCB
  18              		.section	.bss.pxCurrentTCB,"aw",%nobits
  19              		.align	2
  22              	pxCurrentTCB:
  23 0000 00000000 		.space	4
  24              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  25              		.align	2
  28              	pxReadyTasksLists:
  29 0000 00000000 		.space	1120
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  31              		.align	2
  34              	xDelayedTaskList1:
  35 0000 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  37              		.align	2
  40              	xDelayedTaskList2:
  41 0000 00000000 		.space	20
  41      00000000 
  41      00000000 
  41      00000000 
  41      00000000 
  42              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  43              		.align	2
  46              	pxDelayedTaskList:
  47 0000 00000000 		.space	4
  48              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  49              		.align	2
  52              	pxOverflowDelayedTaskList:
  53 0000 00000000 		.space	4
  54              		.section	.bss.xPendingReadyList,"aw",%nobits
  55              		.align	2
  58              	xPendingReadyList:
  59 0000 00000000 		.space	20
ARM GAS  /tmp/cc5hVFFU.s 			page 2


  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
  60              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  61              		.align	2
  64              	xTasksWaitingTermination:
  65 0000 00000000 		.space	20
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  67              		.align	2
  70              	uxDeletedTasksWaitingCleanUp:
  71 0000 00000000 		.space	4
  72              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  73              		.align	2
  76              	xSuspendedTaskList:
  77 0000 00000000 		.space	20
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.global	FreeRTOS_errno
  79              		.section	.bss.FreeRTOS_errno,"aw",%nobits
  80              		.align	2
  83              	FreeRTOS_errno:
  84 0000 00000000 		.space	4
  85              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  86              		.align	2
  89              	uxCurrentNumberOfTasks:
  90 0000 00000000 		.space	4
  91              		.section	.bss.xTickCount,"aw",%nobits
  92              		.align	2
  95              	xTickCount:
  96 0000 00000000 		.space	4
  97              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  98              		.align	2
 101              	uxTopReadyPriority:
 102 0000 00000000 		.space	4
 103              		.section	.bss.xSchedulerRunning,"aw",%nobits
 104              		.align	2
 107              	xSchedulerRunning:
 108 0000 00000000 		.space	4
 109              		.section	.bss.uxPendedTicks,"aw",%nobits
 110              		.align	2
 113              	uxPendedTicks:
 114 0000 00000000 		.space	4
 115              		.section	.bss.xYieldPending,"aw",%nobits
 116              		.align	2
 119              	xYieldPending:
 120 0000 00000000 		.space	4
 121              		.section	.bss.xNumOfOverflows,"aw",%nobits
 122              		.align	2
 125              	xNumOfOverflows:
 126 0000 00000000 		.space	4
ARM GAS  /tmp/cc5hVFFU.s 			page 3


 127              		.section	.bss.uxTaskNumber,"aw",%nobits
 128              		.align	2
 131              	uxTaskNumber:
 132 0000 00000000 		.space	4
 133              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 134              		.align	2
 137              	xNextTaskUnblockTime:
 138 0000 00000000 		.space	4
 139              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 140              		.align	2
 143              	xIdleTaskHandle:
 144 0000 00000000 		.space	4
 145              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 146              		.align	2
 149              	uxSchedulerSuspended:
 150 0000 00000000 		.space	4
 151              		.section	.text.xTaskCreateStatic,"ax",%progbits
 152              		.align	1
 153              		.global	xTaskCreateStatic
 154              		.arch armv7e-m
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu fpv4-sp-d16
 160              	xTaskCreateStatic:
 161              	.LFB7:
 162              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
ARM GAS  /tmp/cc5hVFFU.s 			page 4


  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
ARM GAS  /tmp/cc5hVFFU.s 			page 5


  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
ARM GAS  /tmp/cc5hVFFU.s 			page 6


 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
ARM GAS  /tmp/cc5hVFFU.s 			page 7


 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  /tmp/cc5hVFFU.s 			page 8


 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
ARM GAS  /tmp/cc5hVFFU.s 			page 9


 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = { 0 };/*< Prioritised rea
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = { 0 };						/*< Delayed tasks. */
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = { 0 };						/*< Delayed tasks (two lists are used
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;				/*< Points to the delayed tas
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;		/*< Points to the delay
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = { 0 };						/*< Tasks that have been readied whil
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xTasksWaitingTermination = { 0 };				/*< Tasks that have been deleted
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = { 0 };					/*< Tasks that are currently suspend
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
ARM GAS  /tmp/cc5hVFFU.s 			page 10


 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
ARM GAS  /tmp/cc5hVFFU.s 			page 11


 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  /tmp/cc5hVFFU.s 			page 12


 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc5hVFFU.s 			page 13


 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 163              		.loc 1 585 2
 164              		.cfi_startproc
 165              		@ args = 12, pretend = 0, frame = 40
 166              		@ frame_needed = 1, uses_anonymous_args = 0
 167 0000 80B5     		push	{r7, lr}
 168              	.LCFI0:
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 7, -8
 171              		.cfi_offset 14, -4
 172 0002 8EB0     		sub	sp, sp, #56
 173              	.LCFI1:
 174              		.cfi_def_cfa_offset 64
 175 0004 04AF     		add	r7, sp, #16
 176              	.LCFI2:
 177              		.cfi_def_cfa 7, 48
ARM GAS  /tmp/cc5hVFFU.s 			page 14


 178 0006 F860     		str	r0, [r7, #12]
 179 0008 B960     		str	r1, [r7, #8]
 180 000a 7A60     		str	r2, [r7, #4]
 181 000c 3B60     		str	r3, [r7]
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 182              		.loc 1 589 3
 183 000e 7B6B     		ldr	r3, [r7, #52]
 184 0010 002B     		cmp	r3, #0
 185 0012 09D1     		bne	.L2
 186              	.LBB119:
 187              	.LBB120:
 188              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
ARM GAS  /tmp/cc5hVFFU.s 			page 15


  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
ARM GAS  /tmp/cc5hVFFU.s 			page 16


 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
ARM GAS  /tmp/cc5hVFFU.s 			page 17


 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 189              		.loc 2 195 2 discriminator 1
 190              		.syntax unified
 191              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 192 0014 4FF05003 			mov r3, #80												
 193 0018 83F31188 		msr basepri, r3											
 194 001c BFF36F8F 		isb														
 195 0020 BFF34F8F 		dsb														
 196              	
 197              	@ 0 "" 2
 198              		.thumb
 199              		.syntax unified
 200 0024 3B62     		str	r3, [r7, #32]
 201              	.L3:
 202              	.LBE120:
 203              	.LBE119:
 204              		.loc 1 589 3 discriminator 1
 205 0026 FEE7     		b	.L3
 206              	.L2:
ARM GAS  /tmp/cc5hVFFU.s 			page 18


 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 207              		.loc 1 590 3
 208 0028 BB6B     		ldr	r3, [r7, #56]
 209 002a 002B     		cmp	r3, #0
 210 002c 09D1     		bne	.L4
 211              	.LBB121:
 212              	.LBB122:
 213              		.loc 2 195 2 discriminator 1
 214              		.syntax unified
 215              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 216 002e 4FF05003 			mov r3, #80												
 217 0032 83F31188 		msr basepri, r3											
 218 0036 BFF36F8F 		isb														
 219 003a BFF34F8F 		dsb														
 220              	
 221              	@ 0 "" 2
 222              		.thumb
 223              		.syntax unified
 224 003e FB61     		str	r3, [r7, #28]
 225              	.L5:
 226              	.LBE122:
 227              	.LBE121:
 228              		.loc 1 590 3 discriminator 2
 229 0040 FEE7     		b	.L5
 230              	.L4:
 231              	.LBB123:
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 232              		.loc 1 597 20
 233 0042 6023     		movs	r3, #96
 234 0044 3B61     		str	r3, [r7, #16]
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 235              		.loc 1 598 4
 236 0046 3B69     		ldr	r3, [r7, #16]
 237 0048 602B     		cmp	r3, #96
 238 004a 09D0     		beq	.L6
 239              	.LBB124:
 240              	.LBB125:
 241              		.loc 2 195 2 discriminator 1
 242              		.syntax unified
 243              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 244 004c 4FF05003 			mov r3, #80												
 245 0050 83F31188 		msr basepri, r3											
 246 0054 BFF36F8F 		isb														
 247 0058 BFF34F8F 		dsb														
 248              	
 249              	@ 0 "" 2
 250              		.thumb
 251              		.syntax unified
 252 005c BB61     		str	r3, [r7, #24]
 253              	.L7:
 254              	.LBE125:
ARM GAS  /tmp/cc5hVFFU.s 			page 19


 255              	.LBE124:
 256              		.loc 1 598 4 discriminator 3
 257 005e FEE7     		b	.L7
 258              	.L6:
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 259              		.loc 1 599 4
 260 0060 3B69     		ldr	r3, [r7, #16]
 261              	.LBE123:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 262              		.loc 1 604 5
 263 0062 BB6B     		ldr	r3, [r7, #56]
 264 0064 002B     		cmp	r3, #0
 265 0066 1ED0     		beq	.L8
 266              		.loc 1 604 32 discriminator 1
 267 0068 7B6B     		ldr	r3, [r7, #52]
 268 006a 002B     		cmp	r3, #0
 269 006c 1BD0     		beq	.L8
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 270              		.loc 1 608 13
 271 006e BB6B     		ldr	r3, [r7, #56]
 272 0070 7B62     		str	r3, [r7, #36]
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 273              		.loc 1 609 22
 274 0072 7B6A     		ldr	r3, [r7, #36]
 275 0074 7A6B     		ldr	r2, [r7, #52]
 276 0076 1A63     		str	r2, [r3, #48]
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 277              		.loc 1 615 37
 278 0078 7B6A     		ldr	r3, [r7, #36]
 279 007a 0222     		movs	r2, #2
 280 007c 83F85920 		strb	r2, [r3, #89]
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 281              		.loc 1 619 4
 282 0080 0023     		movs	r3, #0
 283 0082 0393     		str	r3, [sp, #12]
 284 0084 7B6A     		ldr	r3, [r7, #36]
 285 0086 0293     		str	r3, [sp, #8]
 286 0088 07F11403 		add	r3, r7, #20
 287 008c 0193     		str	r3, [sp, #4]
 288 008e 3B6B     		ldr	r3, [r7, #48]
 289 0090 0093     		str	r3, [sp]
 290 0092 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cc5hVFFU.s 			page 20


 291 0094 7A68     		ldr	r2, [r7, #4]
 292 0096 B968     		ldr	r1, [r7, #8]
 293 0098 F868     		ldr	r0, [r7, #12]
 294 009a FFF7FEFF 		bl	prvInitialiseNewTask
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 295              		.loc 1 620 4
 296 009e 786A     		ldr	r0, [r7, #36]
 297 00a0 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 298 00a4 01E0     		b	.L9
 299              	.L8:
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 300              		.loc 1 624 12
 301 00a6 0023     		movs	r3, #0
 302 00a8 7B61     		str	r3, [r7, #20]
 303              	.L9:
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 304              		.loc 1 627 10
 305 00aa 7B69     		ldr	r3, [r7, #20]
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 306              		.loc 1 628 2
 307 00ac 1846     		mov	r0, r3
 308 00ae 2837     		adds	r7, r7, #40
 309              	.LCFI3:
 310              		.cfi_def_cfa_offset 8
 311 00b0 BD46     		mov	sp, r7
 312              	.LCFI4:
 313              		.cfi_def_cfa_register 13
 314              		@ sp needed
 315 00b2 80BD     		pop	{r7, pc}
 316              		.cfi_endproc
 317              	.LFE7:
 319              		.section	.text.xTaskCreate,"ax",%progbits
 320              		.align	1
 321              		.global	xTaskCreate
 322              		.syntax unified
 323              		.thumb
 324              		.thumb_func
 325              		.fpu fpv4-sp-d16
 327              	xTaskCreate:
 328              	.LFB8:
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
ARM GAS  /tmp/cc5hVFFU.s 			page 21


 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
ARM GAS  /tmp/cc5hVFFU.s 			page 22


 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 329              		.loc 1 736 2
 330              		.cfi_startproc
 331              		@ args = 8, pretend = 0, frame = 32
 332              		@ frame_needed = 1, uses_anonymous_args = 0
 333 0000 80B5     		push	{r7, lr}
 334              	.LCFI5:
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 7, -8
 337              		.cfi_offset 14, -4
 338 0002 8CB0     		sub	sp, sp, #48
 339              	.LCFI6:
 340              		.cfi_def_cfa_offset 56
 341 0004 04AF     		add	r7, sp, #16
 342              	.LCFI7:
 343              		.cfi_def_cfa 7, 40
 344 0006 F860     		str	r0, [r7, #12]
 345 0008 B960     		str	r1, [r7, #8]
 346 000a 3B60     		str	r3, [r7]
ARM GAS  /tmp/cc5hVFFU.s 			page 23


 347 000c 1346     		mov	r3, r2	@ movhi
 348 000e FB80     		strh	r3, [r7, #6]	@ movhi
 349              	.LBB126:
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 350              		.loc 1 770 32
 351 0010 FB88     		ldrh	r3, [r7, #6]
 352              		.loc 1 770 14
 353 0012 9B00     		lsls	r3, r3, #2
 354 0014 1846     		mov	r0, r3
 355 0016 FFF7FEFF 		bl	pvPortMalloc
 356 001a 7861     		str	r0, [r7, #20]
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 357              		.loc 1 772 6
 358 001c 7B69     		ldr	r3, [r7, #20]
 359 001e 002B     		cmp	r3, #0
 360 0020 0ED0     		beq	.L12
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 361              		.loc 1 775 28
 362 0022 6020     		movs	r0, #96
 363 0024 FFF7FEFF 		bl	pvPortMalloc
 364 0028 F861     		str	r0, [r7, #28]
ARM GAS  /tmp/cc5hVFFU.s 			page 24


 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 365              		.loc 1 777 7
 366 002a FB69     		ldr	r3, [r7, #28]
 367 002c 002B     		cmp	r3, #0
 368 002e 03D0     		beq	.L13
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 369              		.loc 1 780 24
 370 0030 FB69     		ldr	r3, [r7, #28]
 371 0032 7A69     		ldr	r2, [r7, #20]
 372 0034 1A63     		str	r2, [r3, #48]
 373 0036 05E0     		b	.L15
 374              	.L13:
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 375              		.loc 1 786 6
 376 0038 7869     		ldr	r0, [r7, #20]
 377 003a FFF7FEFF 		bl	vPortFree
 378 003e 01E0     		b	.L15
 379              	.L12:
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 380              		.loc 1 791 14
 381 0040 0023     		movs	r3, #0
 382 0042 FB61     		str	r3, [r7, #28]
 383              	.L15:
 384              	.LBE126:
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 385              		.loc 1 796 5
 386 0044 FB69     		ldr	r3, [r7, #28]
 387 0046 002B     		cmp	r3, #0
 388 0048 17D0     		beq	.L16
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 389              		.loc 1 802 37
 390 004a FB69     		ldr	r3, [r7, #28]
 391 004c 0022     		movs	r2, #0
 392 004e 83F85920 		strb	r2, [r3, #89]
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
ARM GAS  /tmp/cc5hVFFU.s 			page 25


 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 393              		.loc 1 806 4
 394 0052 FA88     		ldrh	r2, [r7, #6]
 395 0054 0023     		movs	r3, #0
 396 0056 0393     		str	r3, [sp, #12]
 397 0058 FB69     		ldr	r3, [r7, #28]
 398 005a 0293     		str	r3, [sp, #8]
 399 005c FB6A     		ldr	r3, [r7, #44]
 400 005e 0193     		str	r3, [sp, #4]
 401 0060 BB6A     		ldr	r3, [r7, #40]
 402 0062 0093     		str	r3, [sp]
 403 0064 3B68     		ldr	r3, [r7]
 404 0066 B968     		ldr	r1, [r7, #8]
 405 0068 F868     		ldr	r0, [r7, #12]
 406 006a FFF7FEFF 		bl	prvInitialiseNewTask
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 407              		.loc 1 807 4
 408 006e F869     		ldr	r0, [r7, #28]
 409 0070 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 410              		.loc 1 808 12
 411 0074 0123     		movs	r3, #1
 412 0076 BB61     		str	r3, [r7, #24]
 413 0078 02E0     		b	.L17
 414              	.L16:
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 415              		.loc 1 812 12
 416 007a 4FF0FF33 		mov	r3, #-1
 417 007e BB61     		str	r3, [r7, #24]
 418              	.L17:
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 419              		.loc 1 815 10
 420 0080 BB69     		ldr	r3, [r7, #24]
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 421              		.loc 1 816 2
 422 0082 1846     		mov	r0, r3
 423 0084 2037     		adds	r7, r7, #32
 424              	.LCFI8:
 425              		.cfi_def_cfa_offset 8
 426 0086 BD46     		mov	sp, r7
 427              	.LCFI9:
 428              		.cfi_def_cfa_register 13
 429              		@ sp needed
 430 0088 80BD     		pop	{r7, pc}
 431              		.cfi_endproc
 432              	.LFE8:
 434              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 435              		.align	1
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
ARM GAS  /tmp/cc5hVFFU.s 			page 26


 439              		.fpu fpv4-sp-d16
 441              	prvInitialiseNewTask:
 442              	.LFB9:
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 443              		.loc 1 829 1
 444              		.cfi_startproc
 445              		@ args = 16, pretend = 0, frame = 32
 446              		@ frame_needed = 1, uses_anonymous_args = 0
 447 0000 80B5     		push	{r7, lr}
 448              	.LCFI10:
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 7, -8
 451              		.cfi_offset 14, -4
 452 0002 88B0     		sub	sp, sp, #32
 453              	.LCFI11:
 454              		.cfi_def_cfa_offset 40
 455 0004 00AF     		add	r7, sp, #0
 456              	.LCFI12:
 457              		.cfi_def_cfa_register 7
 458 0006 F860     		str	r0, [r7, #12]
 459 0008 B960     		str	r1, [r7, #8]
 460 000a 7A60     		str	r2, [r7, #4]
 461 000c 3B60     		str	r3, [r7]
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
ARM GAS  /tmp/cc5hVFFU.s 			page 27


 462              		.loc 1 851 28
 463 000e 3B6B     		ldr	r3, [r7, #48]
 464 0010 186B     		ldr	r0, [r3, #48]
 465              		.loc 1 851 12
 466 0012 7B68     		ldr	r3, [r7, #4]
 467 0014 9B00     		lsls	r3, r3, #2
 468 0016 1A46     		mov	r2, r3
 469 0018 A521     		movs	r1, #165
 470 001a FFF7FEFF 		bl	memset
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 471              		.loc 1 861 29
 472 001e 3B6B     		ldr	r3, [r7, #48]
 473 0020 1A6B     		ldr	r2, [r3, #48]
 474              		.loc 1 861 18
 475 0022 7B68     		ldr	r3, [r7, #4]
 476 0024 03F18043 		add	r3, r3, #1073741824
 477 0028 013B     		subs	r3, r3, #1
 478 002a 9B00     		lsls	r3, r3, #2
 479              		.loc 1 861 16
 480 002c 1344     		add	r3, r3, r2
 481 002e BB61     		str	r3, [r7, #24]
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 482              		.loc 1 862 40
 483 0030 BB69     		ldr	r3, [r7, #24]
 484              		.loc 1 862 81
 485 0032 23F00703 		bic	r3, r3, #7
 486              		.loc 1 862 16
 487 0036 BB61     		str	r3, [r7, #24]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 488              		.loc 1 865 3
 489 0038 BB69     		ldr	r3, [r7, #24]
 490 003a 03F00703 		and	r3, r3, #7
 491 003e 002B     		cmp	r3, #0
 492 0040 09D0     		beq	.L20
 493              	.LBB127:
 494              	.LBB128:
 495              		.loc 2 195 2 discriminator 1
 496              		.syntax unified
 497              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 498 0042 4FF05003 			mov r3, #80												
 499 0046 83F31188 		msr basepri, r3											
 500 004a BFF36F8F 		isb														
 501 004e BFF34F8F 		dsb														
 502              	
 503              	@ 0 "" 2
 504              		.thumb
ARM GAS  /tmp/cc5hVFFU.s 			page 28


 505              		.syntax unified
 506 0052 7B61     		str	r3, [r7, #20]
 507              	.L21:
 508              	.LBE128:
 509              	.LBE127:
 510              		.loc 1 865 3 discriminator 1
 511 0054 FEE7     		b	.L21
 512              	.L20:
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 513              		.loc 1 889 4
 514 0056 BB68     		ldr	r3, [r7, #8]
 515 0058 002B     		cmp	r3, #0
 516 005a 1FD0     		beq	.L22
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 517              		.loc 1 891 10
 518 005c 0023     		movs	r3, #0
 519 005e FB61     		str	r3, [r7, #28]
 520              		.loc 1 891 3
 521 0060 12E0     		b	.L23
 522              	.L26:
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 523              		.loc 1 893 38
 524 0062 BA68     		ldr	r2, [r7, #8]
 525 0064 FB69     		ldr	r3, [r7, #28]
 526 0066 1344     		add	r3, r3, r2
 527 0068 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 528              		.loc 1 893 30
 529 006a 3A6B     		ldr	r2, [r7, #48]
 530 006c FB69     		ldr	r3, [r7, #28]
 531 006e 1344     		add	r3, r3, r2
 532 0070 3433     		adds	r3, r3, #52
 533 0072 0A46     		mov	r2, r1
ARM GAS  /tmp/cc5hVFFU.s 			page 29


 534 0074 1A70     		strb	r2, [r3]
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 535              		.loc 1 898 14
 536 0076 BA68     		ldr	r2, [r7, #8]
 537 0078 FB69     		ldr	r3, [r7, #28]
 538 007a 1344     		add	r3, r3, r2
 539 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 540              		.loc 1 898 6
 541 007e 002B     		cmp	r3, #0
 542 0080 06D0     		beq	.L30
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 543              		.loc 1 891 77 discriminator 2
 544 0082 FB69     		ldr	r3, [r7, #28]
 545 0084 0133     		adds	r3, r3, #1
 546 0086 FB61     		str	r3, [r7, #28]
 547              	.L23:
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 548              		.loc 1 891 3 discriminator 1
 549 0088 FB69     		ldr	r3, [r7, #28]
 550 008a 0F2B     		cmp	r3, #15
 551 008c E9D9     		bls	.L26
 552 008e 00E0     		b	.L25
 553              	.L30:
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 554              		.loc 1 900 5
 555 0090 00BF     		nop
 556              	.L25:
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 557              		.loc 1 910 55
 558 0092 3B6B     		ldr	r3, [r7, #48]
 559 0094 0022     		movs	r2, #0
 560 0096 83F84320 		strb	r2, [r3, #67]
 561 009a 03E0     		b	.L27
 562              	.L22:
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 563              		.loc 1 916 29
 564 009c 3B6B     		ldr	r3, [r7, #48]
 565 009e 0022     		movs	r2, #0
ARM GAS  /tmp/cc5hVFFU.s 			page 30


 566 00a0 83F83420 		strb	r2, [r3, #52]
 567              	.L27:
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 568              		.loc 1 921 4
 569 00a4 BB6A     		ldr	r3, [r7, #40]
 570 00a6 372B     		cmp	r3, #55
 571 00a8 01D9     		bls	.L28
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 572              		.loc 1 923 14
 573 00aa 3723     		movs	r3, #55
 574 00ac BB62     		str	r3, [r7, #40]
 575              	.L28:
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 576              		.loc 1 930 23
 577 00ae 3B6B     		ldr	r3, [r7, #48]
 578 00b0 BA6A     		ldr	r2, [r7, #40]
 579 00b2 DA62     		str	r2, [r3, #44]
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 580              		.loc 1 933 28
 581 00b4 3B6B     		ldr	r3, [r7, #48]
 582 00b6 BA6A     		ldr	r2, [r7, #40]
 583 00b8 DA64     		str	r2, [r3, #76]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 584              		.loc 1 934 27
 585 00ba 3B6B     		ldr	r3, [r7, #48]
 586 00bc 0022     		movs	r2, #0
 587 00be 1A65     		str	r2, [r3, #80]
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 588              		.loc 1 938 2
 589 00c0 3B6B     		ldr	r3, [r7, #48]
 590 00c2 0433     		adds	r3, r3, #4
 591 00c4 1846     		mov	r0, r3
 592 00c6 FFF7FEFF 		bl	vListInitialiseItem
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 593              		.loc 1 939 2
 594 00ca 3B6B     		ldr	r3, [r7, #48]
 595 00cc 1833     		adds	r3, r3, #24
 596 00ce 1846     		mov	r0, r3
 597 00d0 FFF7FEFF 		bl	vListInitialiseItem
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
ARM GAS  /tmp/cc5hVFFU.s 			page 31


 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 598              		.loc 1 943 2
 599 00d4 3B6B     		ldr	r3, [r7, #48]
 600 00d6 3A6B     		ldr	r2, [r7, #48]
 601 00d8 1A61     		str	r2, [r3, #16]
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 602              		.loc 1 946 2
 603 00da BB6A     		ldr	r3, [r7, #40]
 604 00dc C3F13802 		rsb	r2, r3, #56
 605 00e0 3B6B     		ldr	r3, [r7, #48]
 606 00e2 9A61     		str	r2, [r3, #24]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 607              		.loc 1 947 2
 608 00e4 3B6B     		ldr	r3, [r7, #48]
 609 00e6 3A6B     		ldr	r2, [r7, #48]
 610 00e8 5A62     		str	r2, [r3, #36]
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  /tmp/cc5hVFFU.s 			page 32


 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 611              		.loc 1 989 29
 612 00ea 3B6B     		ldr	r3, [r7, #48]
 613 00ec 0022     		movs	r2, #0
 614 00ee 5A65     		str	r2, [r3, #84]
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 615              		.loc 1 990 27
 616 00f0 3B6B     		ldr	r3, [r7, #48]
 617 00f2 0022     		movs	r2, #0
 618 00f4 83F85820 		strb	r2, [r3, #88]
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
ARM GAS  /tmp/cc5hVFFU.s 			page 33


1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 619              		.loc 1 1053 29
 620 00f8 3A68     		ldr	r2, [r7]
 621 00fa F968     		ldr	r1, [r7, #12]
 622 00fc B869     		ldr	r0, [r7, #24]
 623 00fe FFF7FEFF 		bl	pxPortInitialiseStack
 624 0102 0246     		mov	r2, r0
 625              		.loc 1 1053 27
 626 0104 3B6B     		ldr	r3, [r7, #48]
 627 0106 1A60     		str	r2, [r3]
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 628              		.loc 1 1059 4
 629 0108 FB6A     		ldr	r3, [r7, #44]
 630 010a 002B     		cmp	r3, #0
 631 010c 02D0     		beq	.L31
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 632              		.loc 1 1063 18
 633 010e FB6A     		ldr	r3, [r7, #44]
 634 0110 3A6B     		ldr	r2, [r7, #48]
 635 0112 1A60     		str	r2, [r3]
 636              	.L31:
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 637              		.loc 1 1069 1
 638 0114 00BF     		nop
 639 0116 2037     		adds	r7, r7, #32
 640              	.LCFI13:
ARM GAS  /tmp/cc5hVFFU.s 			page 34


 641              		.cfi_def_cfa_offset 8
 642 0118 BD46     		mov	sp, r7
 643              	.LCFI14:
 644              		.cfi_def_cfa_register 13
 645              		@ sp needed
 646 011a 80BD     		pop	{r7, pc}
 647              		.cfi_endproc
 648              	.LFE9:
 650              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 651              		.align	1
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 655              		.fpu fpv4-sp-d16
 657              	prvAddNewTaskToReadyList:
 658              	.LFB10:
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 659              		.loc 1 1073 1
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 8
 662              		@ frame_needed = 1, uses_anonymous_args = 0
 663 0000 80B5     		push	{r7, lr}
 664              	.LCFI15:
 665              		.cfi_def_cfa_offset 8
 666              		.cfi_offset 7, -8
 667              		.cfi_offset 14, -4
 668 0002 82B0     		sub	sp, sp, #8
 669              	.LCFI16:
 670              		.cfi_def_cfa_offset 16
 671 0004 00AF     		add	r7, sp, #0
 672              	.LCFI17:
 673              		.cfi_def_cfa_register 7
 674 0006 7860     		str	r0, [r7, #4]
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 675              		.loc 1 1076 2
 676 0008 FFF7FEFF 		bl	vPortEnterCritical
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 677              		.loc 1 1078 25
 678 000c 2D4B     		ldr	r3, .L38
 679 000e 1B68     		ldr	r3, [r3]
 680 0010 0133     		adds	r3, r3, #1
 681 0012 2C4A     		ldr	r2, .L38
 682 0014 1360     		str	r3, [r2]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 683              		.loc 1 1079 20
 684 0016 2C4B     		ldr	r3, .L38+4
 685 0018 1B68     		ldr	r3, [r3]
 686              		.loc 1 1079 5
 687 001a 002B     		cmp	r3, #0
 688 001c 09D1     		bne	.L33
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc5hVFFU.s 			page 35


1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 689              		.loc 1 1083 17
 690 001e 2A4A     		ldr	r2, .L38+4
 691 0020 7B68     		ldr	r3, [r7, #4]
 692 0022 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 693              		.loc 1 1085 31
 694 0024 274B     		ldr	r3, .L38
 695 0026 1B68     		ldr	r3, [r3]
 696              		.loc 1 1085 6
 697 0028 012B     		cmp	r3, #1
 698 002a 10D1     		bne	.L34
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 699              		.loc 1 1090 5
 700 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 701 0030 0DE0     		b	.L34
 702              	.L33:
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 703              		.loc 1 1102 26
 704 0032 264B     		ldr	r3, .L38+8
 705 0034 1B68     		ldr	r3, [r3]
 706              		.loc 1 1102 6
 707 0036 002B     		cmp	r3, #0
 708 0038 09D1     		bne	.L34
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 709              		.loc 1 1104 21
 710 003a 234B     		ldr	r3, .L38+4
 711 003c 1B68     		ldr	r3, [r3]
 712 003e DA6A     		ldr	r2, [r3, #44]
 713              		.loc 1 1104 45
 714 0040 7B68     		ldr	r3, [r7, #4]
 715 0042 DB6A     		ldr	r3, [r3, #44]
 716              		.loc 1 1104 7
 717 0044 9A42     		cmp	r2, r3
 718 0046 02D8     		bhi	.L34
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 719              		.loc 1 1106 19
ARM GAS  /tmp/cc5hVFFU.s 			page 36


 720 0048 1F4A     		ldr	r2, .L38+4
 721 004a 7B68     		ldr	r3, [r7, #4]
 722 004c 1360     		str	r3, [r2]
 723              	.L34:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 724              		.loc 1 1119 15
 725 004e 204B     		ldr	r3, .L38+12
 726 0050 1B68     		ldr	r3, [r3]
 727 0052 0133     		adds	r3, r3, #1
 728 0054 1E4A     		ldr	r2, .L38+12
 729 0056 1360     		str	r3, [r2]
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 730              		.loc 1 1124 26
 731 0058 1D4B     		ldr	r3, .L38+12
 732 005a 1A68     		ldr	r2, [r3]
 733 005c 7B68     		ldr	r3, [r7, #4]
 734 005e 5A64     		str	r2, [r3, #68]
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 735              		.loc 1 1129 3
 736 0060 7B68     		ldr	r3, [r7, #4]
 737 0062 DA6A     		ldr	r2, [r3, #44]
 738 0064 1B4B     		ldr	r3, .L38+16
 739 0066 1B68     		ldr	r3, [r3]
 740 0068 9A42     		cmp	r2, r3
 741 006a 03D9     		bls	.L35
 742              		.loc 1 1129 3 is_stmt 0 discriminator 1
 743 006c 7B68     		ldr	r3, [r7, #4]
 744 006e DB6A     		ldr	r3, [r3, #44]
 745 0070 184A     		ldr	r2, .L38+16
 746 0072 1360     		str	r3, [r2]
 747              	.L35:
 748              		.loc 1 1129 3 discriminator 3
 749 0074 7B68     		ldr	r3, [r7, #4]
 750 0076 DA6A     		ldr	r2, [r3, #44]
 751 0078 1346     		mov	r3, r2
 752 007a 9B00     		lsls	r3, r3, #2
 753 007c 1344     		add	r3, r3, r2
ARM GAS  /tmp/cc5hVFFU.s 			page 37


 754 007e 9B00     		lsls	r3, r3, #2
 755 0080 154A     		ldr	r2, .L38+20
 756 0082 1A44     		add	r2, r2, r3
 757 0084 7B68     		ldr	r3, [r7, #4]
 758 0086 0433     		adds	r3, r3, #4
 759 0088 1946     		mov	r1, r3
 760 008a 1046     		mov	r0, r2
 761 008c FFF7FEFF 		bl	vListInsertEnd
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 762              		.loc 1 1133 2 is_stmt 1 discriminator 3
 763 0090 FFF7FEFF 		bl	vPortExitCritical
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 764              		.loc 1 1135 24 discriminator 3
 765 0094 0D4B     		ldr	r3, .L38+8
 766 0096 1B68     		ldr	r3, [r3]
 767              		.loc 1 1135 4 discriminator 3
 768 0098 002B     		cmp	r3, #0
 769 009a 0ED0     		beq	.L37
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 770              		.loc 1 1139 19
 771 009c 0A4B     		ldr	r3, .L38+4
 772 009e 1B68     		ldr	r3, [r3]
 773 00a0 DA6A     		ldr	r2, [r3, #44]
 774              		.loc 1 1139 42
 775 00a2 7B68     		ldr	r3, [r7, #4]
 776 00a4 DB6A     		ldr	r3, [r3, #44]
 777              		.loc 1 1139 5
 778 00a6 9A42     		cmp	r2, r3
 779 00a8 07D2     		bcs	.L37
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 780              		.loc 1 1141 4
 781 00aa 0C4B     		ldr	r3, .L38+24
 782 00ac 4FF08052 		mov	r2, #268435456
 783 00b0 1A60     		str	r2, [r3]
 784              		.syntax unified
 785              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 786 00b2 BFF34F8F 		dsb
 787              	@ 0 "" 2
 788              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 789 00b6 BFF36F8F 		isb
 790              	@ 0 "" 2
 791              		.thumb
 792              		.syntax unified
 793              	.L37:
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc5hVFFU.s 			page 38


1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 794              		.loc 1 1152 1
 795 00ba 00BF     		nop
 796 00bc 0837     		adds	r7, r7, #8
 797              	.LCFI18:
 798              		.cfi_def_cfa_offset 8
 799 00be BD46     		mov	sp, r7
 800              	.LCFI19:
 801              		.cfi_def_cfa_register 13
 802              		@ sp needed
 803 00c0 80BD     		pop	{r7, pc}
 804              	.L39:
 805 00c2 00BF     		.align	2
 806              	.L38:
 807 00c4 00000000 		.word	uxCurrentNumberOfTasks
 808 00c8 00000000 		.word	pxCurrentTCB
 809 00cc 00000000 		.word	xSchedulerRunning
 810 00d0 00000000 		.word	uxTaskNumber
 811 00d4 00000000 		.word	uxTopReadyPriority
 812 00d8 00000000 		.word	pxReadyTasksLists
 813 00dc 04ED00E0 		.word	-536810236
 814              		.cfi_endproc
 815              	.LFE10:
 817              		.section	.text.vTaskDelete,"ax",%progbits
 818              		.align	1
 819              		.global	vTaskDelete
 820              		.syntax unified
 821              		.thumb
 822              		.thumb_func
 823              		.fpu fpv4-sp-d16
 825              	vTaskDelete:
 826              	.LFB11:
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 827              		.loc 1 1158 2
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 16
 830              		@ frame_needed = 1, uses_anonymous_args = 0
 831 0000 80B5     		push	{r7, lr}
 832              	.LCFI20:
 833              		.cfi_def_cfa_offset 8
 834              		.cfi_offset 7, -8
 835              		.cfi_offset 14, -4
 836 0002 84B0     		sub	sp, sp, #16
 837              	.LCFI21:
 838              		.cfi_def_cfa_offset 24
 839 0004 00AF     		add	r7, sp, #0
 840              	.LCFI22:
ARM GAS  /tmp/cc5hVFFU.s 			page 39


 841              		.cfi_def_cfa_register 7
 842 0006 7860     		str	r0, [r7, #4]
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 843              		.loc 1 1161 3
 844 0008 FFF7FEFF 		bl	vPortEnterCritical
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 845              		.loc 1 1165 12
 846 000c 7B68     		ldr	r3, [r7, #4]
 847 000e 002B     		cmp	r3, #0
 848 0010 02D1     		bne	.L41
 849              		.loc 1 1165 12 is_stmt 0 discriminator 1
 850 0012 2C4B     		ldr	r3, .L50
 851 0014 1B68     		ldr	r3, [r3]
 852 0016 00E0     		b	.L42
 853              	.L41:
 854              		.loc 1 1165 12 discriminator 2
 855 0018 7B68     		ldr	r3, [r7, #4]
 856              	.L42:
 857              		.loc 1 1165 10 is_stmt 1 discriminator 4
 858 001a FB60     		str	r3, [r7, #12]
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 859              		.loc 1 1168 8 discriminator 4
 860 001c FB68     		ldr	r3, [r7, #12]
 861 001e 0433     		adds	r3, r3, #4
 862 0020 1846     		mov	r0, r3
 863 0022 FFF7FEFF 		bl	uxListRemove
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 864              		.loc 1 1178 8 discriminator 4
 865 0026 FB68     		ldr	r3, [r7, #12]
 866 0028 9B6A     		ldr	r3, [r3, #40]
 867              		.loc 1 1178 6 discriminator 4
 868 002a 002B     		cmp	r3, #0
 869 002c 04D0     		beq	.L43
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 870              		.loc 1 1180 14
 871 002e FB68     		ldr	r3, [r7, #12]
 872 0030 1833     		adds	r3, r3, #24
 873 0032 1846     		mov	r0, r3
 874 0034 FFF7FEFF 		bl	uxListRemove
 875              	.L43:
ARM GAS  /tmp/cc5hVFFU.s 			page 40


1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 876              		.loc 1 1191 16
 877 0038 234B     		ldr	r3, .L50+4
 878 003a 1B68     		ldr	r3, [r3]
 879 003c 0133     		adds	r3, r3, #1
 880 003e 224A     		ldr	r2, .L50+4
 881 0040 1360     		str	r3, [r2]
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 882              		.loc 1 1193 14
 883 0042 204B     		ldr	r3, .L50
 884 0044 1B68     		ldr	r3, [r3]
 885              		.loc 1 1193 6
 886 0046 FA68     		ldr	r2, [r7, #12]
 887 0048 9A42     		cmp	r2, r3
 888 004a 0BD1     		bne	.L44
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 889              		.loc 1 1200 5
 890 004c FB68     		ldr	r3, [r7, #12]
 891 004e 0433     		adds	r3, r3, #4
 892 0050 1946     		mov	r1, r3
 893 0052 1E48     		ldr	r0, .L50+8
 894 0054 FFF7FEFF 		bl	vListInsertEnd
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 895              		.loc 1 1205 5
 896 0058 1D4B     		ldr	r3, .L50+12
 897 005a 1B68     		ldr	r3, [r3]
 898 005c 0133     		adds	r3, r3, #1
 899 005e 1C4A     		ldr	r2, .L50+12
 900 0060 1360     		str	r3, [r2]
 901 0062 09E0     		b	.L45
 902              	.L44:
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
ARM GAS  /tmp/cc5hVFFU.s 			page 41


1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 903              		.loc 1 1216 5
 904 0064 1B4B     		ldr	r3, .L50+16
 905 0066 1B68     		ldr	r3, [r3]
 906 0068 013B     		subs	r3, r3, #1
 907 006a 1A4A     		ldr	r2, .L50+16
 908 006c 1360     		str	r3, [r2]
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 909              		.loc 1 1217 5
 910 006e F868     		ldr	r0, [r7, #12]
 911 0070 FFF7FEFF 		bl	prvDeleteTCB
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 912              		.loc 1 1221 5
 913 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 914              	.L45:
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 915              		.loc 1 1226 3
 916 0078 FFF7FEFF 		bl	vPortExitCritical
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 917              		.loc 1 1230 25
 918 007c 164B     		ldr	r3, .L50+20
 919 007e 1B68     		ldr	r3, [r3]
 920              		.loc 1 1230 5
 921 0080 002B     		cmp	r3, #0
 922 0082 1AD0     		beq	.L49
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 923              		.loc 1 1232 14
 924 0084 0F4B     		ldr	r3, .L50
 925 0086 1B68     		ldr	r3, [r3]
 926              		.loc 1 1232 6
 927 0088 FA68     		ldr	r2, [r7, #12]
 928 008a 9A42     		cmp	r2, r3
 929 008c 15D1     		bne	.L49
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 930              		.loc 1 1234 5
 931 008e 134B     		ldr	r3, .L50+24
 932 0090 1B68     		ldr	r3, [r3]
 933 0092 002B     		cmp	r3, #0
 934 0094 09D0     		beq	.L47
 935              	.LBB129:
ARM GAS  /tmp/cc5hVFFU.s 			page 42


 936              	.LBB130:
 937              		.loc 2 195 2 discriminator 1
 938              		.syntax unified
 939              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 940 0096 4FF05003 			mov r3, #80												
 941 009a 83F31188 		msr basepri, r3											
 942 009e BFF36F8F 		isb														
 943 00a2 BFF34F8F 		dsb														
 944              	
 945              	@ 0 "" 2
 946              		.thumb
 947              		.syntax unified
 948 00a6 BB60     		str	r3, [r7, #8]
 949              	.L48:
 950              	.LBE130:
 951              	.LBE129:
 952              		.loc 1 1234 5 discriminator 1
 953 00a8 FEE7     		b	.L48
 954              	.L47:
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 955              		.loc 1 1235 5
 956 00aa 0D4B     		ldr	r3, .L50+28
 957 00ac 4FF08052 		mov	r2, #268435456
 958 00b0 1A60     		str	r2, [r3]
 959              		.syntax unified
 960              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 961 00b2 BFF34F8F 		dsb
 962              	@ 0 "" 2
 963              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 964 00b6 BFF36F8F 		isb
 965              	@ 0 "" 2
 966              		.thumb
 967              		.syntax unified
 968              	.L49:
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 969              		.loc 1 1242 2
 970 00ba 00BF     		nop
 971 00bc 1037     		adds	r7, r7, #16
 972              	.LCFI23:
 973              		.cfi_def_cfa_offset 8
 974 00be BD46     		mov	sp, r7
 975              	.LCFI24:
 976              		.cfi_def_cfa_register 13
 977              		@ sp needed
 978 00c0 80BD     		pop	{r7, pc}
 979              	.L51:
 980 00c2 00BF     		.align	2
 981              	.L50:
 982 00c4 00000000 		.word	pxCurrentTCB
 983 00c8 00000000 		.word	uxTaskNumber
 984 00cc 00000000 		.word	xTasksWaitingTermination
ARM GAS  /tmp/cc5hVFFU.s 			page 43


 985 00d0 00000000 		.word	uxDeletedTasksWaitingCleanUp
 986 00d4 00000000 		.word	uxCurrentNumberOfTasks
 987 00d8 00000000 		.word	xSchedulerRunning
 988 00dc 00000000 		.word	uxSchedulerSuspended
 989 00e0 04ED00E0 		.word	-536810236
 990              		.cfi_endproc
 991              	.LFE11:
 993              		.section	.text.vTaskDelayUntil,"ax",%progbits
 994              		.align	1
 995              		.global	vTaskDelayUntil
 996              		.syntax unified
 997              		.thumb
 998              		.thumb_func
 999              		.fpu fpv4-sp-d16
 1001              	vTaskDelayUntil:
 1002              	.LFB12:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1003              		.loc 1 1250 2
 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 40
 1006              		@ frame_needed = 1, uses_anonymous_args = 0
 1007 0000 80B5     		push	{r7, lr}
 1008              	.LCFI25:
 1009              		.cfi_def_cfa_offset 8
 1010              		.cfi_offset 7, -8
 1011              		.cfi_offset 14, -4
 1012 0002 8AB0     		sub	sp, sp, #40
 1013              	.LCFI26:
 1014              		.cfi_def_cfa_offset 48
 1015 0004 00AF     		add	r7, sp, #0
 1016              	.LCFI27:
 1017              		.cfi_def_cfa_register 7
 1018 0006 7860     		str	r0, [r7, #4]
 1019 0008 3960     		str	r1, [r7]
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1020              		.loc 1 1252 30
 1021 000a 0023     		movs	r3, #0
 1022 000c 7B62     		str	r3, [r7, #36]
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1023              		.loc 1 1254 3
 1024 000e 7B68     		ldr	r3, [r7, #4]
 1025 0010 002B     		cmp	r3, #0
 1026 0012 09D1     		bne	.L53
 1027              	.LBB131:
 1028              	.LBB132:
 1029              		.loc 2 195 2 discriminator 1
 1030              		.syntax unified
 1031              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/cc5hVFFU.s 			page 44


 1032 0014 4FF05003 			mov r3, #80												
 1033 0018 83F31188 		msr basepri, r3											
 1034 001c BFF36F8F 		isb														
 1035 0020 BFF34F8F 		dsb														
 1036              	
 1037              	@ 0 "" 2
 1038              		.thumb
 1039              		.syntax unified
 1040 0024 7B61     		str	r3, [r7, #20]
 1041              	.L54:
 1042              	.LBE132:
 1043              	.LBE131:
 1044              		.loc 1 1254 3 discriminator 1
 1045 0026 FEE7     		b	.L54
 1046              	.L53:
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1047              		.loc 1 1255 3
 1048 0028 3B68     		ldr	r3, [r7]
 1049 002a 002B     		cmp	r3, #0
 1050 002c 09D1     		bne	.L55
 1051              	.LBB133:
 1052              	.LBB134:
 1053              		.loc 2 195 2 discriminator 1
 1054              		.syntax unified
 1055              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1056 002e 4FF05003 			mov r3, #80												
 1057 0032 83F31188 		msr basepri, r3											
 1058 0036 BFF36F8F 		isb														
 1059 003a BFF34F8F 		dsb														
 1060              	
 1061              	@ 0 "" 2
 1062              		.thumb
 1063              		.syntax unified
 1064 003e 3B61     		str	r3, [r7, #16]
 1065              	.L56:
 1066              	.LBE134:
 1067              	.LBE133:
 1068              		.loc 1 1255 3 discriminator 2
 1069 0040 FEE7     		b	.L56
 1070              	.L55:
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 1071              		.loc 1 1256 3
 1072 0042 294B     		ldr	r3, .L65
 1073 0044 1B68     		ldr	r3, [r3]
 1074 0046 002B     		cmp	r3, #0
 1075 0048 09D0     		beq	.L57
 1076              	.LBB135:
 1077              	.LBB136:
 1078              		.loc 2 195 2 discriminator 1
 1079              		.syntax unified
 1080              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1081 004a 4FF05003 			mov r3, #80												
 1082 004e 83F31188 		msr basepri, r3											
 1083 0052 BFF36F8F 		isb														
 1084 0056 BFF34F8F 		dsb														
 1085              	
 1086              	@ 0 "" 2
ARM GAS  /tmp/cc5hVFFU.s 			page 45


 1087              		.thumb
 1088              		.syntax unified
 1089 005a FB60     		str	r3, [r7, #12]
 1090              	.L58:
 1091              	.LBE136:
 1092              	.LBE135:
 1093              		.loc 1 1256 3 discriminator 3
 1094 005c FEE7     		b	.L58
 1095              	.L57:
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1096              		.loc 1 1258 3
 1097 005e FFF7FEFF 		bl	vTaskSuspendAll
 1098              	.LBB137:
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 1099              		.loc 1 1262 21
 1100 0062 224B     		ldr	r3, .L65+4
 1101 0064 1B68     		ldr	r3, [r3]
 1102 0066 3B62     		str	r3, [r7, #32]
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1103              		.loc 1 1265 18
 1104 0068 7B68     		ldr	r3, [r7, #4]
 1105 006a 1B68     		ldr	r3, [r3]
 1106              		.loc 1 1265 16
 1107 006c 3A68     		ldr	r2, [r7]
 1108 006e 1344     		add	r3, r3, r2
 1109 0070 FB61     		str	r3, [r7, #28]
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 1110              		.loc 1 1267 26
 1111 0072 7B68     		ldr	r3, [r7, #4]
 1112 0074 1B68     		ldr	r3, [r3]
 1113              		.loc 1 1267 6
 1114 0076 3A6A     		ldr	r2, [r7, #32]
 1115 0078 9A42     		cmp	r2, r3
 1116 007a 0BD2     		bcs	.L59
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1117              		.loc 1 1274 25
 1118 007c 7B68     		ldr	r3, [r7, #4]
 1119 007e 1B68     		ldr	r3, [r3]
 1120              		.loc 1 1274 7
 1121 0080 FA69     		ldr	r2, [r7, #28]
 1122 0082 9A42     		cmp	r2, r3
 1123 0084 11D2     		bcs	.L60
 1124              		.loc 1 1274 47 discriminator 1
 1125 0086 FA69     		ldr	r2, [r7, #28]
ARM GAS  /tmp/cc5hVFFU.s 			page 46


 1126 0088 3B6A     		ldr	r3, [r7, #32]
 1127 008a 9A42     		cmp	r2, r3
 1128 008c 0DD9     		bls	.L60
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1129              		.loc 1 1276 19
 1130 008e 0123     		movs	r3, #1
 1131 0090 7B62     		str	r3, [r7, #36]
 1132 0092 0AE0     		b	.L60
 1133              	.L59:
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1134              		.loc 1 1288 25
 1135 0094 7B68     		ldr	r3, [r7, #4]
 1136 0096 1B68     		ldr	r3, [r3]
 1137              		.loc 1 1288 7
 1138 0098 FA69     		ldr	r2, [r7, #28]
 1139 009a 9A42     		cmp	r2, r3
 1140 009c 03D3     		bcc	.L61
 1141              		.loc 1 1288 47 discriminator 1
 1142 009e FA69     		ldr	r2, [r7, #28]
 1143 00a0 3B6A     		ldr	r3, [r7, #32]
 1144 00a2 9A42     		cmp	r2, r3
 1145 00a4 01D9     		bls	.L60
 1146              	.L61:
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1147              		.loc 1 1290 19
 1148 00a6 0123     		movs	r3, #1
 1149 00a8 7B62     		str	r3, [r7, #36]
 1150              	.L60:
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1151              		.loc 1 1299 24
 1152 00aa 7B68     		ldr	r3, [r7, #4]
 1153 00ac FA69     		ldr	r2, [r7, #28]
 1154 00ae 1A60     		str	r2, [r3]
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1155              		.loc 1 1301 6
ARM GAS  /tmp/cc5hVFFU.s 			page 47


 1156 00b0 7B6A     		ldr	r3, [r7, #36]
 1157 00b2 002B     		cmp	r3, #0
 1158 00b4 06D0     		beq	.L62
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1159              		.loc 1 1307 5
 1160 00b6 FA69     		ldr	r2, [r7, #28]
 1161 00b8 3B6A     		ldr	r3, [r7, #32]
 1162 00ba D31A     		subs	r3, r2, r3
 1163 00bc 0021     		movs	r1, #0
 1164 00be 1846     		mov	r0, r3
 1165 00c0 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1166              	.L62:
 1167              	.LBE137:
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1168              		.loc 1 1314 21
 1169 00c4 FFF7FEFF 		bl	xTaskResumeAll
 1170 00c8 B861     		str	r0, [r7, #24]
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1171              		.loc 1 1318 5
 1172 00ca BB69     		ldr	r3, [r7, #24]
 1173 00cc 002B     		cmp	r3, #0
 1174 00ce 07D1     		bne	.L64
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1175              		.loc 1 1320 4
 1176 00d0 074B     		ldr	r3, .L65+8
 1177 00d2 4FF08052 		mov	r2, #268435456
 1178 00d6 1A60     		str	r2, [r3]
 1179              		.syntax unified
 1180              	@ 1320 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1181 00d8 BFF34F8F 		dsb
 1182              	@ 0 "" 2
 1183              	@ 1320 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1184 00dc BFF36F8F 		isb
 1185              	@ 0 "" 2
 1186              		.thumb
 1187              		.syntax unified
 1188              	.L64:
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc5hVFFU.s 			page 48


1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1189              		.loc 1 1326 2
 1190 00e0 00BF     		nop
 1191 00e2 2837     		adds	r7, r7, #40
 1192              	.LCFI28:
 1193              		.cfi_def_cfa_offset 8
 1194 00e4 BD46     		mov	sp, r7
 1195              	.LCFI29:
 1196              		.cfi_def_cfa_register 13
 1197              		@ sp needed
 1198 00e6 80BD     		pop	{r7, pc}
 1199              	.L66:
 1200              		.align	2
 1201              	.L65:
 1202 00e8 00000000 		.word	uxSchedulerSuspended
 1203 00ec 00000000 		.word	xTickCount
 1204 00f0 04ED00E0 		.word	-536810236
 1205              		.cfi_endproc
 1206              	.LFE12:
 1208              		.section	.text.vTaskDelay,"ax",%progbits
 1209              		.align	1
 1210              		.global	vTaskDelay
 1211              		.syntax unified
 1212              		.thumb
 1213              		.thumb_func
 1214              		.fpu fpv4-sp-d16
 1216              	vTaskDelay:
 1217              	.LFB13:
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1218              		.loc 1 1334 2
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 16
 1221              		@ frame_needed = 1, uses_anonymous_args = 0
 1222 0000 80B5     		push	{r7, lr}
 1223              	.LCFI30:
 1224              		.cfi_def_cfa_offset 8
 1225              		.cfi_offset 7, -8
 1226              		.cfi_offset 14, -4
 1227 0002 84B0     		sub	sp, sp, #16
 1228              	.LCFI31:
 1229              		.cfi_def_cfa_offset 24
 1230 0004 00AF     		add	r7, sp, #0
 1231              	.LCFI32:
 1232              		.cfi_def_cfa_register 7
 1233 0006 7860     		str	r0, [r7, #4]
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1234              		.loc 1 1335 13
 1235 0008 0023     		movs	r3, #0
 1236 000a FB60     		str	r3, [r7, #12]
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc5hVFFU.s 			page 49


1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1237              		.loc 1 1338 5
 1238 000c 7B68     		ldr	r3, [r7, #4]
 1239 000e 002B     		cmp	r3, #0
 1240 0010 16D0     		beq	.L68
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1241              		.loc 1 1340 4
 1242 0012 134B     		ldr	r3, .L73
 1243 0014 1B68     		ldr	r3, [r3]
 1244 0016 002B     		cmp	r3, #0
 1245 0018 09D0     		beq	.L69
 1246              	.LBB138:
 1247              	.LBB139:
 1248              		.loc 2 195 2 discriminator 1
 1249              		.syntax unified
 1250              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1251 001a 4FF05003 			mov r3, #80												
 1252 001e 83F31188 		msr basepri, r3											
 1253 0022 BFF36F8F 		isb														
 1254 0026 BFF34F8F 		dsb														
 1255              	
 1256              	@ 0 "" 2
 1257              		.thumb
 1258              		.syntax unified
 1259 002a BB60     		str	r3, [r7, #8]
 1260              	.L70:
 1261              	.LBE139:
 1262              	.LBE138:
 1263              		.loc 1 1340 4 discriminator 1
 1264 002c FEE7     		b	.L70
 1265              	.L69:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1266              		.loc 1 1341 4
 1267 002e FFF7FEFF 		bl	vTaskSuspendAll
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1268              		.loc 1 1352 5
 1269 0032 0021     		movs	r1, #0
 1270 0034 7868     		ldr	r0, [r7, #4]
 1271 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1272              		.loc 1 1354 22
 1273 003a FFF7FEFF 		bl	xTaskResumeAll
 1274 003e F860     		str	r0, [r7, #12]
 1275              	.L68:
ARM GAS  /tmp/cc5hVFFU.s 			page 50


1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1276              		.loc 1 1363 5
 1277 0040 FB68     		ldr	r3, [r7, #12]
 1278 0042 002B     		cmp	r3, #0
 1279 0044 07D1     		bne	.L72
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1280              		.loc 1 1365 4
 1281 0046 074B     		ldr	r3, .L73+4
 1282 0048 4FF08052 		mov	r2, #268435456
 1283 004c 1A60     		str	r2, [r3]
 1284              		.syntax unified
 1285              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1286 004e BFF34F8F 		dsb
 1287              	@ 0 "" 2
 1288              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1289 0052 BFF36F8F 		isb
 1290              	@ 0 "" 2
 1291              		.thumb
 1292              		.syntax unified
 1293              	.L72:
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1294              		.loc 1 1371 2
 1295 0056 00BF     		nop
 1296 0058 1037     		adds	r7, r7, #16
 1297              	.LCFI33:
 1298              		.cfi_def_cfa_offset 8
 1299 005a BD46     		mov	sp, r7
 1300              	.LCFI34:
 1301              		.cfi_def_cfa_register 13
 1302              		@ sp needed
 1303 005c 80BD     		pop	{r7, pc}
 1304              	.L74:
 1305 005e 00BF     		.align	2
 1306              	.L73:
 1307 0060 00000000 		.word	uxSchedulerSuspended
 1308 0064 04ED00E0 		.word	-536810236
 1309              		.cfi_endproc
 1310              	.LFE13:
 1312              		.section	.text.eTaskGetState,"ax",%progbits
 1313              		.align	1
 1314              		.global	eTaskGetState
 1315              		.syntax unified
 1316              		.thumb
ARM GAS  /tmp/cc5hVFFU.s 			page 51


 1317              		.thumb_func
 1318              		.fpu fpv4-sp-d16
 1320              	eTaskGetState:
 1321              	.LFB14:
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1322              		.loc 1 1379 2
 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 32
 1325              		@ frame_needed = 1, uses_anonymous_args = 0
 1326 0000 80B5     		push	{r7, lr}
 1327              	.LCFI35:
 1328              		.cfi_def_cfa_offset 8
 1329              		.cfi_offset 7, -8
 1330              		.cfi_offset 14, -4
 1331 0002 88B0     		sub	sp, sp, #32
 1332              	.LCFI36:
 1333              		.cfi_def_cfa_offset 40
 1334 0004 00AF     		add	r7, sp, #0
 1335              	.LCFI37:
 1336              		.cfi_def_cfa_register 7
 1337 0006 7860     		str	r0, [r7, #4]
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1338              		.loc 1 1382 22
 1339 0008 7B68     		ldr	r3, [r7, #4]
 1340 000a BB61     		str	r3, [r7, #24]
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
 1341              		.loc 1 1384 3
 1342 000c BB69     		ldr	r3, [r7, #24]
 1343 000e 002B     		cmp	r3, #0
 1344 0010 09D1     		bne	.L76
 1345              	.LBB140:
 1346              	.LBB141:
 1347              		.loc 2 195 2 discriminator 1
 1348              		.syntax unified
 1349              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1350 0012 4FF05003 			mov r3, #80												
 1351 0016 83F31188 		msr basepri, r3											
 1352 001a BFF36F8F 		isb														
 1353 001e BFF34F8F 		dsb														
 1354              	
 1355              	@ 0 "" 2
 1356              		.thumb
 1357              		.syntax unified
 1358 0022 BB60     		str	r3, [r7, #8]
 1359              	.L77:
 1360              	.LBE141:
 1361              	.LBE140:
ARM GAS  /tmp/cc5hVFFU.s 			page 52


 1362              		.loc 1 1384 3 discriminator 1
 1363 0024 FEE7     		b	.L77
 1364              	.L76:
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1365              		.loc 1 1386 13
 1366 0026 244B     		ldr	r3, .L90
 1367 0028 1B68     		ldr	r3, [r3]
 1368              		.loc 1 1386 5
 1369 002a BA69     		ldr	r2, [r7, #24]
 1370 002c 9A42     		cmp	r2, r3
 1371 002e 02D1     		bne	.L78
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
 1372              		.loc 1 1389 12
 1373 0030 0023     		movs	r3, #0
 1374 0032 FB77     		strb	r3, [r7, #31]
 1375 0034 3AE0     		b	.L79
 1376              	.L78:
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1377              		.loc 1 1393 4
 1378 0036 FFF7FEFF 		bl	vPortEnterCritical
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1379              		.loc 1 1395 17
 1380 003a BB69     		ldr	r3, [r7, #24]
 1381 003c 5B69     		ldr	r3, [r3, #20]
 1382 003e 7B61     		str	r3, [r7, #20]
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1383              		.loc 1 1396 19
 1384 0040 1E4B     		ldr	r3, .L90+4
 1385 0042 1B68     		ldr	r3, [r3]
 1386 0044 3B61     		str	r3, [r7, #16]
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1387              		.loc 1 1397 29
 1388 0046 1E4B     		ldr	r3, .L90+8
 1389 0048 1B68     		ldr	r3, [r3]
 1390 004a FB60     		str	r3, [r7, #12]
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1391              		.loc 1 1399 4
 1392 004c FFF7FEFF 		bl	vPortExitCritical
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1393              		.loc 1 1401 6
 1394 0050 7A69     		ldr	r2, [r7, #20]
 1395 0052 3B69     		ldr	r3, [r7, #16]
 1396 0054 9A42     		cmp	r2, r3
 1397 0056 03D0     		beq	.L80
 1398              		.loc 1 1401 41 discriminator 1
 1399 0058 7A69     		ldr	r2, [r7, #20]
 1400 005a FB68     		ldr	r3, [r7, #12]
 1401 005c 9A42     		cmp	r2, r3
ARM GAS  /tmp/cc5hVFFU.s 			page 53


 1402 005e 02D1     		bne	.L81
 1403              	.L80:
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 1404              		.loc 1 1405 13
 1405 0060 0223     		movs	r3, #2
 1406 0062 FB77     		strb	r3, [r7, #31]
 1407 0064 22E0     		b	.L79
 1408              	.L81:
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1409              		.loc 1 1409 12
 1410 0066 7B69     		ldr	r3, [r7, #20]
 1411 0068 164A     		ldr	r2, .L90+12
 1412 006a 9342     		cmp	r3, r2
 1413 006c 12D1     		bne	.L82
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1414              		.loc 1 1414 10
 1415 006e BB69     		ldr	r3, [r7, #24]
 1416 0070 9B6A     		ldr	r3, [r3, #40]
 1417              		.loc 1 1414 8
 1418 0072 002B     		cmp	r3, #0
 1419 0074 0BD1     		bne	.L83
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1420              		.loc 1 1422 17
 1421 0076 BB69     		ldr	r3, [r7, #24]
 1422 0078 93F85830 		ldrb	r3, [r3, #88]
 1423 007c DBB2     		uxtb	r3, r3
 1424              		.loc 1 1422 10
 1425 007e 012B     		cmp	r3, #1
 1426 0080 02D1     		bne	.L84
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
 1427              		.loc 1 1424 17
 1428 0082 0223     		movs	r3, #2
 1429 0084 FB77     		strb	r3, [r7, #31]
 1430 0086 11E0     		b	.L79
 1431              	.L84:
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
ARM GAS  /tmp/cc5hVFFU.s 			page 54


 1432              		.loc 1 1428 17
 1433 0088 0323     		movs	r3, #3
 1434 008a FB77     		strb	r3, [r7, #31]
 1435 008c 0EE0     		b	.L79
 1436              	.L83:
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
 1437              		.loc 1 1439 15
 1438 008e 0223     		movs	r3, #2
 1439 0090 FB77     		strb	r3, [r7, #31]
 1440 0092 0BE0     		b	.L79
 1441              	.L82:
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1442              		.loc 1 1445 12
 1443 0094 7B69     		ldr	r3, [r7, #20]
 1444 0096 0C4A     		ldr	r2, .L90+16
 1445 0098 9342     		cmp	r3, r2
 1446 009a 02D0     		beq	.L87
 1447              		.loc 1 1445 59 discriminator 1
 1448 009c 7B69     		ldr	r3, [r7, #20]
 1449 009e 002B     		cmp	r3, #0
 1450 00a0 02D1     		bne	.L88
 1451              	.L87:
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 1452              		.loc 1 1450 14
 1453 00a2 0423     		movs	r3, #4
 1454 00a4 FB77     		strb	r3, [r7, #31]
 1455 00a6 01E0     		b	.L79
 1456              	.L88:
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
 1457              		.loc 1 1458 13
 1458 00a8 0123     		movs	r3, #1
ARM GAS  /tmp/cc5hVFFU.s 			page 55


 1459 00aa FB77     		strb	r3, [r7, #31]
 1460              	.L79:
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
 1461              		.loc 1 1462 10
 1462 00ac FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1463              		.loc 1 1463 2
 1464 00ae 1846     		mov	r0, r3
 1465 00b0 2037     		adds	r7, r7, #32
 1466              	.LCFI38:
 1467              		.cfi_def_cfa_offset 8
 1468 00b2 BD46     		mov	sp, r7
 1469              	.LCFI39:
 1470              		.cfi_def_cfa_register 13
 1471              		@ sp needed
 1472 00b4 80BD     		pop	{r7, pc}
 1473              	.L91:
 1474 00b6 00BF     		.align	2
 1475              	.L90:
 1476 00b8 00000000 		.word	pxCurrentTCB
 1477 00bc 00000000 		.word	pxDelayedTaskList
 1478 00c0 00000000 		.word	pxOverflowDelayedTaskList
 1479 00c4 00000000 		.word	xSuspendedTaskList
 1480 00c8 00000000 		.word	xTasksWaitingTermination
 1481              		.cfi_endproc
 1482              	.LFE14:
 1484              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1485              		.align	1
 1486              		.global	uxTaskPriorityGet
 1487              		.syntax unified
 1488              		.thumb
 1489              		.thumb_func
 1490              		.fpu fpv4-sp-d16
 1492              	uxTaskPriorityGet:
 1493              	.LFB15:
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1494              		.loc 1 1471 2
 1495              		.cfi_startproc
 1496              		@ args = 0, pretend = 0, frame = 16
 1497              		@ frame_needed = 1, uses_anonymous_args = 0
 1498 0000 80B5     		push	{r7, lr}
 1499              	.LCFI40:
 1500              		.cfi_def_cfa_offset 8
 1501              		.cfi_offset 7, -8
 1502              		.cfi_offset 14, -4
 1503 0002 84B0     		sub	sp, sp, #16
 1504              	.LCFI41:
ARM GAS  /tmp/cc5hVFFU.s 			page 56


 1505              		.cfi_def_cfa_offset 24
 1506 0004 00AF     		add	r7, sp, #0
 1507              	.LCFI42:
 1508              		.cfi_def_cfa_register 7
 1509 0006 7860     		str	r0, [r7, #4]
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1510              		.loc 1 1475 3
 1511 0008 FFF7FEFF 		bl	vPortEnterCritical
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1512              		.loc 1 1479 12
 1513 000c 7B68     		ldr	r3, [r7, #4]
 1514 000e 002B     		cmp	r3, #0
 1515 0010 02D1     		bne	.L93
 1516              		.loc 1 1479 12 is_stmt 0 discriminator 1
 1517 0012 074B     		ldr	r3, .L96
 1518 0014 1B68     		ldr	r3, [r3]
 1519 0016 00E0     		b	.L94
 1520              	.L93:
 1521              		.loc 1 1479 12 discriminator 2
 1522 0018 7B68     		ldr	r3, [r7, #4]
 1523              	.L94:
 1524              		.loc 1 1479 10 is_stmt 1 discriminator 4
 1525 001a FB60     		str	r3, [r7, #12]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1526              		.loc 1 1480 13 discriminator 4
 1527 001c FB68     		ldr	r3, [r7, #12]
 1528 001e DB6A     		ldr	r3, [r3, #44]
 1529 0020 BB60     		str	r3, [r7, #8]
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1530              		.loc 1 1482 3 discriminator 4
 1531 0022 FFF7FEFF 		bl	vPortExitCritical
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1532              		.loc 1 1484 10 discriminator 4
 1533 0026 BB68     		ldr	r3, [r7, #8]
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1534              		.loc 1 1485 2 discriminator 4
 1535 0028 1846     		mov	r0, r3
 1536 002a 1037     		adds	r7, r7, #16
 1537              	.LCFI43:
 1538              		.cfi_def_cfa_offset 8
 1539 002c BD46     		mov	sp, r7
 1540              	.LCFI44:
 1541              		.cfi_def_cfa_register 13
 1542              		@ sp needed
 1543 002e 80BD     		pop	{r7, pc}
 1544              	.L97:
 1545              		.align	2
 1546              	.L96:
 1547 0030 00000000 		.word	pxCurrentTCB
ARM GAS  /tmp/cc5hVFFU.s 			page 57


 1548              		.cfi_endproc
 1549              	.LFE15:
 1551              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1552              		.align	1
 1553              		.global	uxTaskPriorityGetFromISR
 1554              		.syntax unified
 1555              		.thumb
 1556              		.thumb_func
 1557              		.fpu fpv4-sp-d16
 1559              	uxTaskPriorityGetFromISR:
 1560              	.LFB16:
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1561              		.loc 1 1493 2
 1562              		.cfi_startproc
 1563              		@ args = 0, pretend = 0, frame = 32
 1564              		@ frame_needed = 1, uses_anonymous_args = 0
 1565 0000 80B5     		push	{r7, lr}
 1566              	.LCFI45:
 1567              		.cfi_def_cfa_offset 8
 1568              		.cfi_offset 7, -8
 1569              		.cfi_offset 14, -4
 1570 0002 88B0     		sub	sp, sp, #32
 1571              	.LCFI46:
 1572              		.cfi_def_cfa_offset 40
 1573 0004 00AF     		add	r7, sp, #0
 1574              	.LCFI47:
 1575              		.cfi_def_cfa_register 7
 1576 0006 7860     		str	r0, [r7, #4]
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1577              		.loc 1 1513 3
 1578 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  /tmp/cc5hVFFU.s 			page 58


 1579              	.LBB142:
 1580              	.LBB143:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1581              		.loc 2 211 2
 1582              		.syntax unified
 1583              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1584 000c EFF31182 			mrs r2, basepri											
 1585 0010 4FF05003 		mov r3, #80												
 1586 0014 83F31188 		msr basepri, r3											
 1587 0018 BFF36F8F 		isb														
 1588 001c BFF34F8F 		dsb														
 1589              	
 1590              	@ 0 "" 2
 1591              		.thumb
 1592              		.syntax unified
 1593 0020 3A61     		str	r2, [r7, #16]
 1594 0022 FB60     		str	r3, [r7, #12]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1595              		.loc 2 223 9
 1596 0024 3B69     		ldr	r3, [r7, #16]
 1597              	.LBE143:
 1598              	.LBE142:
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1599              		.loc 1 1515 27
 1600 0026 FB61     		str	r3, [r7, #28]
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1601              		.loc 1 1519 12
ARM GAS  /tmp/cc5hVFFU.s 			page 59


 1602 0028 7B68     		ldr	r3, [r7, #4]
 1603 002a 002B     		cmp	r3, #0
 1604 002c 02D1     		bne	.L100
 1605              		.loc 1 1519 12 is_stmt 0 discriminator 1
 1606 002e 094B     		ldr	r3, .L103
 1607 0030 1B68     		ldr	r3, [r3]
 1608 0032 00E0     		b	.L101
 1609              	.L100:
 1610              		.loc 1 1519 12 discriminator 2
 1611 0034 7B68     		ldr	r3, [r7, #4]
 1612              	.L101:
 1613              		.loc 1 1519 10 is_stmt 1 discriminator 4
 1614 0036 BB61     		str	r3, [r7, #24]
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1615              		.loc 1 1520 13 discriminator 4
 1616 0038 BB69     		ldr	r3, [r7, #24]
 1617 003a DB6A     		ldr	r3, [r3, #44]
 1618 003c 7B61     		str	r3, [r7, #20]
 1619 003e FB69     		ldr	r3, [r7, #28]
 1620 0040 BB60     		str	r3, [r7, #8]
 1621              	.LBB144:
 1622              	.LBB145:
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1623              		.loc 2 229 2 discriminator 4
 1624 0042 BB68     		ldr	r3, [r7, #8]
 1625              		.syntax unified
 1626              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1627 0044 83F31188 			msr basepri, r3	
 1628              	@ 0 "" 2
 1629              		.thumb
 1630              		.syntax unified
 1631              	.LBE145:
 1632              	.LBE144:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1633              		.loc 1 1524 10 discriminator 4
 1634 0048 7B69     		ldr	r3, [r7, #20]
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1635              		.loc 1 1525 2 discriminator 4
 1636 004a 1846     		mov	r0, r3
 1637 004c 2037     		adds	r7, r7, #32
 1638              	.LCFI48:
 1639              		.cfi_def_cfa_offset 8
 1640 004e BD46     		mov	sp, r7
 1641              	.LCFI49:
 1642              		.cfi_def_cfa_register 13
 1643              		@ sp needed
 1644 0050 80BD     		pop	{r7, pc}
 1645              	.L104:
 1646 0052 00BF     		.align	2
ARM GAS  /tmp/cc5hVFFU.s 			page 60


 1647              	.L103:
 1648 0054 00000000 		.word	pxCurrentTCB
 1649              		.cfi_endproc
 1650              	.LFE16:
 1652              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1653              		.align	1
 1654              		.global	vTaskPrioritySet
 1655              		.syntax unified
 1656              		.thumb
 1657              		.thumb_func
 1658              		.fpu fpv4-sp-d16
 1660              	vTaskPrioritySet:
 1661              	.LFB17:
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1662              		.loc 1 1533 2
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 32
 1665              		@ frame_needed = 1, uses_anonymous_args = 0
 1666 0000 80B5     		push	{r7, lr}
 1667              	.LCFI50:
 1668              		.cfi_def_cfa_offset 8
 1669              		.cfi_offset 7, -8
 1670              		.cfi_offset 14, -4
 1671 0002 88B0     		sub	sp, sp, #32
 1672              	.LCFI51:
 1673              		.cfi_def_cfa_offset 40
 1674 0004 00AF     		add	r7, sp, #0
 1675              	.LCFI52:
 1676              		.cfi_def_cfa_register 7
 1677 0006 7860     		str	r0, [r7, #4]
 1678 0008 3960     		str	r1, [r7]
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1679              		.loc 1 1536 13
 1680 000a 0023     		movs	r3, #0
 1681 000c FB61     		str	r3, [r7, #28]
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1682              		.loc 1 1538 3
 1683 000e 3B68     		ldr	r3, [r7]
 1684 0010 372B     		cmp	r3, #55
 1685 0012 09D9     		bls	.L106
 1686              	.LBB146:
 1687              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1688              		.loc 2 195 2 discriminator 1
 1689              		.syntax unified
 1690              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1691 0014 4FF05003 			mov r3, #80												
ARM GAS  /tmp/cc5hVFFU.s 			page 61


 1692 0018 83F31188 		msr basepri, r3											
 1693 001c BFF36F8F 		isb														
 1694 0020 BFF34F8F 		dsb														
 1695              	
 1696              	@ 0 "" 2
 1697              		.thumb
 1698              		.syntax unified
 1699 0024 FB60     		str	r3, [r7, #12]
 1700              	.L107:
 1701              	.LBE147:
 1702              	.LBE146:
 1703              		.loc 1 1538 3 discriminator 1
 1704 0026 FEE7     		b	.L107
 1705              	.L106:
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1706              		.loc 1 1541 5
 1707 0028 3B68     		ldr	r3, [r7]
 1708 002a 372B     		cmp	r3, #55
 1709 002c 01D9     		bls	.L108
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1710              		.loc 1 1543 18
 1711 002e 3723     		movs	r3, #55
 1712 0030 3B60     		str	r3, [r7]
 1713              	.L108:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1714              		.loc 1 1550 3
 1715 0032 FFF7FEFF 		bl	vPortEnterCritical
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1716              		.loc 1 1554 12
 1717 0036 7B68     		ldr	r3, [r7, #4]
 1718 0038 002B     		cmp	r3, #0
 1719 003a 02D1     		bne	.L109
 1720              		.loc 1 1554 12 is_stmt 0 discriminator 1
 1721 003c 3A4B     		ldr	r3, .L118
 1722 003e 1B68     		ldr	r3, [r3]
 1723 0040 00E0     		b	.L110
 1724              	.L109:
 1725              		.loc 1 1554 12 discriminator 2
 1726 0042 7B68     		ldr	r3, [r7, #4]
 1727              	.L110:
 1728              		.loc 1 1554 10 is_stmt 1 discriminator 4
 1729 0044 BB61     		str	r3, [r7, #24]
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc5hVFFU.s 			page 62


1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1730              		.loc 1 1560 27 discriminator 4
 1731 0046 BB69     		ldr	r3, [r7, #24]
 1732 0048 DB6C     		ldr	r3, [r3, #76]
 1733 004a 7B61     		str	r3, [r7, #20]
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1734              		.loc 1 1568 6 discriminator 4
 1735 004c 7A69     		ldr	r2, [r7, #20]
 1736 004e 3B68     		ldr	r3, [r7]
 1737 0050 9A42     		cmp	r2, r3
 1738 0052 63D0     		beq	.L111
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1739              		.loc 1 1572 7
 1740 0054 3A68     		ldr	r2, [r7]
 1741 0056 7B69     		ldr	r3, [r7, #20]
 1742 0058 9A42     		cmp	r2, r3
 1743 005a 0DD9     		bls	.L112
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1744              		.loc 1 1574 16
 1745 005c 324B     		ldr	r3, .L118
 1746 005e 1B68     		ldr	r3, [r3]
 1747              		.loc 1 1574 8
 1748 0060 BA69     		ldr	r2, [r7, #24]
 1749 0062 9A42     		cmp	r2, r3
 1750 0064 0FD0     		beq	.L113
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1751              		.loc 1 1579 40
 1752 0066 304B     		ldr	r3, .L118
 1753 0068 1B68     		ldr	r3, [r3]
 1754 006a DB6A     		ldr	r3, [r3, #44]
 1755              		.loc 1 1579 9
 1756 006c 3A68     		ldr	r2, [r7]
 1757 006e 9A42     		cmp	r2, r3
 1758 0070 09D3     		bcc	.L113
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1759              		.loc 1 1581 23
 1760 0072 0123     		movs	r3, #1
 1761 0074 FB61     		str	r3, [r7, #28]
 1762 0076 06E0     		b	.L113
ARM GAS  /tmp/cc5hVFFU.s 			page 63


 1763              	.L112:
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1764              		.loc 1 1595 20
 1765 0078 2B4B     		ldr	r3, .L118
 1766 007a 1B68     		ldr	r3, [r3]
 1767              		.loc 1 1595 12
 1768 007c BA69     		ldr	r2, [r7, #24]
 1769 007e 9A42     		cmp	r2, r3
 1770 0080 01D1     		bne	.L113
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1771              		.loc 1 1600 21
 1772 0082 0123     		movs	r3, #1
 1773 0084 FB61     		str	r3, [r7, #28]
 1774              	.L113:
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1775              		.loc 1 1612 27
 1776 0086 BB69     		ldr	r3, [r7, #24]
 1777 0088 DB6A     		ldr	r3, [r3, #44]
 1778 008a 3B61     		str	r3, [r7, #16]
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1779              		.loc 1 1618 15
 1780 008c BB69     		ldr	r3, [r7, #24]
 1781 008e DA6C     		ldr	r2, [r3, #76]
 1782              		.loc 1 1618 40
ARM GAS  /tmp/cc5hVFFU.s 			page 64


 1783 0090 BB69     		ldr	r3, [r7, #24]
 1784 0092 DB6A     		ldr	r3, [r3, #44]
 1785              		.loc 1 1618 8
 1786 0094 9A42     		cmp	r2, r3
 1787 0096 02D1     		bne	.L114
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1788              		.loc 1 1620 25
 1789 0098 BB69     		ldr	r3, [r7, #24]
 1790 009a 3A68     		ldr	r2, [r7]
 1791 009c DA62     		str	r2, [r3, #44]
 1792              	.L114:
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1793              		.loc 1 1628 28
 1794 009e BB69     		ldr	r3, [r7, #24]
 1795 00a0 3A68     		ldr	r2, [r7]
 1796 00a2 DA64     		str	r2, [r3, #76]
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1797              		.loc 1 1638 11
 1798 00a4 BB69     		ldr	r3, [r7, #24]
 1799 00a6 9B69     		ldr	r3, [r3, #24]
 1800              		.loc 1 1638 7
 1801 00a8 002B     		cmp	r3, #0
 1802 00aa 04DB     		blt	.L115
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1803              		.loc 1 1640 6
 1804 00ac 3B68     		ldr	r3, [r7]
 1805 00ae C3F13802 		rsb	r2, r3, #56
 1806 00b2 BB69     		ldr	r3, [r7, #24]
 1807 00b4 9A61     		str	r2, [r3, #24]
 1808              	.L115:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
ARM GAS  /tmp/cc5hVFFU.s 			page 65


1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1809              		.loc 1 1651 9
 1810 00b6 BB69     		ldr	r3, [r7, #24]
 1811 00b8 5969     		ldr	r1, [r3, #20]
 1812 00ba 3A69     		ldr	r2, [r7, #16]
 1813 00bc 1346     		mov	r3, r2
 1814 00be 9B00     		lsls	r3, r3, #2
 1815 00c0 1344     		add	r3, r3, r2
 1816 00c2 9B00     		lsls	r3, r3, #2
 1817 00c4 194A     		ldr	r2, .L118+4
 1818 00c6 1344     		add	r3, r3, r2
 1819              		.loc 1 1651 7
 1820 00c8 9942     		cmp	r1, r3
 1821 00ca 1CD1     		bne	.L116
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1822              		.loc 1 1656 10
 1823 00cc BB69     		ldr	r3, [r7, #24]
 1824 00ce 0433     		adds	r3, r3, #4
 1825 00d0 1846     		mov	r0, r3
 1826 00d2 FFF7FEFF 		bl	uxListRemove
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1827              		.loc 1 1667 6
 1828 00d6 BB69     		ldr	r3, [r7, #24]
 1829 00d8 DA6A     		ldr	r2, [r3, #44]
 1830 00da 154B     		ldr	r3, .L118+8
 1831 00dc 1B68     		ldr	r3, [r3]
 1832 00de 9A42     		cmp	r2, r3
 1833 00e0 03D9     		bls	.L117
 1834              		.loc 1 1667 6 is_stmt 0 discriminator 1
 1835 00e2 BB69     		ldr	r3, [r7, #24]
 1836 00e4 DB6A     		ldr	r3, [r3, #44]
 1837 00e6 124A     		ldr	r2, .L118+8
 1838 00e8 1360     		str	r3, [r2]
 1839              	.L117:
 1840              		.loc 1 1667 6 discriminator 3
 1841 00ea BB69     		ldr	r3, [r7, #24]
 1842 00ec DA6A     		ldr	r2, [r3, #44]
 1843 00ee 1346     		mov	r3, r2
 1844 00f0 9B00     		lsls	r3, r3, #2
 1845 00f2 1344     		add	r3, r3, r2
 1846 00f4 9B00     		lsls	r3, r3, #2
 1847 00f6 0D4A     		ldr	r2, .L118+4
ARM GAS  /tmp/cc5hVFFU.s 			page 66


 1848 00f8 1A44     		add	r2, r2, r3
 1849 00fa BB69     		ldr	r3, [r7, #24]
 1850 00fc 0433     		adds	r3, r3, #4
 1851 00fe 1946     		mov	r1, r3
 1852 0100 1046     		mov	r0, r2
 1853 0102 FFF7FEFF 		bl	vListInsertEnd
 1854              	.L116:
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1855              		.loc 1 1674 7 is_stmt 1
 1856 0106 FB69     		ldr	r3, [r7, #28]
 1857 0108 002B     		cmp	r3, #0
 1858 010a 07D0     		beq	.L111
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1859              		.loc 1 1676 6
 1860 010c 094B     		ldr	r3, .L118+12
 1861 010e 4FF08052 		mov	r2, #268435456
 1862 0112 1A60     		str	r2, [r3]
 1863              		.syntax unified
 1864              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1865 0114 BFF34F8F 		dsb
 1866              	@ 0 "" 2
 1867              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1868 0118 BFF36F8F 		isb
 1869              	@ 0 "" 2
 1870              		.thumb
 1871              		.syntax unified
 1872              	.L111:
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1873              		.loc 1 1688 3
 1874 011c FFF7FEFF 		bl	vPortExitCritical
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1875              		.loc 1 1689 2
 1876 0120 00BF     		nop
 1877 0122 2037     		adds	r7, r7, #32
 1878              	.LCFI53:
 1879              		.cfi_def_cfa_offset 8
 1880 0124 BD46     		mov	sp, r7
 1881              	.LCFI54:
 1882              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cc5hVFFU.s 			page 67


 1883              		@ sp needed
 1884 0126 80BD     		pop	{r7, pc}
 1885              	.L119:
 1886              		.align	2
 1887              	.L118:
 1888 0128 00000000 		.word	pxCurrentTCB
 1889 012c 00000000 		.word	pxReadyTasksLists
 1890 0130 00000000 		.word	uxTopReadyPriority
 1891 0134 04ED00E0 		.word	-536810236
 1892              		.cfi_endproc
 1893              	.LFE17:
 1895              		.section	.text.vTaskSuspend,"ax",%progbits
 1896              		.align	1
 1897              		.global	vTaskSuspend
 1898              		.syntax unified
 1899              		.thumb
 1900              		.thumb_func
 1901              		.fpu fpv4-sp-d16
 1903              	vTaskSuspend:
 1904              	.LFB18:
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1905              		.loc 1 1697 2
 1906              		.cfi_startproc
 1907              		@ args = 0, pretend = 0, frame = 16
 1908              		@ frame_needed = 1, uses_anonymous_args = 0
 1909 0000 80B5     		push	{r7, lr}
 1910              	.LCFI55:
 1911              		.cfi_def_cfa_offset 8
 1912              		.cfi_offset 7, -8
 1913              		.cfi_offset 14, -4
 1914 0002 84B0     		sub	sp, sp, #16
 1915              	.LCFI56:
 1916              		.cfi_def_cfa_offset 24
 1917 0004 00AF     		add	r7, sp, #0
 1918              	.LCFI57:
 1919              		.cfi_def_cfa_register 7
 1920 0006 7860     		str	r0, [r7, #4]
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1921              		.loc 1 1700 3
 1922 0008 FFF7FEFF 		bl	vPortEnterCritical
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1923              		.loc 1 1704 12
 1924 000c 7B68     		ldr	r3, [r7, #4]
 1925 000e 002B     		cmp	r3, #0
 1926 0010 02D1     		bne	.L121
ARM GAS  /tmp/cc5hVFFU.s 			page 68


 1927              		.loc 1 1704 12 is_stmt 0 discriminator 1
 1928 0012 2F4B     		ldr	r3, .L133
 1929 0014 1B68     		ldr	r3, [r3]
 1930 0016 00E0     		b	.L122
 1931              	.L121:
 1932              		.loc 1 1704 12 discriminator 2
 1933 0018 7B68     		ldr	r3, [r7, #4]
 1934              	.L122:
 1935              		.loc 1 1704 10 is_stmt 1 discriminator 4
 1936 001a FB60     		str	r3, [r7, #12]
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1937              		.loc 1 1710 8 discriminator 4
 1938 001c FB68     		ldr	r3, [r7, #12]
 1939 001e 0433     		adds	r3, r3, #4
 1940 0020 1846     		mov	r0, r3
 1941 0022 FFF7FEFF 		bl	uxListRemove
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1942              		.loc 1 1720 8 discriminator 4
 1943 0026 FB68     		ldr	r3, [r7, #12]
 1944 0028 9B6A     		ldr	r3, [r3, #40]
 1945              		.loc 1 1720 6 discriminator 4
 1946 002a 002B     		cmp	r3, #0
 1947 002c 04D0     		beq	.L123
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1948              		.loc 1 1722 14
 1949 002e FB68     		ldr	r3, [r7, #12]
 1950 0030 1833     		adds	r3, r3, #24
 1951 0032 1846     		mov	r0, r3
 1952 0034 FFF7FEFF 		bl	uxListRemove
 1953              	.L123:
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1954              		.loc 1 1729 4
 1955 0038 FB68     		ldr	r3, [r7, #12]
 1956 003a 0433     		adds	r3, r3, #4
 1957 003c 1946     		mov	r1, r3
 1958 003e 2548     		ldr	r0, .L133+4
ARM GAS  /tmp/cc5hVFFU.s 			page 69


 1959 0040 FFF7FEFF 		bl	vListInsertEnd
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1960              		.loc 1 1733 14
 1961 0044 FB68     		ldr	r3, [r7, #12]
 1962 0046 93F85830 		ldrb	r3, [r3, #88]
 1963 004a DBB2     		uxtb	r3, r3
 1964              		.loc 1 1733 7
 1965 004c 012B     		cmp	r3, #1
 1966 004e 03D1     		bne	.L124
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1967              		.loc 1 1737 27
 1968 0050 FB68     		ldr	r3, [r7, #12]
 1969 0052 0022     		movs	r2, #0
 1970 0054 83F85820 		strb	r2, [r3, #88]
 1971              	.L124:
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1972              		.loc 1 1742 3
 1973 0058 FFF7FEFF 		bl	vPortExitCritical
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1974              		.loc 1 1744 25
 1975 005c 1E4B     		ldr	r3, .L133+8
 1976 005e 1B68     		ldr	r3, [r3]
 1977              		.loc 1 1744 5
 1978 0060 002B     		cmp	r3, #0
 1979 0062 05D0     		beq	.L125
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1980              		.loc 1 1748 4
 1981 0064 FFF7FEFF 		bl	vPortEnterCritical
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1982              		.loc 1 1750 5
 1983 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1984              		.loc 1 1752 4
 1985 006c FFF7FEFF 		bl	vPortExitCritical
 1986              	.L125:
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc5hVFFU.s 			page 70


1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1987              		.loc 1 1759 13
 1988 0070 174B     		ldr	r3, .L133
 1989 0072 1B68     		ldr	r3, [r3]
 1990              		.loc 1 1759 5
 1991 0074 FA68     		ldr	r2, [r7, #12]
 1992 0076 9A42     		cmp	r2, r3
 1993 0078 26D1     		bne	.L132
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1994              		.loc 1 1761 26
 1995 007a 174B     		ldr	r3, .L133+8
 1996 007c 1B68     		ldr	r3, [r3]
 1997              		.loc 1 1761 6
 1998 007e 002B     		cmp	r3, #0
 1999 0080 16D0     		beq	.L127
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 2000              		.loc 1 1764 5
 2001 0082 164B     		ldr	r3, .L133+12
 2002 0084 1B68     		ldr	r3, [r3]
 2003 0086 002B     		cmp	r3, #0
 2004 0088 09D0     		beq	.L128
 2005              	.LBB148:
 2006              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2007              		.loc 2 195 2 discriminator 1
 2008              		.syntax unified
 2009              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2010 008a 4FF05003 			mov r3, #80												
 2011 008e 83F31188 		msr basepri, r3											
 2012 0092 BFF36F8F 		isb														
 2013 0096 BFF34F8F 		dsb														
 2014              	
 2015              	@ 0 "" 2
 2016              		.thumb
 2017              		.syntax unified
 2018 009a BB60     		str	r3, [r7, #8]
 2019              	.L129:
 2020              	.LBE149:
 2021              	.LBE148:
 2022              		.loc 1 1764 5 discriminator 1
 2023 009c FEE7     		b	.L129
 2024              	.L128:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2025              		.loc 1 1765 5
 2026 009e 104B     		ldr	r3, .L133+16
 2027 00a0 4FF08052 		mov	r2, #268435456
 2028 00a4 1A60     		str	r2, [r3]
 2029              		.syntax unified
 2030              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2031 00a6 BFF34F8F 		dsb
 2032              	@ 0 "" 2
 2033              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2034 00aa BFF36F8F 		isb
 2035              	@ 0 "" 2
ARM GAS  /tmp/cc5hVFFU.s 			page 71


1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2036              		.loc 1 1790 2
 2037              		.thumb
 2038              		.syntax unified
 2039 00ae 0BE0     		b	.L132
 2040              	.L127:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2041              		.loc 1 1772 9
 2042 00b0 084B     		ldr	r3, .L133+4
 2043 00b2 1A68     		ldr	r2, [r3]
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2044              		.loc 1 1772 56
 2045 00b4 0B4B     		ldr	r3, .L133+20
 2046 00b6 1B68     		ldr	r3, [r3]
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2047              		.loc 1 1772 7
 2048 00b8 9A42     		cmp	r2, r3
 2049 00ba 03D1     		bne	.L131
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2050              		.loc 1 1778 19
 2051 00bc 044B     		ldr	r3, .L133
 2052 00be 0022     		movs	r2, #0
 2053 00c0 1A60     		str	r2, [r3]
 2054              		.loc 1 1790 2
 2055 00c2 01E0     		b	.L132
 2056              	.L131:
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2057              		.loc 1 1782 6
 2058 00c4 FFF7FEFF 		bl	vTaskSwitchContext
 2059              	.L132:
 2060              		.loc 1 1790 2
 2061 00c8 00BF     		nop
 2062 00ca 1037     		adds	r7, r7, #16
ARM GAS  /tmp/cc5hVFFU.s 			page 72


 2063              	.LCFI58:
 2064              		.cfi_def_cfa_offset 8
 2065 00cc BD46     		mov	sp, r7
 2066              	.LCFI59:
 2067              		.cfi_def_cfa_register 13
 2068              		@ sp needed
 2069 00ce 80BD     		pop	{r7, pc}
 2070              	.L134:
 2071              		.align	2
 2072              	.L133:
 2073 00d0 00000000 		.word	pxCurrentTCB
 2074 00d4 00000000 		.word	xSuspendedTaskList
 2075 00d8 00000000 		.word	xSchedulerRunning
 2076 00dc 00000000 		.word	uxSchedulerSuspended
 2077 00e0 04ED00E0 		.word	-536810236
 2078 00e4 00000000 		.word	uxCurrentNumberOfTasks
 2079              		.cfi_endproc
 2080              	.LFE18:
 2082              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 2083              		.align	1
 2084              		.syntax unified
 2085              		.thumb
 2086              		.thumb_func
 2087              		.fpu fpv4-sp-d16
 2089              	prvTaskIsTaskSuspended:
 2090              	.LFB19:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2091              		.loc 1 1798 2
 2092              		.cfi_startproc
 2093              		@ args = 0, pretend = 0, frame = 24
 2094              		@ frame_needed = 1, uses_anonymous_args = 0
 2095              		@ link register save eliminated.
 2096 0000 80B4     		push	{r7}
 2097              	.LCFI60:
 2098              		.cfi_def_cfa_offset 4
 2099              		.cfi_offset 7, -4
 2100 0002 87B0     		sub	sp, sp, #28
 2101              	.LCFI61:
 2102              		.cfi_def_cfa_offset 32
 2103 0004 00AF     		add	r7, sp, #0
 2104              	.LCFI62:
 2105              		.cfi_def_cfa_register 7
 2106 0006 7860     		str	r0, [r7, #4]
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 2107              		.loc 1 1799 13
 2108 0008 0023     		movs	r3, #0
 2109 000a 7B61     		str	r3, [r7, #20]
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 2110              		.loc 1 1800 22
 2111 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc5hVFFU.s 			page 73


 2112 000e 3B61     		str	r3, [r7, #16]
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 2113              		.loc 1 1806 3
 2114 0010 7B68     		ldr	r3, [r7, #4]
 2115 0012 002B     		cmp	r3, #0
 2116 0014 09D1     		bne	.L136
 2117              	.LBB150:
 2118              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2119              		.loc 2 195 2 discriminator 1
 2120              		.syntax unified
 2121              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2122 0016 4FF05003 			mov r3, #80												
 2123 001a 83F31188 		msr basepri, r3											
 2124 001e BFF36F8F 		isb														
 2125 0022 BFF34F8F 		dsb														
 2126              	
 2127              	@ 0 "" 2
 2128              		.thumb
 2129              		.syntax unified
 2130 0026 FB60     		str	r3, [r7, #12]
 2131              	.L137:
 2132              	.LBE151:
 2133              	.LBE150:
 2134              		.loc 1 1806 3 discriminator 1
 2135 0028 FEE7     		b	.L137
 2136              	.L136:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2137              		.loc 1 1809 7
 2138 002a 3B69     		ldr	r3, [r7, #16]
 2139 002c 5B69     		ldr	r3, [r3, #20]
 2140              		.loc 1 1809 5
 2141 002e 0A4A     		ldr	r2, .L140
 2142 0030 9342     		cmp	r3, r2
 2143 0032 0AD1     		bne	.L138
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 2144              		.loc 1 1812 8
 2145 0034 3B69     		ldr	r3, [r7, #16]
 2146 0036 9B6A     		ldr	r3, [r3, #40]
 2147              		.loc 1 1812 6
 2148 0038 084A     		ldr	r2, .L140+4
 2149 003a 9342     		cmp	r3, r2
 2150 003c 05D0     		beq	.L138
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 2151              		.loc 1 1816 9
ARM GAS  /tmp/cc5hVFFU.s 			page 74


 2152 003e 3B69     		ldr	r3, [r7, #16]
 2153 0040 9B6A     		ldr	r3, [r3, #40]
 2154              		.loc 1 1816 7
 2155 0042 002B     		cmp	r3, #0
 2156 0044 01D1     		bne	.L138
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 2157              		.loc 1 1818 14
 2158 0046 0123     		movs	r3, #1
 2159 0048 7B61     		str	r3, [r7, #20]
 2160              	.L138:
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 2161              		.loc 1 1835 10
 2162 004a 7B69     		ldr	r3, [r7, #20]
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2163              		.loc 1 1836 2
 2164 004c 1846     		mov	r0, r3
 2165 004e 1C37     		adds	r7, r7, #28
 2166              	.LCFI63:
 2167              		.cfi_def_cfa_offset 4
 2168 0050 BD46     		mov	sp, r7
 2169              	.LCFI64:
 2170              		.cfi_def_cfa_register 13
 2171              		@ sp needed
 2172 0052 5DF8047B 		ldr	r7, [sp], #4
 2173              	.LCFI65:
 2174              		.cfi_restore 7
 2175              		.cfi_def_cfa_offset 0
 2176 0056 7047     		bx	lr
 2177              	.L141:
 2178              		.align	2
 2179              	.L140:
 2180 0058 00000000 		.word	xSuspendedTaskList
 2181 005c 00000000 		.word	xPendingReadyList
 2182              		.cfi_endproc
 2183              	.LFE19:
 2185              		.section	.text.vTaskResume,"ax",%progbits
 2186              		.align	1
 2187              		.global	vTaskResume
 2188              		.syntax unified
 2189              		.thumb
ARM GAS  /tmp/cc5hVFFU.s 			page 75


 2190              		.thumb_func
 2191              		.fpu fpv4-sp-d16
 2193              	vTaskResume:
 2194              	.LFB20:
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2195              		.loc 1 1844 2
 2196              		.cfi_startproc
 2197              		@ args = 0, pretend = 0, frame = 16
 2198              		@ frame_needed = 1, uses_anonymous_args = 0
 2199 0000 80B5     		push	{r7, lr}
 2200              	.LCFI66:
 2201              		.cfi_def_cfa_offset 8
 2202              		.cfi_offset 7, -8
 2203              		.cfi_offset 14, -4
 2204 0002 84B0     		sub	sp, sp, #16
 2205              	.LCFI67:
 2206              		.cfi_def_cfa_offset 24
 2207 0004 00AF     		add	r7, sp, #0
 2208              	.LCFI68:
 2209              		.cfi_def_cfa_register 7
 2210 0006 7860     		str	r0, [r7, #4]
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2211              		.loc 1 1845 16
 2212 0008 7B68     		ldr	r3, [r7, #4]
 2213 000a FB60     		str	r3, [r7, #12]
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2214              		.loc 1 1848 3
 2215 000c 7B68     		ldr	r3, [r7, #4]
 2216 000e 002B     		cmp	r3, #0
 2217 0010 09D1     		bne	.L143
 2218              	.LBB152:
 2219              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2220              		.loc 2 195 2 discriminator 1
 2221              		.syntax unified
 2222              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2223 0012 4FF05003 			mov r3, #80												
 2224 0016 83F31188 		msr basepri, r3											
 2225 001a BFF36F8F 		isb														
 2226 001e BFF34F8F 		dsb														
 2227              	
 2228              	@ 0 "" 2
 2229              		.thumb
 2230              		.syntax unified
 2231 0022 BB60     		str	r3, [r7, #8]
 2232              	.L144:
 2233              	.LBE153:
 2234              	.LBE152:
ARM GAS  /tmp/cc5hVFFU.s 			page 76


 2235              		.loc 1 1848 3 discriminator 1
 2236 0024 FEE7     		b	.L144
 2237              	.L143:
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2238              		.loc 1 1852 15
 2239 0026 214B     		ldr	r3, .L149
 2240 0028 1B68     		ldr	r3, [r3]
 2241              		.loc 1 1852 5
 2242 002a FA68     		ldr	r2, [r7, #12]
 2243 002c 9A42     		cmp	r2, r3
 2244 002e 38D0     		beq	.L148
 2245              		.loc 1 1852 33 discriminator 1
 2246 0030 FB68     		ldr	r3, [r7, #12]
 2247 0032 002B     		cmp	r3, #0
 2248 0034 35D0     		beq	.L148
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 2249              		.loc 1 1854 4
 2250 0036 FFF7FEFF 		bl	vPortEnterCritical
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2251              		.loc 1 1856 9
 2252 003a F868     		ldr	r0, [r7, #12]
 2253 003c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2254 0040 0346     		mov	r3, r0
 2255              		.loc 1 1856 7
 2256 0042 002B     		cmp	r3, #0
 2257 0044 2BD0     		beq	.L146
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2258              		.loc 1 1862 15
 2259 0046 FB68     		ldr	r3, [r7, #12]
 2260 0048 0433     		adds	r3, r3, #4
 2261 004a 1846     		mov	r0, r3
 2262 004c FFF7FEFF 		bl	uxListRemove
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2263              		.loc 1 1863 6
 2264 0050 FB68     		ldr	r3, [r7, #12]
 2265 0052 DA6A     		ldr	r2, [r3, #44]
 2266 0054 164B     		ldr	r3, .L149+4
 2267 0056 1B68     		ldr	r3, [r3]
 2268 0058 9A42     		cmp	r2, r3
 2269 005a 03D9     		bls	.L147
 2270              		.loc 1 1863 6 is_stmt 0 discriminator 1
 2271 005c FB68     		ldr	r3, [r7, #12]
 2272 005e DB6A     		ldr	r3, [r3, #44]
 2273 0060 134A     		ldr	r2, .L149+4
 2274 0062 1360     		str	r3, [r2]
 2275              	.L147:
 2276              		.loc 1 1863 6 discriminator 3
ARM GAS  /tmp/cc5hVFFU.s 			page 77


 2277 0064 FB68     		ldr	r3, [r7, #12]
 2278 0066 DA6A     		ldr	r2, [r3, #44]
 2279 0068 1346     		mov	r3, r2
 2280 006a 9B00     		lsls	r3, r3, #2
 2281 006c 1344     		add	r3, r3, r2
 2282 006e 9B00     		lsls	r3, r3, #2
 2283 0070 104A     		ldr	r2, .L149+8
 2284 0072 1A44     		add	r2, r2, r3
 2285 0074 FB68     		ldr	r3, [r7, #12]
 2286 0076 0433     		adds	r3, r3, #4
 2287 0078 1946     		mov	r1, r3
 2288 007a 1046     		mov	r0, r2
 2289 007c FFF7FEFF 		bl	vListInsertEnd
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2290              		.loc 1 1866 15 is_stmt 1 discriminator 3
 2291 0080 FB68     		ldr	r3, [r7, #12]
 2292 0082 DA6A     		ldr	r2, [r3, #44]
 2293              		.loc 1 1866 43 discriminator 3
 2294 0084 094B     		ldr	r3, .L149
 2295 0086 1B68     		ldr	r3, [r3]
 2296 0088 DB6A     		ldr	r3, [r3, #44]
 2297              		.loc 1 1866 8 discriminator 3
 2298 008a 9A42     		cmp	r2, r3
 2299 008c 07D3     		bcc	.L146
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2300              		.loc 1 1871 7
 2301 008e 0A4B     		ldr	r3, .L149+12
 2302 0090 4FF08052 		mov	r2, #268435456
 2303 0094 1A60     		str	r2, [r3]
 2304              		.syntax unified
 2305              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2306 0096 BFF34F8F 		dsb
 2307              	@ 0 "" 2
 2308              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2309 009a BFF36F8F 		isb
 2310              	@ 0 "" 2
 2311              		.thumb
 2312              		.syntax unified
 2313              	.L146:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
ARM GAS  /tmp/cc5hVFFU.s 			page 78


 2314              		.loc 1 1883 4
 2315 009e FFF7FEFF 		bl	vPortExitCritical
 2316              	.L148:
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2317              		.loc 1 1889 2
 2318 00a2 00BF     		nop
 2319 00a4 1037     		adds	r7, r7, #16
 2320              	.LCFI69:
 2321              		.cfi_def_cfa_offset 8
 2322 00a6 BD46     		mov	sp, r7
 2323              	.LCFI70:
 2324              		.cfi_def_cfa_register 13
 2325              		@ sp needed
 2326 00a8 80BD     		pop	{r7, pc}
 2327              	.L150:
 2328 00aa 00BF     		.align	2
 2329              	.L149:
 2330 00ac 00000000 		.word	pxCurrentTCB
 2331 00b0 00000000 		.word	uxTopReadyPriority
 2332 00b4 00000000 		.word	pxReadyTasksLists
 2333 00b8 04ED00E0 		.word	-536810236
 2334              		.cfi_endproc
 2335              	.LFE20:
 2337              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2338              		.align	1
 2339              		.global	xTaskResumeFromISR
 2340              		.syntax unified
 2341              		.thumb
 2342              		.thumb_func
 2343              		.fpu fpv4-sp-d16
 2345              	xTaskResumeFromISR:
 2346              	.LFB21:
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2347              		.loc 1 1898 2
 2348              		.cfi_startproc
 2349              		@ args = 0, pretend = 0, frame = 40
 2350              		@ frame_needed = 1, uses_anonymous_args = 0
 2351 0000 80B5     		push	{r7, lr}
 2352              	.LCFI71:
 2353              		.cfi_def_cfa_offset 8
 2354              		.cfi_offset 7, -8
 2355              		.cfi_offset 14, -4
 2356 0002 8AB0     		sub	sp, sp, #40
 2357              	.LCFI72:
ARM GAS  /tmp/cc5hVFFU.s 			page 79


 2358              		.cfi_def_cfa_offset 48
 2359 0004 00AF     		add	r7, sp, #0
 2360              	.LCFI73:
 2361              		.cfi_def_cfa_register 7
 2362 0006 7860     		str	r0, [r7, #4]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2363              		.loc 1 1899 13
 2364 0008 0023     		movs	r3, #0
 2365 000a 7B62     		str	r3, [r7, #36]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2366              		.loc 1 1900 16
 2367 000c 7B68     		ldr	r3, [r7, #4]
 2368 000e 3B62     		str	r3, [r7, #32]
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2369              		.loc 1 1903 3
 2370 0010 7B68     		ldr	r3, [r7, #4]
 2371 0012 002B     		cmp	r3, #0
 2372 0014 09D1     		bne	.L152
 2373              	.LBB154:
 2374              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2375              		.loc 2 195 2 discriminator 1
 2376              		.syntax unified
 2377              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2378 0016 4FF05003 			mov r3, #80												
 2379 001a 83F31188 		msr basepri, r3											
 2380 001e BFF36F8F 		isb														
 2381 0022 BFF34F8F 		dsb														
 2382              	
 2383              	@ 0 "" 2
 2384              		.thumb
 2385              		.syntax unified
 2386 0026 BB61     		str	r3, [r7, #24]
 2387              	.L153:
 2388              	.LBE155:
 2389              	.LBE154:
 2390              		.loc 1 1903 3 discriminator 1
 2391 0028 FEE7     		b	.L153
 2392              	.L152:
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
ARM GAS  /tmp/cc5hVFFU.s 			page 80


1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2393              		.loc 1 1921 3
 2394 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
 2395              	.LBB156:
 2396              	.LBB157:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2397              		.loc 2 211 2
 2398              		.syntax unified
 2399              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2400 002e EFF31182 			mrs r2, basepri											
 2401 0032 4FF05003 		mov r3, #80												
 2402 0036 83F31188 		msr basepri, r3											
 2403 003a BFF36F8F 		isb														
 2404 003e BFF34F8F 		dsb														
 2405              	
 2406              	@ 0 "" 2
 2407              		.thumb
 2408              		.syntax unified
 2409 0042 7A61     		str	r2, [r7, #20]
 2410 0044 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2411              		.loc 2 223 9
 2412 0046 7B69     		ldr	r3, [r7, #20]
 2413              	.LBE157:
 2414              	.LBE156:
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2415              		.loc 1 1923 28
 2416 0048 FB61     		str	r3, [r7, #28]
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2417              		.loc 1 1925 8
 2418 004a 386A     		ldr	r0, [r7, #32]
 2419 004c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2420 0050 0346     		mov	r3, r0
 2421              		.loc 1 1925 6
 2422 0052 002B     		cmp	r3, #0
 2423 0054 30D0     		beq	.L155
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2424              		.loc 1 1930 30
 2425 0056 1D4B     		ldr	r3, .L161
 2426 0058 1B68     		ldr	r3, [r3]
 2427              		.loc 1 1930 7
 2428 005a 002B     		cmp	r3, #0
 2429 005c 26D1     		bne	.L156
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2430              		.loc 1 1934 15
 2431 005e 3B6A     		ldr	r3, [r7, #32]
 2432 0060 DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/cc5hVFFU.s 			page 81


 2433              		.loc 1 1934 43
 2434 0062 1B4B     		ldr	r3, .L161+4
 2435 0064 1B68     		ldr	r3, [r3]
 2436 0066 DB6A     		ldr	r3, [r3, #44]
 2437              		.loc 1 1934 8
 2438 0068 9A42     		cmp	r2, r3
 2439 006a 01D3     		bcc	.L157
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2440              		.loc 1 1936 22
 2441 006c 0123     		movs	r3, #1
 2442 006e 7B62     		str	r3, [r7, #36]
 2443              	.L157:
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2444              		.loc 1 1943 15
 2445 0070 3B6A     		ldr	r3, [r7, #32]
 2446 0072 0433     		adds	r3, r3, #4
 2447 0074 1846     		mov	r0, r3
 2448 0076 FFF7FEFF 		bl	uxListRemove
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2449              		.loc 1 1944 6
 2450 007a 3B6A     		ldr	r3, [r7, #32]
 2451 007c DA6A     		ldr	r2, [r3, #44]
 2452 007e 154B     		ldr	r3, .L161+8
 2453 0080 1B68     		ldr	r3, [r3]
 2454 0082 9A42     		cmp	r2, r3
 2455 0084 03D9     		bls	.L158
 2456              		.loc 1 1944 6 is_stmt 0 discriminator 1
 2457 0086 3B6A     		ldr	r3, [r7, #32]
 2458 0088 DB6A     		ldr	r3, [r3, #44]
 2459 008a 124A     		ldr	r2, .L161+8
 2460 008c 1360     		str	r3, [r2]
 2461              	.L158:
 2462              		.loc 1 1944 6 discriminator 3
 2463 008e 3B6A     		ldr	r3, [r7, #32]
 2464 0090 DA6A     		ldr	r2, [r3, #44]
 2465 0092 1346     		mov	r3, r2
 2466 0094 9B00     		lsls	r3, r3, #2
 2467 0096 1344     		add	r3, r3, r2
 2468 0098 9B00     		lsls	r3, r3, #2
 2469 009a 0F4A     		ldr	r2, .L161+12
 2470 009c 1A44     		add	r2, r2, r3
 2471 009e 3B6A     		ldr	r3, [r7, #32]
 2472 00a0 0433     		adds	r3, r3, #4
 2473 00a2 1946     		mov	r1, r3
 2474 00a4 1046     		mov	r0, r2
 2475 00a6 FFF7FEFF 		bl	vListInsertEnd
 2476 00aa 05E0     		b	.L155
 2477              	.L156:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/cc5hVFFU.s 			page 82


1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2478              		.loc 1 1951 6 is_stmt 1
 2479 00ac 3B6A     		ldr	r3, [r7, #32]
 2480 00ae 1833     		adds	r3, r3, #24
 2481 00b0 1946     		mov	r1, r3
 2482 00b2 0A48     		ldr	r0, .L161+16
 2483 00b4 FFF7FEFF 		bl	vListInsertEnd
 2484              	.L155:
 2485 00b8 FB69     		ldr	r3, [r7, #28]
 2486 00ba FB60     		str	r3, [r7, #12]
 2487              	.LBB158:
 2488              	.LBB159:
 2489              		.loc 2 229 2
 2490 00bc FB68     		ldr	r3, [r7, #12]
 2491              		.syntax unified
 2492              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2493 00be 83F31188 			msr basepri, r3	
 2494              	@ 0 "" 2
 2495              		.thumb
 2496              		.syntax unified
 2497              	.LBE159:
 2498              	.LBE158:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2499              		.loc 1 1961 10
 2500 00c2 7B6A     		ldr	r3, [r7, #36]
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2501              		.loc 1 1962 2
 2502 00c4 1846     		mov	r0, r3
 2503 00c6 2837     		adds	r7, r7, #40
 2504              	.LCFI74:
 2505              		.cfi_def_cfa_offset 8
 2506 00c8 BD46     		mov	sp, r7
 2507              	.LCFI75:
 2508              		.cfi_def_cfa_register 13
 2509              		@ sp needed
 2510 00ca 80BD     		pop	{r7, pc}
 2511              	.L162:
 2512              		.align	2
 2513              	.L161:
 2514 00cc 00000000 		.word	uxSchedulerSuspended
 2515 00d0 00000000 		.word	pxCurrentTCB
 2516 00d4 00000000 		.word	uxTopReadyPriority
 2517 00d8 00000000 		.word	pxReadyTasksLists
 2518 00dc 00000000 		.word	xPendingReadyList
ARM GAS  /tmp/cc5hVFFU.s 			page 83


 2519              		.cfi_endproc
 2520              	.LFE21:
 2522              		.section	.rodata
 2523              		.align	2
 2524              	.LC0:
 2525 0000 49444C45 		.ascii	"IDLE\000"
 2525      00
 2526              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2527              		.align	1
 2528              		.global	vTaskStartScheduler
 2529              		.syntax unified
 2530              		.thumb
 2531              		.thumb_func
 2532              		.fpu fpv4-sp-d16
 2534              	vTaskStartScheduler:
 2535              	.LFB22:
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2536              		.loc 1 1968 1
 2537              		.cfi_startproc
 2538              		@ args = 0, pretend = 0, frame = 24
 2539              		@ frame_needed = 1, uses_anonymous_args = 0
 2540 0000 80B5     		push	{r7, lr}
 2541              	.LCFI76:
 2542              		.cfi_def_cfa_offset 8
 2543              		.cfi_offset 7, -8
 2544              		.cfi_offset 14, -4
 2545 0002 8AB0     		sub	sp, sp, #40
 2546              	.LCFI77:
 2547              		.cfi_def_cfa_offset 48
 2548 0004 04AF     		add	r7, sp, #16
 2549              	.LCFI78:
 2550              		.cfi_def_cfa 7, 32
 2551              	.LBB160:
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2552              		.loc 1 1974 17
 2553 0006 0023     		movs	r3, #0
 2554 0008 BB60     		str	r3, [r7, #8]
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2555              		.loc 1 1975 16
 2556 000a 0023     		movs	r3, #0
 2557 000c 7B60     		str	r3, [r7, #4]
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2558              		.loc 1 1980 3
ARM GAS  /tmp/cc5hVFFU.s 			page 84


 2559 000e 3A46     		mov	r2, r7
 2560 0010 391D     		adds	r1, r7, #4
 2561 0012 07F10803 		add	r3, r7, #8
 2562 0016 1846     		mov	r0, r3
 2563 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2564              		.loc 1 1981 21
 2565 001c 3968     		ldr	r1, [r7]
 2566 001e 7B68     		ldr	r3, [r7, #4]
 2567 0020 BA68     		ldr	r2, [r7, #8]
 2568 0022 0292     		str	r2, [sp, #8]
 2569 0024 0193     		str	r3, [sp, #4]
 2570 0026 0023     		movs	r3, #0
 2571 0028 0093     		str	r3, [sp]
 2572 002a 0023     		movs	r3, #0
 2573 002c 0A46     		mov	r2, r1
 2574 002e 2049     		ldr	r1, .L171
 2575 0030 2048     		ldr	r0, .L171+4
 2576 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2577 0036 0246     		mov	r2, r0
 2578              		.loc 1 1981 19
 2579 0038 1F4B     		ldr	r3, .L171+8
 2580 003a 1A60     		str	r2, [r3]
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2581              		.loc 1 1989 23
 2582 003c 1E4B     		ldr	r3, .L171+8
 2583 003e 1B68     		ldr	r3, [r3]
 2584              		.loc 1 1989 5
 2585 0040 002B     		cmp	r3, #0
 2586 0042 02D0     		beq	.L164
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2587              		.loc 1 1991 12
 2588 0044 0123     		movs	r3, #1
 2589 0046 7B61     		str	r3, [r7, #20]
 2590 0048 01E0     		b	.L165
 2591              	.L164:
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2592              		.loc 1 1995 12
 2593 004a 0023     		movs	r3, #0
 2594 004c 7B61     		str	r3, [r7, #20]
 2595              	.L165:
 2596              	.LBE160:
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/cc5hVFFU.s 			page 85


2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 2597              		.loc 1 2012 5
 2598 004e 7B69     		ldr	r3, [r7, #20]
 2599 0050 012B     		cmp	r3, #1
 2600 0052 02D1     		bne	.L166
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2601              		.loc 1 2014 14
 2602 0054 FFF7FEFF 		bl	xTimerCreateTimerTask
 2603 0058 7861     		str	r0, [r7, #20]
 2604              	.L166:
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2605              		.loc 1 2023 4
 2606 005a 7B69     		ldr	r3, [r7, #20]
 2607 005c 012B     		cmp	r3, #1
 2608 005e 15D1     		bne	.L167
 2609              	.LBB161:
 2610              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2611              		.loc 2 195 2
 2612              		.syntax unified
 2613              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2614 0060 4FF05003 			mov r3, #80												
 2615 0064 83F31188 		msr basepri, r3											
 2616 0068 BFF36F8F 		isb														
 2617 006c BFF34F8F 		dsb														
 2618              	
 2619              	@ 0 "" 2
 2620              		.thumb
 2621              		.syntax unified
 2622 0070 3B61     		str	r3, [r7, #16]
 2623              	.LBE162:
 2624              	.LBE161:
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
ARM GAS  /tmp/cc5hVFFU.s 			page 86


2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2625              		.loc 1 2049 24
 2626 0072 124B     		ldr	r3, .L171+12
 2627 0074 4FF0FF32 		mov	r2, #-1
 2628 0078 1A60     		str	r2, [r3]
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2629              		.loc 1 2050 21
 2630 007a 114B     		ldr	r3, .L171+16
 2631 007c 0122     		movs	r2, #1
 2632 007e 1A60     		str	r2, [r3]
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2633              		.loc 1 2051 14
 2634 0080 104B     		ldr	r3, .L171+20
 2635 0082 0022     		movs	r2, #0
 2636 0084 1A60     		str	r2, [r3]
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2637              		.loc 1 2065 7
 2638 0086 FFF7FEFF 		bl	xPortStartScheduler
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/cc5hVFFU.s 			page 87


2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2639              		.loc 1 2086 1
 2640 008a 0DE0     		b	.L170
 2641              	.L167:
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2642              		.loc 1 2080 3
 2643 008c 7B69     		ldr	r3, [r7, #20]
 2644 008e B3F1FF3F 		cmp	r3, #-1
 2645 0092 09D1     		bne	.L170
 2646              	.LBB163:
 2647              	.LBB164:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2648              		.loc 2 195 2 discriminator 1
 2649              		.syntax unified
 2650              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2651 0094 4FF05003 			mov r3, #80												
 2652 0098 83F31188 		msr basepri, r3											
 2653 009c BFF36F8F 		isb														
 2654 00a0 BFF34F8F 		dsb														
 2655              	
 2656              	@ 0 "" 2
 2657              		.thumb
 2658              		.syntax unified
 2659 00a4 FB60     		str	r3, [r7, #12]
 2660              	.L169:
 2661              	.LBE164:
 2662              	.LBE163:
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2663              		.loc 1 2080 3 discriminator 2
 2664 00a6 FEE7     		b	.L169
 2665              	.L170:
 2666              		.loc 1 2086 1
 2667 00a8 00BF     		nop
 2668 00aa 1837     		adds	r7, r7, #24
 2669              	.LCFI79:
 2670              		.cfi_def_cfa_offset 8
 2671 00ac BD46     		mov	sp, r7
 2672              	.LCFI80:
 2673              		.cfi_def_cfa_register 13
 2674              		@ sp needed
 2675 00ae 80BD     		pop	{r7, pc}
 2676              	.L172:
ARM GAS  /tmp/cc5hVFFU.s 			page 88


 2677              		.align	2
 2678              	.L171:
 2679 00b0 00000000 		.word	.LC0
 2680 00b4 00000000 		.word	prvIdleTask
 2681 00b8 00000000 		.word	xIdleTaskHandle
 2682 00bc 00000000 		.word	xNextTaskUnblockTime
 2683 00c0 00000000 		.word	xSchedulerRunning
 2684 00c4 00000000 		.word	xTickCount
 2685              		.cfi_endproc
 2686              	.LFE22:
 2688              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2689              		.align	1
 2690              		.global	vTaskEndScheduler
 2691              		.syntax unified
 2692              		.thumb
 2693              		.thumb_func
 2694              		.fpu fpv4-sp-d16
 2696              	vTaskEndScheduler:
 2697              	.LFB23:
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2698              		.loc 1 2090 1
 2699              		.cfi_startproc
 2700              		@ args = 0, pretend = 0, frame = 8
 2701              		@ frame_needed = 1, uses_anonymous_args = 0
 2702 0000 80B5     		push	{r7, lr}
 2703              	.LCFI81:
 2704              		.cfi_def_cfa_offset 8
 2705              		.cfi_offset 7, -8
 2706              		.cfi_offset 14, -4
 2707 0002 82B0     		sub	sp, sp, #8
 2708              	.LCFI82:
 2709              		.cfi_def_cfa_offset 16
 2710 0004 00AF     		add	r7, sp, #0
 2711              	.LCFI83:
 2712              		.cfi_def_cfa_register 7
 2713              	.LBB165:
 2714              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2715              		.loc 2 195 2
 2716              		.syntax unified
 2717              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2718 0006 4FF05003 			mov r3, #80												
 2719 000a 83F31188 		msr basepri, r3											
 2720 000e BFF36F8F 		isb														
 2721 0012 BFF34F8F 		dsb														
 2722              	
 2723              	@ 0 "" 2
 2724              		.thumb
 2725              		.syntax unified
 2726 0016 7B60     		str	r3, [r7, #4]
 2727              	.LBE166:
 2728              	.LBE165:
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
ARM GAS  /tmp/cc5hVFFU.s 			page 89


2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2729              		.loc 1 2095 20
 2730 0018 044B     		ldr	r3, .L174
 2731 001a 0022     		movs	r2, #0
 2732 001c 1A60     		str	r2, [r3]
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2733              		.loc 1 2096 2
 2734 001e FFF7FEFF 		bl	vPortEndScheduler
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2735              		.loc 1 2097 1
 2736 0022 00BF     		nop
 2737 0024 0837     		adds	r7, r7, #8
 2738              	.LCFI84:
 2739              		.cfi_def_cfa_offset 8
 2740 0026 BD46     		mov	sp, r7
 2741              	.LCFI85:
 2742              		.cfi_def_cfa_register 13
 2743              		@ sp needed
 2744 0028 80BD     		pop	{r7, pc}
 2745              	.L175:
 2746 002a 00BF     		.align	2
 2747              	.L174:
 2748 002c 00000000 		.word	xSchedulerRunning
 2749              		.cfi_endproc
 2750              	.LFE23:
 2752              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2753              		.align	1
 2754              		.global	vTaskSuspendAll
 2755              		.syntax unified
 2756              		.thumb
 2757              		.thumb_func
 2758              		.fpu fpv4-sp-d16
 2760              	vTaskSuspendAll:
 2761              	.LFB24:
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2762              		.loc 1 2101 1
 2763              		.cfi_startproc
 2764              		@ args = 0, pretend = 0, frame = 0
 2765              		@ frame_needed = 1, uses_anonymous_args = 0
 2766              		@ link register save eliminated.
 2767 0000 80B4     		push	{r7}
 2768              	.LCFI86:
 2769              		.cfi_def_cfa_offset 4
 2770              		.cfi_offset 7, -4
 2771 0002 00AF     		add	r7, sp, #0
 2772              	.LCFI87:
 2773              		.cfi_def_cfa_register 7
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
ARM GAS  /tmp/cc5hVFFU.s 			page 90


 2774              		.loc 1 2106 2
 2775 0004 044B     		ldr	r3, .L177
 2776 0006 1B68     		ldr	r3, [r3]
 2777 0008 0133     		adds	r3, r3, #1
 2778 000a 034A     		ldr	r2, .L177
 2779 000c 1360     		str	r3, [r2]
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2780              		.loc 1 2107 2
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2781              		.loc 1 2108 1
 2782 000e 00BF     		nop
 2783 0010 BD46     		mov	sp, r7
 2784              	.LCFI88:
 2785              		.cfi_def_cfa_register 13
 2786              		@ sp needed
 2787 0012 5DF8047B 		ldr	r7, [sp], #4
 2788              	.LCFI89:
 2789              		.cfi_restore 7
 2790              		.cfi_def_cfa_offset 0
 2791 0016 7047     		bx	lr
 2792              	.L178:
 2793              		.align	2
 2794              	.L177:
 2795 0018 00000000 		.word	uxSchedulerSuspended
 2796              		.cfi_endproc
 2797              	.LFE24:
 2799              		.section	.text.xTaskResumeAll,"ax",%progbits
 2800              		.align	1
 2801              		.global	xTaskResumeAll
 2802              		.syntax unified
 2803              		.thumb
 2804              		.thumb_func
 2805              		.fpu fpv4-sp-d16
 2807              	xTaskResumeAll:
 2808              	.LFB25:
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc5hVFFU.s 			page 91


2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2809              		.loc 1 2175 1
 2810              		.cfi_startproc
 2811              		@ args = 0, pretend = 0, frame = 16
 2812              		@ frame_needed = 1, uses_anonymous_args = 0
 2813 0000 80B5     		push	{r7, lr}
 2814              	.LCFI90:
 2815              		.cfi_def_cfa_offset 8
 2816              		.cfi_offset 7, -8
 2817              		.cfi_offset 14, -4
 2818 0002 84B0     		sub	sp, sp, #16
 2819              	.LCFI91:
 2820              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc5hVFFU.s 			page 92


 2821 0004 00AF     		add	r7, sp, #0
 2822              	.LCFI92:
 2823              		.cfi_def_cfa_register 7
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2824              		.loc 1 2176 8
 2825 0006 0023     		movs	r3, #0
 2826 0008 FB60     		str	r3, [r7, #12]
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2827              		.loc 1 2177 12
 2828 000a 0023     		movs	r3, #0
 2829 000c BB60     		str	r3, [r7, #8]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2830              		.loc 1 2181 2
 2831 000e 414B     		ldr	r3, .L191
 2832 0010 1B68     		ldr	r3, [r3]
 2833 0012 002B     		cmp	r3, #0
 2834 0014 09D1     		bne	.L180
 2835              	.LBB167:
 2836              	.LBB168:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2837              		.loc 2 195 2 discriminator 1
 2838              		.syntax unified
 2839              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2840 0016 4FF05003 			mov r3, #80												
 2841 001a 83F31188 		msr basepri, r3											
 2842 001e BFF36F8F 		isb														
 2843 0022 BFF34F8F 		dsb														
 2844              	
 2845              	@ 0 "" 2
 2846              		.thumb
 2847              		.syntax unified
 2848 0026 3B60     		str	r3, [r7]
 2849              	.L181:
 2850              	.LBE168:
 2851              	.LBE167:
 2852              		.loc 1 2181 2 discriminator 1
 2853 0028 FEE7     		b	.L181
 2854              	.L180:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2855              		.loc 1 2188 2
 2856 002a FFF7FEFF 		bl	vPortEnterCritical
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2857              		.loc 1 2190 3
 2858 002e 394B     		ldr	r3, .L191
 2859 0030 1B68     		ldr	r3, [r3]
 2860 0032 013B     		subs	r3, r3, #1
 2861 0034 374A     		ldr	r2, .L191
ARM GAS  /tmp/cc5hVFFU.s 			page 93


 2862 0036 1360     		str	r3, [r2]
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2863              		.loc 1 2192 28
 2864 0038 364B     		ldr	r3, .L191
 2865 003a 1B68     		ldr	r3, [r3]
 2866              		.loc 1 2192 5
 2867 003c 002B     		cmp	r3, #0
 2868 003e 62D1     		bne	.L182
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2869              		.loc 1 2194 31
 2870 0040 354B     		ldr	r3, .L191+4
 2871 0042 1B68     		ldr	r3, [r3]
 2872              		.loc 1 2194 6
 2873 0044 002B     		cmp	r3, #0
 2874 0046 5ED0     		beq	.L182
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2875              		.loc 1 2198 10
 2876 0048 2FE0     		b	.L183
 2877              	.L185:
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2878              		.loc 1 2200 14
 2879 004a 344B     		ldr	r3, .L191+8
 2880 004c DB68     		ldr	r3, [r3, #12]
 2881              		.loc 1 2200 12
 2882 004e DB68     		ldr	r3, [r3, #12]
 2883 0050 FB60     		str	r3, [r7, #12]
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2884              		.loc 1 2201 15
 2885 0052 FB68     		ldr	r3, [r7, #12]
 2886 0054 1833     		adds	r3, r3, #24
 2887 0056 1846     		mov	r0, r3
 2888 0058 FFF7FEFF 		bl	uxListRemove
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2889              		.loc 1 2202 15
 2890 005c FB68     		ldr	r3, [r7, #12]
 2891 005e 0433     		adds	r3, r3, #4
 2892 0060 1846     		mov	r0, r3
 2893 0062 FFF7FEFF 		bl	uxListRemove
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2894              		.loc 1 2203 6
 2895 0066 FB68     		ldr	r3, [r7, #12]
 2896 0068 DA6A     		ldr	r2, [r3, #44]
 2897 006a 2D4B     		ldr	r3, .L191+12
 2898 006c 1B68     		ldr	r3, [r3]
 2899 006e 9A42     		cmp	r2, r3
 2900 0070 03D9     		bls	.L184
 2901              		.loc 1 2203 6 is_stmt 0 discriminator 1
 2902 0072 FB68     		ldr	r3, [r7, #12]
 2903 0074 DB6A     		ldr	r3, [r3, #44]
 2904 0076 2A4A     		ldr	r2, .L191+12
 2905 0078 1360     		str	r3, [r2]
ARM GAS  /tmp/cc5hVFFU.s 			page 94


 2906              	.L184:
 2907              		.loc 1 2203 6 discriminator 3
 2908 007a FB68     		ldr	r3, [r7, #12]
 2909 007c DA6A     		ldr	r2, [r3, #44]
 2910 007e 1346     		mov	r3, r2
 2911 0080 9B00     		lsls	r3, r3, #2
 2912 0082 1344     		add	r3, r3, r2
 2913 0084 9B00     		lsls	r3, r3, #2
 2914 0086 274A     		ldr	r2, .L191+16
 2915 0088 1A44     		add	r2, r2, r3
 2916 008a FB68     		ldr	r3, [r7, #12]
 2917 008c 0433     		adds	r3, r3, #4
 2918 008e 1946     		mov	r1, r3
 2919 0090 1046     		mov	r0, r2
 2920 0092 FFF7FEFF 		bl	vListInsertEnd
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2921              		.loc 1 2207 15 is_stmt 1 discriminator 3
 2922 0096 FB68     		ldr	r3, [r7, #12]
 2923 0098 DA6A     		ldr	r2, [r3, #44]
 2924              		.loc 1 2207 43 discriminator 3
 2925 009a 234B     		ldr	r3, .L191+20
 2926 009c 1B68     		ldr	r3, [r3]
 2927 009e DB6A     		ldr	r3, [r3, #44]
 2928              		.loc 1 2207 8 discriminator 3
 2929 00a0 9A42     		cmp	r2, r3
 2930 00a2 02D3     		bcc	.L183
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2931              		.loc 1 2209 21
 2932 00a4 214B     		ldr	r3, .L191+24
 2933 00a6 0122     		movs	r2, #1
 2934 00a8 1A60     		str	r2, [r3]
 2935              	.L183:
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2936              		.loc 1 2198 12
 2937 00aa 1C4B     		ldr	r3, .L191+8
 2938 00ac 1B68     		ldr	r3, [r3]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2939              		.loc 1 2198 10
 2940 00ae 002B     		cmp	r3, #0
 2941 00b0 CBD1     		bne	.L185
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2942              		.loc 1 2217 7
 2943 00b2 FB68     		ldr	r3, [r7, #12]
 2944 00b4 002B     		cmp	r3, #0
 2945 00b6 01D0     		beq	.L186
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cc5hVFFU.s 			page 95


2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2946              		.loc 1 2225 6
 2947 00b8 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2948              	.L186:
 2949              	.LBB169:
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2950              		.loc 1 2233 18
 2951 00bc 1C4B     		ldr	r3, .L191+28
 2952 00be 1B68     		ldr	r3, [r3]
 2953 00c0 7B60     		str	r3, [r7, #4]
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2954              		.loc 1 2235 8
 2955 00c2 7B68     		ldr	r3, [r7, #4]
 2956 00c4 002B     		cmp	r3, #0
 2957 00c6 10D0     		beq	.L187
 2958              	.L189:
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2959              		.loc 1 2239 12
 2960 00c8 FFF7FEFF 		bl	xTaskIncrementTick
 2961 00cc 0346     		mov	r3, r0
 2962              		.loc 1 2239 10
 2963 00ce 002B     		cmp	r3, #0
 2964 00d0 02D0     		beq	.L188
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2965              		.loc 1 2241 23
 2966 00d2 164B     		ldr	r3, .L191+24
 2967 00d4 0122     		movs	r2, #1
 2968 00d6 1A60     		str	r2, [r3]
 2969              	.L188:
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
 2970              		.loc 1 2247 8
 2971 00d8 7B68     		ldr	r3, [r7, #4]
 2972 00da 013B     		subs	r3, r3, #1
 2973 00dc 7B60     		str	r3, [r7, #4]
ARM GAS  /tmp/cc5hVFFU.s 			page 96


2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2974              		.loc 1 2248 7
 2975 00de 7B68     		ldr	r3, [r7, #4]
 2976 00e0 002B     		cmp	r3, #0
 2977 00e2 F1D1     		bne	.L189
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
 2978              		.loc 1 2250 21
 2979 00e4 124B     		ldr	r3, .L191+28
 2980 00e6 0022     		movs	r2, #0
 2981 00e8 1A60     		str	r2, [r3]
 2982              	.L187:
 2983              	.LBE169:
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2984              		.loc 1 2258 23
 2985 00ea 104B     		ldr	r3, .L191+24
 2986 00ec 1B68     		ldr	r3, [r3]
 2987              		.loc 1 2258 7
 2988 00ee 002B     		cmp	r3, #0
 2989 00f0 09D0     		beq	.L182
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2990              		.loc 1 2262 23
 2991 00f2 0123     		movs	r3, #1
 2992 00f4 BB60     		str	r3, [r7, #8]
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2993              		.loc 1 2265 6
 2994 00f6 0F4B     		ldr	r3, .L191+32
 2995 00f8 4FF08052 		mov	r2, #268435456
 2996 00fc 1A60     		str	r2, [r3]
 2997              		.syntax unified
 2998              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2999 00fe BFF34F8F 		dsb
 3000              	@ 0 "" 2
 3001              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3002 0102 BFF36F8F 		isb
 3003              	@ 0 "" 2
 3004              		.thumb
 3005              		.syntax unified
 3006              	.L182:
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cc5hVFFU.s 			page 97


2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3007              		.loc 1 2278 2
 3008 0106 FFF7FEFF 		bl	vPortExitCritical
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 3009              		.loc 1 2280 9
 3010 010a BB68     		ldr	r3, [r7, #8]
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3011              		.loc 1 2281 1
 3012 010c 1846     		mov	r0, r3
 3013 010e 1037     		adds	r7, r7, #16
 3014              	.LCFI93:
 3015              		.cfi_def_cfa_offset 8
 3016 0110 BD46     		mov	sp, r7
 3017              	.LCFI94:
 3018              		.cfi_def_cfa_register 13
 3019              		@ sp needed
 3020 0112 80BD     		pop	{r7, pc}
 3021              	.L192:
 3022              		.align	2
 3023              	.L191:
 3024 0114 00000000 		.word	uxSchedulerSuspended
 3025 0118 00000000 		.word	uxCurrentNumberOfTasks
 3026 011c 00000000 		.word	xPendingReadyList
 3027 0120 00000000 		.word	uxTopReadyPriority
 3028 0124 00000000 		.word	pxReadyTasksLists
 3029 0128 00000000 		.word	pxCurrentTCB
 3030 012c 00000000 		.word	xYieldPending
 3031 0130 00000000 		.word	uxPendedTicks
 3032 0134 04ED00E0 		.word	-536810236
 3033              		.cfi_endproc
 3034              	.LFE25:
 3036              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3037              		.align	1
 3038              		.global	xTaskGetTickCount
 3039              		.syntax unified
 3040              		.thumb
 3041              		.thumb_func
 3042              		.fpu fpv4-sp-d16
 3044              	xTaskGetTickCount:
 3045              	.LFB26:
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3046              		.loc 1 2285 1
 3047              		.cfi_startproc
 3048              		@ args = 0, pretend = 0, frame = 8
 3049              		@ frame_needed = 1, uses_anonymous_args = 0
 3050              		@ link register save eliminated.
 3051 0000 80B4     		push	{r7}
ARM GAS  /tmp/cc5hVFFU.s 			page 98


 3052              	.LCFI95:
 3053              		.cfi_def_cfa_offset 4
 3054              		.cfi_offset 7, -4
 3055 0002 83B0     		sub	sp, sp, #12
 3056              	.LCFI96:
 3057              		.cfi_def_cfa_offset 16
 3058 0004 00AF     		add	r7, sp, #0
 3059              	.LCFI97:
 3060              		.cfi_def_cfa_register 7
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 3061              		.loc 1 2291 10
 3062 0006 054B     		ldr	r3, .L195
 3063 0008 1B68     		ldr	r3, [r3]
 3064 000a 7B60     		str	r3, [r7, #4]
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 3065              		.loc 1 2295 9
 3066 000c 7B68     		ldr	r3, [r7, #4]
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3067              		.loc 1 2296 1
 3068 000e 1846     		mov	r0, r3
 3069 0010 0C37     		adds	r7, r7, #12
 3070              	.LCFI98:
 3071              		.cfi_def_cfa_offset 4
 3072 0012 BD46     		mov	sp, r7
 3073              	.LCFI99:
 3074              		.cfi_def_cfa_register 13
 3075              		@ sp needed
 3076 0014 5DF8047B 		ldr	r7, [sp], #4
 3077              	.LCFI100:
 3078              		.cfi_restore 7
 3079              		.cfi_def_cfa_offset 0
 3080 0018 7047     		bx	lr
 3081              	.L196:
 3082 001a 00BF     		.align	2
 3083              	.L195:
 3084 001c 00000000 		.word	xTickCount
 3085              		.cfi_endproc
 3086              	.LFE26:
 3088              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3089              		.align	1
 3090              		.global	xTaskGetTickCountFromISR
 3091              		.syntax unified
 3092              		.thumb
 3093              		.thumb_func
 3094              		.fpu fpv4-sp-d16
 3096              	xTaskGetTickCountFromISR:
 3097              	.LFB27:
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc5hVFFU.s 			page 99


2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3098              		.loc 1 2300 1
 3099              		.cfi_startproc
 3100              		@ args = 0, pretend = 0, frame = 8
 3101              		@ frame_needed = 1, uses_anonymous_args = 0
 3102 0000 80B5     		push	{r7, lr}
 3103              	.LCFI101:
 3104              		.cfi_def_cfa_offset 8
 3105              		.cfi_offset 7, -8
 3106              		.cfi_offset 14, -4
 3107 0002 82B0     		sub	sp, sp, #8
 3108              	.LCFI102:
 3109              		.cfi_def_cfa_offset 16
 3110 0004 00AF     		add	r7, sp, #0
 3111              	.LCFI103:
 3112              		.cfi_def_cfa_register 7
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3113              		.loc 1 2318 2
 3114 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3115              		.loc 1 2320 25
 3116 000a 0023     		movs	r3, #0
 3117 000c 7B60     		str	r3, [r7, #4]
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 3118              		.loc 1 2322 11
 3119 000e 044B     		ldr	r3, .L199
 3120 0010 1B68     		ldr	r3, [r3]
 3121 0012 3B60     		str	r3, [r7]
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3122              		.loc 1 2326 9
 3123 0014 3B68     		ldr	r3, [r7]
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3124              		.loc 1 2327 1
 3125 0016 1846     		mov	r0, r3
ARM GAS  /tmp/cc5hVFFU.s 			page 100


 3126 0018 0837     		adds	r7, r7, #8
 3127              	.LCFI104:
 3128              		.cfi_def_cfa_offset 8
 3129 001a BD46     		mov	sp, r7
 3130              	.LCFI105:
 3131              		.cfi_def_cfa_register 13
 3132              		@ sp needed
 3133 001c 80BD     		pop	{r7, pc}
 3134              	.L200:
 3135 001e 00BF     		.align	2
 3136              	.L199:
 3137 0020 00000000 		.word	xTickCount
 3138              		.cfi_endproc
 3139              	.LFE27:
 3141              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3142              		.align	1
 3143              		.global	uxTaskGetNumberOfTasks
 3144              		.syntax unified
 3145              		.thumb
 3146              		.thumb_func
 3147              		.fpu fpv4-sp-d16
 3149              	uxTaskGetNumberOfTasks:
 3150              	.LFB28:
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3151              		.loc 1 2331 1
 3152              		.cfi_startproc
 3153              		@ args = 0, pretend = 0, frame = 0
 3154              		@ frame_needed = 1, uses_anonymous_args = 0
 3155              		@ link register save eliminated.
 3156 0000 80B4     		push	{r7}
 3157              	.LCFI106:
 3158              		.cfi_def_cfa_offset 4
 3159              		.cfi_offset 7, -4
 3160 0002 00AF     		add	r7, sp, #0
 3161              	.LCFI107:
 3162              		.cfi_def_cfa_register 7
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 3163              		.loc 1 2334 9
 3164 0004 034B     		ldr	r3, .L203
 3165 0006 1B68     		ldr	r3, [r3]
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3166              		.loc 1 2335 1
 3167 0008 1846     		mov	r0, r3
 3168 000a BD46     		mov	sp, r7
 3169              	.LCFI108:
 3170              		.cfi_def_cfa_register 13
 3171              		@ sp needed
 3172 000c 5DF8047B 		ldr	r7, [sp], #4
 3173              	.LCFI109:
 3174              		.cfi_restore 7
 3175              		.cfi_def_cfa_offset 0
 3176 0010 7047     		bx	lr
ARM GAS  /tmp/cc5hVFFU.s 			page 101


 3177              	.L204:
 3178 0012 00BF     		.align	2
 3179              	.L203:
 3180 0014 00000000 		.word	uxCurrentNumberOfTasks
 3181              		.cfi_endproc
 3182              	.LFE28:
 3184              		.section	.text.pcTaskGetName,"ax",%progbits
 3185              		.align	1
 3186              		.global	pcTaskGetName
 3187              		.syntax unified
 3188              		.thumb
 3189              		.thumb_func
 3190              		.fpu fpv4-sp-d16
 3192              	pcTaskGetName:
 3193              	.LFB29:
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3194              		.loc 1 2339 1
 3195              		.cfi_startproc
 3196              		@ args = 0, pretend = 0, frame = 16
 3197              		@ frame_needed = 1, uses_anonymous_args = 0
 3198              		@ link register save eliminated.
 3199 0000 80B4     		push	{r7}
 3200              	.LCFI110:
 3201              		.cfi_def_cfa_offset 4
 3202              		.cfi_offset 7, -4
 3203 0002 85B0     		sub	sp, sp, #20
 3204              	.LCFI111:
 3205              		.cfi_def_cfa_offset 24
 3206 0004 00AF     		add	r7, sp, #0
 3207              	.LCFI112:
 3208              		.cfi_def_cfa_register 7
 3209 0006 7860     		str	r0, [r7, #4]
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3210              		.loc 1 2344 10
 3211 0008 7B68     		ldr	r3, [r7, #4]
 3212 000a 002B     		cmp	r3, #0
 3213 000c 02D1     		bne	.L206
 3214              		.loc 1 2344 10 is_stmt 0 discriminator 1
 3215 000e 0D4B     		ldr	r3, .L211
 3216 0010 1B68     		ldr	r3, [r3]
 3217 0012 00E0     		b	.L207
 3218              	.L206:
 3219              		.loc 1 2344 10 discriminator 2
 3220 0014 7B68     		ldr	r3, [r7, #4]
 3221              	.L207:
 3222              		.loc 1 2344 8 is_stmt 1 discriminator 4
 3223 0016 FB60     		str	r3, [r7, #12]
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3224              		.loc 1 2345 2 discriminator 4
 3225 0018 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc5hVFFU.s 			page 102


 3226 001a 002B     		cmp	r3, #0
 3227 001c 09D1     		bne	.L208
 3228              	.LBB170:
 3229              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3230              		.loc 2 195 2 discriminator 1
 3231              		.syntax unified
 3232              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3233 001e 4FF05003 			mov r3, #80												
 3234 0022 83F31188 		msr basepri, r3											
 3235 0026 BFF36F8F 		isb														
 3236 002a BFF34F8F 		dsb														
 3237              	
 3238              	@ 0 "" 2
 3239              		.thumb
 3240              		.syntax unified
 3241 002e BB60     		str	r3, [r7, #8]
 3242              	.L209:
 3243              	.LBE171:
 3244              	.LBE170:
 3245              		.loc 1 2345 2 discriminator 1
 3246 0030 FEE7     		b	.L209
 3247              	.L208:
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3248              		.loc 1 2346 9
 3249 0032 FB68     		ldr	r3, [r7, #12]
 3250 0034 3433     		adds	r3, r3, #52
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3251              		.loc 1 2347 1
 3252 0036 1846     		mov	r0, r3
 3253 0038 1437     		adds	r7, r7, #20
 3254              	.LCFI113:
 3255              		.cfi_def_cfa_offset 4
 3256 003a BD46     		mov	sp, r7
 3257              	.LCFI114:
 3258              		.cfi_def_cfa_register 13
 3259              		@ sp needed
 3260 003c 5DF8047B 		ldr	r7, [sp], #4
 3261              	.LCFI115:
 3262              		.cfi_restore 7
 3263              		.cfi_def_cfa_offset 0
 3264 0040 7047     		bx	lr
 3265              	.L212:
 3266 0042 00BF     		.align	2
 3267              	.L211:
 3268 0044 00000000 		.word	pxCurrentTCB
 3269              		.cfi_endproc
 3270              	.LFE29:
 3272              		.section	.text.prvSearchForNameWithinSingleList,"ax",%progbits
 3273              		.align	1
 3274              		.syntax unified
 3275              		.thumb
 3276              		.thumb_func
 3277              		.fpu fpv4-sp-d16
 3279              	prvSearchForNameWithinSingleList:
 3280              	.LFB30:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc5hVFFU.s 			page 103


2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3281              		.loc 1 2353 2
 3282              		.cfi_startproc
 3283              		@ args = 0, pretend = 0, frame = 40
 3284              		@ frame_needed = 1, uses_anonymous_args = 0
 3285              		@ link register save eliminated.
 3286 0000 80B4     		push	{r7}
 3287              	.LCFI116:
 3288              		.cfi_def_cfa_offset 4
 3289              		.cfi_offset 7, -4
 3290 0002 8BB0     		sub	sp, sp, #44
 3291              	.LCFI117:
 3292              		.cfi_def_cfa_offset 48
 3293 0004 00AF     		add	r7, sp, #0
 3294              	.LCFI118:
 3295              		.cfi_def_cfa_register 7
 3296 0006 7860     		str	r0, [r7, #4]
 3297 0008 3960     		str	r1, [r7]
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 3298              		.loc 1 2354 34
 3299 000a 0023     		movs	r3, #0
 3300 000c 7B62     		str	r3, [r7, #36]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 3301              		.loc 1 2361 7
 3302 000e 7B68     		ldr	r3, [r7, #4]
 3303 0010 1B68     		ldr	r3, [r3]
 3304              		.loc 1 2361 5
 3305 0012 002B     		cmp	r3, #0
 3306 0014 5BD0     		beq	.L214
 3307              	.LBB172:
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
 3308              		.loc 1 2363 4
 3309 0016 7B68     		ldr	r3, [r7, #4]
 3310 0018 BB61     		str	r3, [r7, #24]
 3311 001a BB69     		ldr	r3, [r7, #24]
 3312 001c 5B68     		ldr	r3, [r3, #4]
 3313 001e 5A68     		ldr	r2, [r3, #4]
 3314 0020 BB69     		ldr	r3, [r7, #24]
 3315 0022 5A60     		str	r2, [r3, #4]
 3316 0024 BB69     		ldr	r3, [r7, #24]
 3317 0026 5A68     		ldr	r2, [r3, #4]
 3318 0028 BB69     		ldr	r3, [r7, #24]
 3319 002a 0833     		adds	r3, r3, #8
 3320 002c 9A42     		cmp	r2, r3
 3321 002e 04D1     		bne	.L215
 3322              		.loc 1 2363 4 is_stmt 0 discriminator 1
ARM GAS  /tmp/cc5hVFFU.s 			page 104


 3323 0030 BB69     		ldr	r3, [r7, #24]
 3324 0032 5B68     		ldr	r3, [r3, #4]
 3325 0034 5A68     		ldr	r2, [r3, #4]
 3326 0036 BB69     		ldr	r3, [r7, #24]
 3327 0038 5A60     		str	r2, [r3, #4]
 3328              	.L215:
 3329              		.loc 1 2363 4 discriminator 3
 3330 003a BB69     		ldr	r3, [r7, #24]
 3331 003c 5B68     		ldr	r3, [r3, #4]
 3332 003e DB68     		ldr	r3, [r3, #12]
 3333 0040 7B61     		str	r3, [r7, #20]
 3334              	.L225:
 3335              	.LBE172:
 3336              	.LBB173:
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 3337              		.loc 1 2367 5 is_stmt 1
 3338 0042 7B68     		ldr	r3, [r7, #4]
 3339 0044 3B61     		str	r3, [r7, #16]
 3340 0046 3B69     		ldr	r3, [r7, #16]
 3341 0048 5B68     		ldr	r3, [r3, #4]
 3342 004a 5A68     		ldr	r2, [r3, #4]
 3343 004c 3B69     		ldr	r3, [r7, #16]
 3344 004e 5A60     		str	r2, [r3, #4]
 3345 0050 3B69     		ldr	r3, [r7, #16]
 3346 0052 5A68     		ldr	r2, [r3, #4]
 3347 0054 3B69     		ldr	r3, [r7, #16]
 3348 0056 0833     		adds	r3, r3, #8
 3349 0058 9A42     		cmp	r2, r3
 3350 005a 04D1     		bne	.L216
 3351              		.loc 1 2367 5 is_stmt 0 discriminator 1
 3352 005c 3B69     		ldr	r3, [r7, #16]
 3353 005e 5B68     		ldr	r3, [r3, #4]
 3354 0060 5A68     		ldr	r2, [r3, #4]
 3355 0062 3B69     		ldr	r3, [r7, #16]
 3356 0064 5A60     		str	r2, [r3, #4]
 3357              	.L216:
 3358              		.loc 1 2367 5 discriminator 3
 3359 0066 3B69     		ldr	r3, [r7, #16]
 3360 0068 5B68     		ldr	r3, [r3, #4]
 3361 006a DB68     		ldr	r3, [r3, #12]
 3362 006c FB60     		str	r3, [r7, #12]
 3363              	.LBE173:
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
 3364              		.loc 1 2371 16 is_stmt 1 discriminator 3
 3365 006e 0023     		movs	r3, #0
 3366 0070 FB61     		str	r3, [r7, #28]
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 3367              		.loc 1 2372 12 discriminator 3
 3368 0072 0023     		movs	r3, #0
 3369 0074 3B62     		str	r3, [r7, #32]
 3370              		.loc 1 2372 5 discriminator 3
ARM GAS  /tmp/cc5hVFFU.s 			page 105


 3371 0076 1CE0     		b	.L217
 3372              	.L222:
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
 3373              		.loc 1 2374 16
 3374 0078 FA68     		ldr	r2, [r7, #12]
 3375 007a 3B6A     		ldr	r3, [r7, #32]
 3376 007c 1344     		add	r3, r3, r2
 3377 007e 3433     		adds	r3, r3, #52
 3378 0080 1B78     		ldrb	r3, [r3]
 3379 0082 FB72     		strb	r3, [r7, #11]
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
 3380              		.loc 1 2376 36
 3381 0084 3A68     		ldr	r2, [r7]
 3382 0086 3B6A     		ldr	r3, [r7, #32]
 3383 0088 1344     		add	r3, r3, r2
 3384 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3385              		.loc 1 2376 8
 3386 008c FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 3387 008e 9A42     		cmp	r2, r3
 3388 0090 02D0     		beq	.L218
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
 3389              		.loc 1 2379 18
 3390 0092 0123     		movs	r3, #1
 3391 0094 FB61     		str	r3, [r7, #28]
 3392 0096 06E0     		b	.L219
 3393              	.L218:
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
 3394              		.loc 1 2381 13
 3395 0098 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3396 009a 002B     		cmp	r3, #0
 3397 009c 03D1     		bne	.L219
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
 3398              		.loc 1 2385 16
 3399 009e FB68     		ldr	r3, [r7, #12]
 3400 00a0 7B62     		str	r3, [r7, #36]
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
 3401              		.loc 1 2386 18
 3402 00a2 0123     		movs	r3, #1
 3403 00a4 FB61     		str	r3, [r7, #28]
 3404              	.L219:
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
 3405              		.loc 1 2393 8
 3406 00a6 FB69     		ldr	r3, [r7, #28]
ARM GAS  /tmp/cc5hVFFU.s 			page 106


 3407 00a8 002B     		cmp	r3, #0
 3408 00aa 06D1     		bne	.L227
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3409              		.loc 1 2372 79 discriminator 2
 3410 00ac 3B6A     		ldr	r3, [r7, #32]
 3411 00ae 0133     		adds	r3, r3, #1
 3412 00b0 3B62     		str	r3, [r7, #32]
 3413              	.L217:
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3414              		.loc 1 2372 5 discriminator 1
 3415 00b2 3B6A     		ldr	r3, [r7, #32]
 3416 00b4 0F2B     		cmp	r3, #15
 3417 00b6 DFD9     		bls	.L222
 3418 00b8 00E0     		b	.L221
 3419              	.L227:
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 3420              		.loc 1 2395 7
 3421 00ba 00BF     		nop
 3422              	.L221:
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
 3423              		.loc 1 2399 7
 3424 00bc 7B6A     		ldr	r3, [r7, #36]
 3425 00be 002B     		cmp	r3, #0
 3426 00c0 04D1     		bne	.L228
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 3427              		.loc 1 2405 4
 3428 00c2 FA68     		ldr	r2, [r7, #12]
 3429 00c4 7B69     		ldr	r3, [r7, #20]
 3430 00c6 9A42     		cmp	r2, r3
 3431 00c8 BBD1     		bne	.L225
 3432 00ca 00E0     		b	.L214
 3433              	.L228:
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3434              		.loc 1 2402 6
 3435 00cc 00BF     		nop
 3436              	.L214:
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
 3437              		.loc 1 2412 10
 3438 00ce 7B6A     		ldr	r3, [r7, #36]
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3439              		.loc 1 2413 2
 3440 00d0 1846     		mov	r0, r3
ARM GAS  /tmp/cc5hVFFU.s 			page 107


 3441 00d2 2C37     		adds	r7, r7, #44
 3442              	.LCFI119:
 3443              		.cfi_def_cfa_offset 4
 3444 00d4 BD46     		mov	sp, r7
 3445              	.LCFI120:
 3446              		.cfi_def_cfa_register 13
 3447              		@ sp needed
 3448 00d6 5DF8047B 		ldr	r7, [sp], #4
 3449              	.LCFI121:
 3450              		.cfi_restore 7
 3451              		.cfi_def_cfa_offset 0
 3452 00da 7047     		bx	lr
 3453              		.cfi_endproc
 3454              	.LFE30:
 3456              		.section	.text.xTaskGetHandle,"ax",%progbits
 3457              		.align	1
 3458              		.global	xTaskGetHandle
 3459              		.syntax unified
 3460              		.thumb
 3461              		.thumb_func
 3462              		.fpu fpv4-sp-d16
 3464              	xTaskGetHandle:
 3465              	.LFB31:
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3466              		.loc 1 2421 2
 3467              		.cfi_startproc
 3468              		@ args = 0, pretend = 0, frame = 24
 3469              		@ frame_needed = 1, uses_anonymous_args = 0
 3470 0000 80B5     		push	{r7, lr}
 3471              	.LCFI122:
 3472              		.cfi_def_cfa_offset 8
 3473              		.cfi_offset 7, -8
 3474              		.cfi_offset 14, -4
 3475 0002 86B0     		sub	sp, sp, #24
 3476              	.LCFI123:
 3477              		.cfi_def_cfa_offset 32
 3478 0004 00AF     		add	r7, sp, #0
 3479              	.LCFI124:
 3480              		.cfi_def_cfa_register 7
 3481 0006 7860     		str	r0, [r7, #4]
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
 3482              		.loc 1 2422 14
 3483 0008 3823     		movs	r3, #56
 3484 000a 7B61     		str	r3, [r7, #20]
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 3485              		.loc 1 2426 3
 3486 000c 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/cc5hVFFU.s 			page 108


 3487 000e FFF7FEFF 		bl	strlen
 3488 0012 0346     		mov	r3, r0
 3489 0014 0F2B     		cmp	r3, #15
 3490 0016 09D9     		bls	.L230
 3491              	.LBB174:
 3492              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3493              		.loc 2 195 2 discriminator 1
 3494              		.syntax unified
 3495              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3496 0018 4FF05003 			mov r3, #80												
 3497 001c 83F31188 		msr basepri, r3											
 3498 0020 BFF36F8F 		isb														
 3499 0024 BFF34F8F 		dsb														
 3500              	
 3501              	@ 0 "" 2
 3502              		.thumb
 3503              		.syntax unified
 3504 0028 FB60     		str	r3, [r7, #12]
 3505              	.L231:
 3506              	.LBE175:
 3507              	.LBE174:
 3508              		.loc 1 2426 3 discriminator 1
 3509 002a FEE7     		b	.L231
 3510              	.L230:
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3511              		.loc 1 2428 3
 3512 002c FFF7FEFF 		bl	vTaskSuspendAll
 3513              	.L234:
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
 3514              		.loc 1 2433 12
 3515 0030 7B69     		ldr	r3, [r7, #20]
 3516 0032 013B     		subs	r3, r3, #1
 3517 0034 7B61     		str	r3, [r7, #20]
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
 3518              		.loc 1 2434 13
 3519 0036 7A69     		ldr	r2, [r7, #20]
 3520 0038 1346     		mov	r3, r2
 3521 003a 9B00     		lsls	r3, r3, #2
 3522 003c 1344     		add	r3, r3, r2
 3523 003e 9B00     		lsls	r3, r3, #2
 3524 0040 1C4A     		ldr	r2, .L241
 3525 0042 1344     		add	r3, r3, r2
 3526 0044 7968     		ldr	r1, [r7, #4]
 3527 0046 1846     		mov	r0, r3
 3528 0048 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3529 004c 3861     		str	r0, [r7, #16]
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 3530              		.loc 1 2436 7
 3531 004e 3B69     		ldr	r3, [r7, #16]
 3532 0050 002B     		cmp	r3, #0
ARM GAS  /tmp/cc5hVFFU.s 			page 109


 3533 0052 03D1     		bne	.L240
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
 3534              		.loc 1 2442 4
 3535 0054 7B69     		ldr	r3, [r7, #20]
 3536 0056 002B     		cmp	r3, #0
 3537 0058 EAD1     		bne	.L234
 3538 005a 00E0     		b	.L233
 3539              	.L240:
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3540              		.loc 1 2439 6
 3541 005c 00BF     		nop
 3542              	.L233:
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
 3543              		.loc 1 2445 6
 3544 005e 3B69     		ldr	r3, [r7, #16]
 3545 0060 002B     		cmp	r3, #0
 3546 0062 06D1     		bne	.L235
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 3547              		.loc 1 2447 13
 3548 0064 144B     		ldr	r3, .L241+4
 3549 0066 1B68     		ldr	r3, [r3]
 3550 0068 7968     		ldr	r1, [r7, #4]
 3551 006a 1846     		mov	r0, r3
 3552 006c FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3553 0070 3861     		str	r0, [r7, #16]
 3554              	.L235:
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
 3555              		.loc 1 2450 6
 3556 0072 3B69     		ldr	r3, [r7, #16]
 3557 0074 002B     		cmp	r3, #0
 3558 0076 06D1     		bne	.L236
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
 3559              		.loc 1 2452 13
 3560 0078 104B     		ldr	r3, .L241+8
 3561 007a 1B68     		ldr	r3, [r3]
 3562 007c 7968     		ldr	r1, [r7, #4]
 3563 007e 1846     		mov	r0, r3
 3564 0080 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3565 0084 3861     		str	r0, [r7, #16]
 3566              	.L236:
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
 3567              		.loc 1 2457 7
ARM GAS  /tmp/cc5hVFFU.s 			page 110


 3568 0086 3B69     		ldr	r3, [r7, #16]
 3569 0088 002B     		cmp	r3, #0
 3570 008a 04D1     		bne	.L237
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 3571              		.loc 1 2460 14
 3572 008c 7968     		ldr	r1, [r7, #4]
 3573 008e 0C48     		ldr	r0, .L241+12
 3574 0090 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3575 0094 3861     		str	r0, [r7, #16]
 3576              	.L237:
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
 3577              		.loc 1 2467 7
 3578 0096 3B69     		ldr	r3, [r7, #16]
 3579 0098 002B     		cmp	r3, #0
 3580 009a 04D1     		bne	.L238
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 3581              		.loc 1 2470 14
 3582 009c 7968     		ldr	r1, [r7, #4]
 3583 009e 0948     		ldr	r0, .L241+16
 3584 00a0 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3585 00a4 3861     		str	r0, [r7, #16]
 3586              	.L238:
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3587              		.loc 1 2475 12
 3588 00a6 FFF7FEFF 		bl	xTaskResumeAll
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
 3589              		.loc 1 2477 10
 3590 00aa 3B69     		ldr	r3, [r7, #16]
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3591              		.loc 1 2478 2
 3592 00ac 1846     		mov	r0, r3
 3593 00ae 1837     		adds	r7, r7, #24
 3594              	.LCFI125:
 3595              		.cfi_def_cfa_offset 8
 3596 00b0 BD46     		mov	sp, r7
 3597              	.LCFI126:
 3598              		.cfi_def_cfa_register 13
 3599              		@ sp needed
 3600 00b2 80BD     		pop	{r7, pc}
 3601              	.L242:
 3602              		.align	2
 3603              	.L241:
ARM GAS  /tmp/cc5hVFFU.s 			page 111


 3604 00b4 00000000 		.word	pxReadyTasksLists
 3605 00b8 00000000 		.word	pxDelayedTaskList
 3606 00bc 00000000 		.word	pxOverflowDelayedTaskList
 3607 00c0 00000000 		.word	xSuspendedTaskList
 3608 00c4 00000000 		.word	xTasksWaitingTermination
 3609              		.cfi_endproc
 3610              	.LFE31:
 3612              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3613              		.align	1
 3614              		.global	uxTaskGetSystemState
 3615              		.syntax unified
 3616              		.thumb
 3617              		.thumb_func
 3618              		.fpu fpv4-sp-d16
 3620              	uxTaskGetSystemState:
 3621              	.LFB32:
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3622              		.loc 1 2486 2
 3623              		.cfi_startproc
 3624              		@ args = 0, pretend = 0, frame = 24
 3625              		@ frame_needed = 1, uses_anonymous_args = 0
 3626 0000 80B5     		push	{r7, lr}
 3627              	.LCFI127:
 3628              		.cfi_def_cfa_offset 8
 3629              		.cfi_offset 7, -8
 3630              		.cfi_offset 14, -4
 3631 0002 86B0     		sub	sp, sp, #24
 3632              	.LCFI128:
 3633              		.cfi_def_cfa_offset 32
 3634 0004 00AF     		add	r7, sp, #0
 3635              	.LCFI129:
 3636              		.cfi_def_cfa_register 7
 3637 0006 F860     		str	r0, [r7, #12]
 3638 0008 B960     		str	r1, [r7, #8]
 3639 000a 7A60     		str	r2, [r7, #4]
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3640              		.loc 1 2487 14
 3641 000c 0023     		movs	r3, #0
 3642 000e 7B61     		str	r3, [r7, #20]
 3643              		.loc 1 2487 26
 3644 0010 3823     		movs	r3, #56
 3645 0012 3B61     		str	r3, [r7, #16]
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3646              		.loc 1 2489 3
 3647 0014 FFF7FEFF 		bl	vTaskSuspendAll
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 3648              		.loc 1 2492 20
ARM GAS  /tmp/cc5hVFFU.s 			page 112


 3649 0018 3A4B     		ldr	r3, .L248
 3650 001a 1B68     		ldr	r3, [r3]
 3651              		.loc 1 2492 6
 3652 001c BA68     		ldr	r2, [r7, #8]
 3653 001e 9A42     		cmp	r2, r3
 3654 0020 68D3     		bcc	.L244
 3655              	.L245:
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
 3656              		.loc 1 2498 13 discriminator 1
 3657 0022 3B69     		ldr	r3, [r7, #16]
 3658 0024 013B     		subs	r3, r3, #1
 3659 0026 3B61     		str	r3, [r7, #16]
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3660              		.loc 1 2499 66 discriminator 1
 3661 0028 7A69     		ldr	r2, [r7, #20]
 3662 002a 1346     		mov	r3, r2
 3663 002c DB00     		lsls	r3, r3, #3
 3664 002e 1344     		add	r3, r3, r2
 3665 0030 9B00     		lsls	r3, r3, #2
 3666 0032 1A46     		mov	r2, r3
 3667              		.loc 1 2499 16 discriminator 1
 3668 0034 FB68     		ldr	r3, [r7, #12]
 3669 0036 9818     		adds	r0, r3, r2
 3670 0038 3A69     		ldr	r2, [r7, #16]
 3671 003a 1346     		mov	r3, r2
 3672 003c 9B00     		lsls	r3, r3, #2
 3673 003e 1344     		add	r3, r3, r2
 3674 0040 9B00     		lsls	r3, r3, #2
 3675 0042 314A     		ldr	r2, .L248+4
 3676 0044 1344     		add	r3, r3, r2
 3677 0046 0122     		movs	r2, #1
 3678 0048 1946     		mov	r1, r3
 3679 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3680 004e 0246     		mov	r2, r0
 3681              		.loc 1 2499 13 discriminator 1
 3682 0050 7B69     		ldr	r3, [r7, #20]
 3683 0052 1344     		add	r3, r3, r2
 3684 0054 7B61     		str	r3, [r7, #20]
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3685              		.loc 1 2501 5 discriminator 1
 3686 0056 3B69     		ldr	r3, [r7, #16]
 3687 0058 002B     		cmp	r3, #0
 3688 005a E2D1     		bne	.L245
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3689              		.loc 1 2505 65
 3690 005c 7A69     		ldr	r2, [r7, #20]
 3691 005e 1346     		mov	r3, r2
 3692 0060 DB00     		lsls	r3, r3, #3
ARM GAS  /tmp/cc5hVFFU.s 			page 113


 3693 0062 1344     		add	r3, r3, r2
 3694 0064 9B00     		lsls	r3, r3, #2
 3695 0066 1A46     		mov	r2, r3
 3696              		.loc 1 2505 15
 3697 0068 FB68     		ldr	r3, [r7, #12]
 3698 006a 9818     		adds	r0, r3, r2
 3699 006c 274B     		ldr	r3, .L248+8
 3700 006e 1B68     		ldr	r3, [r3]
 3701 0070 0222     		movs	r2, #2
 3702 0072 1946     		mov	r1, r3
 3703 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3704 0078 0246     		mov	r2, r0
 3705              		.loc 1 2505 12
 3706 007a 7B69     		ldr	r3, [r7, #20]
 3707 007c 1344     		add	r3, r3, r2
 3708 007e 7B61     		str	r3, [r7, #20]
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3709              		.loc 1 2506 65
 3710 0080 7A69     		ldr	r2, [r7, #20]
 3711 0082 1346     		mov	r3, r2
 3712 0084 DB00     		lsls	r3, r3, #3
 3713 0086 1344     		add	r3, r3, r2
 3714 0088 9B00     		lsls	r3, r3, #2
 3715 008a 1A46     		mov	r2, r3
 3716              		.loc 1 2506 15
 3717 008c FB68     		ldr	r3, [r7, #12]
 3718 008e 9818     		adds	r0, r3, r2
 3719 0090 1F4B     		ldr	r3, .L248+12
 3720 0092 1B68     		ldr	r3, [r3]
 3721 0094 0222     		movs	r2, #2
 3722 0096 1946     		mov	r1, r3
 3723 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3724 009c 0246     		mov	r2, r0
 3725              		.loc 1 2506 12
 3726 009e 7B69     		ldr	r3, [r7, #20]
 3727 00a0 1344     		add	r3, r3, r2
 3728 00a2 7B61     		str	r3, [r7, #20]
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3729              		.loc 1 2512 66
 3730 00a4 7A69     		ldr	r2, [r7, #20]
 3731 00a6 1346     		mov	r3, r2
 3732 00a8 DB00     		lsls	r3, r3, #3
 3733 00aa 1344     		add	r3, r3, r2
 3734 00ac 9B00     		lsls	r3, r3, #2
 3735 00ae 1A46     		mov	r2, r3
 3736              		.loc 1 2512 16
 3737 00b0 FB68     		ldr	r3, [r7, #12]
 3738 00b2 1344     		add	r3, r3, r2
 3739 00b4 0422     		movs	r2, #4
 3740 00b6 1749     		ldr	r1, .L248+16
 3741 00b8 1846     		mov	r0, r3
 3742 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
ARM GAS  /tmp/cc5hVFFU.s 			page 114


 3743 00be 0246     		mov	r2, r0
 3744              		.loc 1 2512 13
 3745 00c0 7B69     		ldr	r3, [r7, #20]
 3746 00c2 1344     		add	r3, r3, r2
 3747 00c4 7B61     		str	r3, [r7, #20]
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3748              		.loc 1 2520 66
 3749 00c6 7A69     		ldr	r2, [r7, #20]
 3750 00c8 1346     		mov	r3, r2
 3751 00ca DB00     		lsls	r3, r3, #3
 3752 00cc 1344     		add	r3, r3, r2
 3753 00ce 9B00     		lsls	r3, r3, #2
 3754 00d0 1A46     		mov	r2, r3
 3755              		.loc 1 2520 16
 3756 00d2 FB68     		ldr	r3, [r7, #12]
 3757 00d4 1344     		add	r3, r3, r2
 3758 00d6 0322     		movs	r2, #3
 3759 00d8 0F49     		ldr	r1, .L248+20
 3760 00da 1846     		mov	r0, r3
 3761 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3762 00e0 0246     		mov	r2, r0
 3763              		.loc 1 2520 13
 3764 00e2 7B69     		ldr	r3, [r7, #20]
 3765 00e4 1344     		add	r3, r3, r2
 3766 00e6 7B61     		str	r3, [r7, #20]
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 3767              		.loc 1 2537 8
 3768 00e8 7B68     		ldr	r3, [r7, #4]
 3769 00ea 002B     		cmp	r3, #0
 3770 00ec 02D0     		beq	.L244
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
 3771              		.loc 1 2539 24
 3772 00ee 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc5hVFFU.s 			page 115


 3773 00f0 0022     		movs	r2, #0
 3774 00f2 1A60     		str	r2, [r3]
 3775              	.L244:
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3776              		.loc 1 2549 12
 3777 00f4 FFF7FEFF 		bl	xTaskResumeAll
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 3778              		.loc 1 2551 10
 3779 00f8 7B69     		ldr	r3, [r7, #20]
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3780              		.loc 1 2552 2
 3781 00fa 1846     		mov	r0, r3
 3782 00fc 1837     		adds	r7, r7, #24
 3783              	.LCFI130:
 3784              		.cfi_def_cfa_offset 8
 3785 00fe BD46     		mov	sp, r7
 3786              	.LCFI131:
 3787              		.cfi_def_cfa_register 13
 3788              		@ sp needed
 3789 0100 80BD     		pop	{r7, pc}
 3790              	.L249:
 3791 0102 00BF     		.align	2
 3792              	.L248:
 3793 0104 00000000 		.word	uxCurrentNumberOfTasks
 3794 0108 00000000 		.word	pxReadyTasksLists
 3795 010c 00000000 		.word	pxDelayedTaskList
 3796 0110 00000000 		.word	pxOverflowDelayedTaskList
 3797 0114 00000000 		.word	xTasksWaitingTermination
 3798 0118 00000000 		.word	xSuspendedTaskList
 3799              		.cfi_endproc
 3800              	.LFE32:
 3802              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3803              		.align	1
 3804              		.global	xTaskIncrementTick
 3805              		.syntax unified
 3806              		.thumb
 3807              		.thumb_func
 3808              		.fpu fpv4-sp-d16
 3810              	xTaskIncrementTick:
 3811              	.LFB33:
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
ARM GAS  /tmp/cc5hVFFU.s 			page 116


2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cc5hVFFU.s 			page 117


2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3812              		.loc 1 2666 1
 3813              		.cfi_startproc
 3814              		@ args = 0, pretend = 0, frame = 24
 3815              		@ frame_needed = 1, uses_anonymous_args = 0
 3816 0000 80B5     		push	{r7, lr}
 3817              	.LCFI132:
 3818              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc5hVFFU.s 			page 118


 3819              		.cfi_offset 7, -8
 3820              		.cfi_offset 14, -4
 3821 0002 86B0     		sub	sp, sp, #24
 3822              	.LCFI133:
 3823              		.cfi_def_cfa_offset 32
 3824 0004 00AF     		add	r7, sp, #0
 3825              	.LCFI134:
 3826              		.cfi_def_cfa_register 7
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3827              		.loc 1 2669 12
 3828 0006 0023     		movs	r3, #0
 3829 0008 7B61     		str	r3, [r7, #20]
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3830              		.loc 1 2675 27
 3831 000a 4E4B     		ldr	r3, .L266
 3832 000c 1B68     		ldr	r3, [r3]
 3833              		.loc 1 2675 4
 3834 000e 002B     		cmp	r3, #0
 3835 0010 40F08880 		bne	.L251
 3836              	.LBB176:
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3837              		.loc 1 2679 49
 3838 0014 4C4B     		ldr	r3, .L266+4
 3839 0016 1B68     		ldr	r3, [r3]
 3840              		.loc 1 2679 20
 3841 0018 0133     		adds	r3, r3, #1
 3842 001a 3B61     		str	r3, [r7, #16]
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3843              		.loc 1 2683 14
 3844 001c 4A4A     		ldr	r2, .L266+4
 3845 001e 3B69     		ldr	r3, [r7, #16]
 3846 0020 1360     		str	r3, [r2]
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3847              		.loc 1 2685 5
 3848 0022 3B69     		ldr	r3, [r7, #16]
 3849 0024 002B     		cmp	r3, #0
 3850 0026 1FD1     		bne	.L252
 3851              	.LBB177:
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3852              		.loc 1 2687 4
 3853 0028 484B     		ldr	r3, .L266+8
 3854 002a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc5hVFFU.s 			page 119


 3855 002c 1B68     		ldr	r3, [r3]
 3856 002e 002B     		cmp	r3, #0
 3857 0030 09D0     		beq	.L253
 3858              	.LBB178:
 3859              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3860              		.loc 2 195 2 discriminator 1
 3861              		.syntax unified
 3862              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3863 0032 4FF05003 			mov r3, #80												
 3864 0036 83F31188 		msr basepri, r3											
 3865 003a BFF36F8F 		isb														
 3866 003e BFF34F8F 		dsb														
 3867              	
 3868              	@ 0 "" 2
 3869              		.thumb
 3870              		.syntax unified
 3871 0042 3B60     		str	r3, [r7]
 3872              	.L254:
 3873              	.LBE179:
 3874              	.LBE178:
 3875              		.loc 1 2687 4 discriminator 1
 3876 0044 FEE7     		b	.L254
 3877              	.L253:
 3878              		.loc 1 2687 4 is_stmt 0 discriminator 2
 3879 0046 414B     		ldr	r3, .L266+8
 3880 0048 1B68     		ldr	r3, [r3]
 3881 004a FB60     		str	r3, [r7, #12]
 3882 004c 404B     		ldr	r3, .L266+12
 3883 004e 1B68     		ldr	r3, [r3]
 3884 0050 3E4A     		ldr	r2, .L266+8
 3885 0052 1360     		str	r3, [r2]
 3886 0054 3E4A     		ldr	r2, .L266+12
 3887 0056 FB68     		ldr	r3, [r7, #12]
 3888 0058 1360     		str	r3, [r2]
 3889 005a 3E4B     		ldr	r3, .L266+16
 3890 005c 1B68     		ldr	r3, [r3]
 3891 005e 0133     		adds	r3, r3, #1
 3892 0060 3C4A     		ldr	r2, .L266+16
 3893 0062 1360     		str	r3, [r2]
 3894 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3895              	.L252:
 3896              	.LBE177:
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3897              		.loc 1 2698 23 is_stmt 1
 3898 0068 3B4B     		ldr	r3, .L266+20
 3899 006a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc5hVFFU.s 			page 120


 3900              		.loc 1 2698 5
 3901 006c 3A69     		ldr	r2, [r7, #16]
 3902 006e 9A42     		cmp	r2, r3
 3903 0070 49D3     		bcc	.L255
 3904              	.L261:
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3905              		.loc 1 2702 9
 3906 0072 364B     		ldr	r3, .L266+8
 3907 0074 1B68     		ldr	r3, [r3]
 3908 0076 1B68     		ldr	r3, [r3]
 3909              		.loc 1 2702 7
 3910 0078 002B     		cmp	r3, #0
 3911 007a 04D1     		bne	.L256
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3912              		.loc 1 2709 27
 3913 007c 364B     		ldr	r3, .L266+20
 3914 007e 4FF0FF32 		mov	r2, #-1
 3915 0082 1A60     		str	r2, [r3]
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3916              		.loc 1 2710 6
 3917 0084 3FE0     		b	.L255
 3918              	.L256:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3919              		.loc 1 2718 14
 3920 0086 314B     		ldr	r3, .L266+8
 3921 0088 1B68     		ldr	r3, [r3]
 3922 008a DB68     		ldr	r3, [r3, #12]
 3923              		.loc 1 2718 12
 3924 008c DB68     		ldr	r3, [r3, #12]
 3925 008e BB60     		str	r3, [r7, #8]
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3926              		.loc 1 2719 17
 3927 0090 BB68     		ldr	r3, [r7, #8]
 3928 0092 5B68     		ldr	r3, [r3, #4]
 3929 0094 7B60     		str	r3, [r7, #4]
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3930              		.loc 1 2721 8
 3931 0096 3A69     		ldr	r2, [r7, #16]
 3932 0098 7B68     		ldr	r3, [r7, #4]
 3933 009a 9A42     		cmp	r2, r3
ARM GAS  /tmp/cc5hVFFU.s 			page 121


 3934 009c 03D2     		bcs	.L257
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3935              		.loc 1 2728 28
 3936 009e 2E4A     		ldr	r2, .L266+20
 3937 00a0 7B68     		ldr	r3, [r7, #4]
 3938 00a2 1360     		str	r3, [r2]
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3939              		.loc 1 2729 7
 3940 00a4 2FE0     		b	.L255
 3941              	.L257:
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3942              		.loc 1 2737 15
 3943 00a6 BB68     		ldr	r3, [r7, #8]
 3944 00a8 0433     		adds	r3, r3, #4
 3945 00aa 1846     		mov	r0, r3
 3946 00ac FFF7FEFF 		bl	uxListRemove
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3947              		.loc 1 2741 10
 3948 00b0 BB68     		ldr	r3, [r7, #8]
 3949 00b2 9B6A     		ldr	r3, [r3, #40]
 3950              		.loc 1 2741 8
 3951 00b4 002B     		cmp	r3, #0
 3952 00b6 04D0     		beq	.L258
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3953              		.loc 1 2743 16
 3954 00b8 BB68     		ldr	r3, [r7, #8]
 3955 00ba 1833     		adds	r3, r3, #24
 3956 00bc 1846     		mov	r0, r3
 3957 00be FFF7FEFF 		bl	uxListRemove
 3958              	.L258:
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3959              		.loc 1 2752 6
ARM GAS  /tmp/cc5hVFFU.s 			page 122


 3960 00c2 BB68     		ldr	r3, [r7, #8]
 3961 00c4 DA6A     		ldr	r2, [r3, #44]
 3962 00c6 254B     		ldr	r3, .L266+24
 3963 00c8 1B68     		ldr	r3, [r3]
 3964 00ca 9A42     		cmp	r2, r3
 3965 00cc 03D9     		bls	.L259
 3966              		.loc 1 2752 6 is_stmt 0 discriminator 1
 3967 00ce BB68     		ldr	r3, [r7, #8]
 3968 00d0 DB6A     		ldr	r3, [r3, #44]
 3969 00d2 224A     		ldr	r2, .L266+24
 3970 00d4 1360     		str	r3, [r2]
 3971              	.L259:
 3972              		.loc 1 2752 6 discriminator 3
 3973 00d6 BB68     		ldr	r3, [r7, #8]
 3974 00d8 DA6A     		ldr	r2, [r3, #44]
 3975 00da 1346     		mov	r3, r2
 3976 00dc 9B00     		lsls	r3, r3, #2
 3977 00de 1344     		add	r3, r3, r2
 3978 00e0 9B00     		lsls	r3, r3, #2
 3979 00e2 1F4A     		ldr	r2, .L266+28
 3980 00e4 1A44     		add	r2, r2, r3
 3981 00e6 BB68     		ldr	r3, [r7, #8]
 3982 00e8 0433     		adds	r3, r3, #4
 3983 00ea 1946     		mov	r1, r3
 3984 00ec 1046     		mov	r0, r2
 3985 00ee FFF7FEFF 		bl	vListInsertEnd
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3986              		.loc 1 2762 16 is_stmt 1 discriminator 3
 3987 00f2 BB68     		ldr	r3, [r7, #8]
 3988 00f4 DA6A     		ldr	r2, [r3, #44]
 3989              		.loc 1 2762 44 discriminator 3
 3990 00f6 1B4B     		ldr	r3, .L266+32
 3991 00f8 1B68     		ldr	r3, [r3]
 3992 00fa DB6A     		ldr	r3, [r3, #44]
 3993              		.loc 1 2762 9 discriminator 3
 3994 00fc 9A42     		cmp	r2, r3
 3995 00fe B8D3     		bcc	.L261
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3996              		.loc 1 2764 24
 3997 0100 0123     		movs	r3, #1
 3998 0102 7B61     		str	r3, [r7, #20]
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3999              		.loc 1 2702 7
 4000 0104 B5E7     		b	.L261
 4001              	.L255:
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
ARM GAS  /tmp/cc5hVFFU.s 			page 123


2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 4002              		.loc 1 2781 8
 4003 0106 174B     		ldr	r3, .L266+32
 4004 0108 1B68     		ldr	r3, [r3]
 4005 010a DA6A     		ldr	r2, [r3, #44]
 4006 010c 1449     		ldr	r1, .L266+28
 4007 010e 1346     		mov	r3, r2
 4008 0110 9B00     		lsls	r3, r3, #2
 4009 0112 1344     		add	r3, r3, r2
 4010 0114 9B00     		lsls	r3, r3, #2
 4011 0116 0B44     		add	r3, r3, r1
 4012 0118 1B68     		ldr	r3, [r3]
 4013              		.loc 1 2781 6
 4014 011a 012B     		cmp	r3, #1
 4015 011c 07D9     		bls	.L263
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 4016              		.loc 1 2783 21
 4017 011e 0123     		movs	r3, #1
 4018 0120 7B61     		str	r3, [r7, #20]
 4019 0122 04E0     		b	.L263
 4020              	.L251:
 4021              	.LBE176:
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cc5hVFFU.s 			page 124


2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
 4022              		.loc 1 2809 3
 4023 0124 104B     		ldr	r3, .L266+36
 4024 0126 1B68     		ldr	r3, [r3]
 4025 0128 0133     		adds	r3, r3, #1
 4026 012a 0F4A     		ldr	r2, .L266+36
 4027 012c 1360     		str	r3, [r2]
 4028              	.L263:
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 4029              		.loc 1 2822 21
 4030 012e 0F4B     		ldr	r3, .L266+40
 4031 0130 1B68     		ldr	r3, [r3]
 4032              		.loc 1 2822 5
 4033 0132 002B     		cmp	r3, #0
 4034 0134 01D0     		beq	.L264
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 4035              		.loc 1 2824 20
 4036 0136 0123     		movs	r3, #1
 4037 0138 7B61     		str	r3, [r7, #20]
 4038              	.L264:
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 4039              		.loc 1 2833 9
 4040 013a 7B69     		ldr	r3, [r7, #20]
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4041              		.loc 1 2834 1
 4042 013c 1846     		mov	r0, r3
 4043 013e 1837     		adds	r7, r7, #24
 4044              	.LCFI135:
 4045              		.cfi_def_cfa_offset 8
 4046 0140 BD46     		mov	sp, r7
 4047              	.LCFI136:
ARM GAS  /tmp/cc5hVFFU.s 			page 125


 4048              		.cfi_def_cfa_register 13
 4049              		@ sp needed
 4050 0142 80BD     		pop	{r7, pc}
 4051              	.L267:
 4052              		.align	2
 4053              	.L266:
 4054 0144 00000000 		.word	uxSchedulerSuspended
 4055 0148 00000000 		.word	xTickCount
 4056 014c 00000000 		.word	pxDelayedTaskList
 4057 0150 00000000 		.word	pxOverflowDelayedTaskList
 4058 0154 00000000 		.word	xNumOfOverflows
 4059 0158 00000000 		.word	xNextTaskUnblockTime
 4060 015c 00000000 		.word	uxTopReadyPriority
 4061 0160 00000000 		.word	pxReadyTasksLists
 4062 0164 00000000 		.word	pxCurrentTCB
 4063 0168 00000000 		.word	uxPendedTicks
 4064 016c 00000000 		.word	xYieldPending
 4065              		.cfi_endproc
 4066              	.LFE33:
 4068              		.section	.text.vTaskSwitchContext,"ax",%progbits
 4069              		.align	1
 4070              		.global	vTaskSwitchContext
 4071              		.syntax unified
 4072              		.thumb
 4073              		.thumb_func
 4074              		.fpu fpv4-sp-d16
 4076              	vTaskSwitchContext:
 4077              	.LFB34:
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
ARM GAS  /tmp/cc5hVFFU.s 			page 126


2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
ARM GAS  /tmp/cc5hVFFU.s 			page 127


2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4078              		.loc 1 2948 1
 4079              		.cfi_startproc
 4080              		@ args = 0, pretend = 0, frame = 16
 4081              		@ frame_needed = 1, uses_anonymous_args = 0
 4082              		@ link register save eliminated.
 4083 0000 80B4     		push	{r7}
 4084              	.LCFI137:
 4085              		.cfi_def_cfa_offset 4
 4086              		.cfi_offset 7, -4
 4087 0002 85B0     		sub	sp, sp, #20
 4088              	.LCFI138:
 4089              		.cfi_def_cfa_offset 24
 4090 0004 00AF     		add	r7, sp, #0
 4091              	.LCFI139:
 4092              		.cfi_def_cfa_register 7
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 4093              		.loc 1 2949 27
 4094 0006 2C4B     		ldr	r3, .L277
 4095 0008 1B68     		ldr	r3, [r3]
 4096              		.loc 1 2949 4
 4097 000a 002B     		cmp	r3, #0
 4098 000c 03D0     		beq	.L269
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4099              		.loc 1 2953 17
 4100 000e 2B4B     		ldr	r3, .L277+4
 4101 0010 0122     		movs	r2, #1
ARM GAS  /tmp/cc5hVFFU.s 			page 128


 4102 0012 1A60     		str	r2, [r3]
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
ARM GAS  /tmp/cc5hVFFU.s 			page 129


3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4103              		.loc 1 3017 1
 4104 0014 4AE0     		b	.L276
 4105              	.L269:
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 4106              		.loc 1 2957 17
 4107 0016 294B     		ldr	r3, .L277+4
 4108 0018 0022     		movs	r2, #0
 4109 001a 1A60     		str	r2, [r3]
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4110              		.loc 1 2993 16
 4111 001c 284B     		ldr	r3, .L277+8
 4112 001e 1B68     		ldr	r3, [r3]
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4113              		.loc 1 2993 29
 4114 0020 284A     		ldr	r2, .L277+12
 4115 0022 1268     		ldr	r2, [r2]
 4116 0024 DA65     		str	r2, [r3, #92]
 4117              	.LBB180:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4118              		.loc 1 2999 3
 4119 0026 284B     		ldr	r3, .L277+16
 4120 0028 1B68     		ldr	r3, [r3]
 4121 002a FB60     		str	r3, [r7, #12]
 4122 002c 0FE0     		b	.L271
 4123              	.L274:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4124              		.loc 1 2999 3 is_stmt 0 discriminator 5
 4125 002e FB68     		ldr	r3, [r7, #12]
 4126 0030 002B     		cmp	r3, #0
 4127 0032 09D1     		bne	.L272
 4128              	.LBB181:
 4129              	.LBB182:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4130              		.loc 2 195 2 is_stmt 1 discriminator 2
 4131              		.syntax unified
 4132              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4133 0034 4FF05003 			mov r3, #80												
 4134 0038 83F31188 		msr basepri, r3											
 4135 003c BFF36F8F 		isb														
 4136 0040 BFF34F8F 		dsb														
 4137              	
 4138              	@ 0 "" 2
 4139              		.thumb
 4140              		.syntax unified
 4141 0044 7B60     		str	r3, [r7, #4]
 4142              	.L273:
 4143              	.LBE182:
 4144              	.LBE181:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
ARM GAS  /tmp/cc5hVFFU.s 			page 130


 4145              		.loc 1 2999 3 discriminator 1
 4146 0046 FEE7     		b	.L273
 4147              	.L272:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4148              		.loc 1 2999 3 is_stmt 0 discriminator 3
 4149 0048 FB68     		ldr	r3, [r7, #12]
 4150 004a 013B     		subs	r3, r3, #1
 4151 004c FB60     		str	r3, [r7, #12]
 4152              	.L271:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4153              		.loc 1 2999 3 discriminator 4
 4154 004e 1F49     		ldr	r1, .L277+20
 4155 0050 FA68     		ldr	r2, [r7, #12]
 4156 0052 1346     		mov	r3, r2
 4157 0054 9B00     		lsls	r3, r3, #2
 4158 0056 1344     		add	r3, r3, r2
 4159 0058 9B00     		lsls	r3, r3, #2
 4160 005a 0B44     		add	r3, r3, r1
 4161 005c 1B68     		ldr	r3, [r3]
 4162 005e 002B     		cmp	r3, #0
 4163 0060 E5D0     		beq	.L274
 4164              	.LBB183:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4165              		.loc 1 2999 3 discriminator 6
 4166 0062 FA68     		ldr	r2, [r7, #12]
 4167 0064 1346     		mov	r3, r2
 4168 0066 9B00     		lsls	r3, r3, #2
 4169 0068 1344     		add	r3, r3, r2
 4170 006a 9B00     		lsls	r3, r3, #2
 4171 006c 174A     		ldr	r2, .L277+20
 4172 006e 1344     		add	r3, r3, r2
 4173 0070 BB60     		str	r3, [r7, #8]
 4174 0072 BB68     		ldr	r3, [r7, #8]
 4175 0074 5B68     		ldr	r3, [r3, #4]
 4176 0076 5A68     		ldr	r2, [r3, #4]
 4177 0078 BB68     		ldr	r3, [r7, #8]
 4178 007a 5A60     		str	r2, [r3, #4]
 4179 007c BB68     		ldr	r3, [r7, #8]
 4180 007e 5A68     		ldr	r2, [r3, #4]
 4181 0080 BB68     		ldr	r3, [r7, #8]
 4182 0082 0833     		adds	r3, r3, #8
 4183 0084 9A42     		cmp	r2, r3
 4184 0086 04D1     		bne	.L275
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4185              		.loc 1 2999 3 discriminator 7
 4186 0088 BB68     		ldr	r3, [r7, #8]
 4187 008a 5B68     		ldr	r3, [r3, #4]
 4188 008c 5A68     		ldr	r2, [r3, #4]
 4189 008e BB68     		ldr	r3, [r7, #8]
 4190 0090 5A60     		str	r2, [r3, #4]
 4191              	.L275:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4192              		.loc 1 2999 3 discriminator 9
 4193 0092 BB68     		ldr	r3, [r7, #8]
 4194 0094 5B68     		ldr	r3, [r3, #4]
 4195 0096 DB68     		ldr	r3, [r3, #12]
 4196 0098 094A     		ldr	r2, .L277+8
ARM GAS  /tmp/cc5hVFFU.s 			page 131


 4197 009a 1360     		str	r3, [r2]
 4198              	.LBE183:
 4199 009c 0A4A     		ldr	r2, .L277+16
 4200 009e FB68     		ldr	r3, [r7, #12]
 4201 00a0 1360     		str	r3, [r2]
 4202              	.LBE180:
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4203              		.loc 1 3005 33 is_stmt 1 discriminator 9
 4204 00a2 074B     		ldr	r3, .L277+8
 4205 00a4 1B68     		ldr	r3, [r3]
 4206 00a6 DB6D     		ldr	r3, [r3, #92]
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4207              		.loc 1 3005 19 discriminator 9
 4208 00a8 064A     		ldr	r2, .L277+12
 4209 00aa 1360     		str	r3, [r2]
 4210              	.L276:
 4211              		.loc 1 3017 1
 4212 00ac 00BF     		nop
 4213 00ae 1437     		adds	r7, r7, #20
 4214              	.LCFI140:
 4215              		.cfi_def_cfa_offset 4
 4216 00b0 BD46     		mov	sp, r7
 4217              	.LCFI141:
 4218              		.cfi_def_cfa_register 13
 4219              		@ sp needed
 4220 00b2 5DF8047B 		ldr	r7, [sp], #4
 4221              	.LCFI142:
 4222              		.cfi_restore 7
 4223              		.cfi_def_cfa_offset 0
 4224 00b6 7047     		bx	lr
 4225              	.L278:
 4226              		.align	2
 4227              	.L277:
 4228 00b8 00000000 		.word	uxSchedulerSuspended
 4229 00bc 00000000 		.word	xYieldPending
 4230 00c0 00000000 		.word	pxCurrentTCB
 4231 00c4 00000000 		.word	FreeRTOS_errno
 4232 00c8 00000000 		.word	uxTopReadyPriority
 4233 00cc 00000000 		.word	pxReadyTasksLists
 4234              		.cfi_endproc
 4235              	.LFE34:
 4237              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4238              		.align	1
 4239              		.global	vTaskPlaceOnEventList
 4240              		.syntax unified
 4241              		.thumb
 4242              		.thumb_func
 4243              		.fpu fpv4-sp-d16
 4245              	vTaskPlaceOnEventList:
 4246              	.LFB35:
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4247              		.loc 1 3021 1
 4248              		.cfi_startproc
 4249              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/cc5hVFFU.s 			page 132


 4250              		@ frame_needed = 1, uses_anonymous_args = 0
 4251 0000 80B5     		push	{r7, lr}
 4252              	.LCFI143:
 4253              		.cfi_def_cfa_offset 8
 4254              		.cfi_offset 7, -8
 4255              		.cfi_offset 14, -4
 4256 0002 84B0     		sub	sp, sp, #16
 4257              	.LCFI144:
 4258              		.cfi_def_cfa_offset 24
 4259 0004 00AF     		add	r7, sp, #0
 4260              	.LCFI145:
 4261              		.cfi_def_cfa_register 7
 4262 0006 7860     		str	r0, [r7, #4]
 4263 0008 3960     		str	r1, [r7]
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4264              		.loc 1 3022 2
 4265 000a 7B68     		ldr	r3, [r7, #4]
 4266 000c 002B     		cmp	r3, #0
 4267 000e 09D1     		bne	.L280
 4268              	.LBB184:
 4269              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4270              		.loc 2 195 2 discriminator 1
 4271              		.syntax unified
 4272              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4273 0010 4FF05003 			mov r3, #80												
 4274 0014 83F31188 		msr basepri, r3											
 4275 0018 BFF36F8F 		isb														
 4276 001c BFF34F8F 		dsb														
 4277              	
 4278              	@ 0 "" 2
 4279              		.thumb
 4280              		.syntax unified
 4281 0020 FB60     		str	r3, [r7, #12]
 4282              	.L281:
 4283              	.LBE185:
 4284              	.LBE184:
 4285              		.loc 1 3022 2 discriminator 1
 4286 0022 FEE7     		b	.L281
 4287              	.L280:
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4288              		.loc 1 3031 43
 4289 0024 074B     		ldr	r3, .L282
 4290 0026 1B68     		ldr	r3, [r3]
 4291              		.loc 1 3031 2
 4292 0028 1833     		adds	r3, r3, #24
 4293 002a 1946     		mov	r1, r3
 4294 002c 7868     		ldr	r0, [r7, #4]
 4295 002e FFF7FEFF 		bl	vListInsert
ARM GAS  /tmp/cc5hVFFU.s 			page 133


3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4296              		.loc 1 3033 2
 4297 0032 0121     		movs	r1, #1
 4298 0034 3868     		ldr	r0, [r7]
 4299 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4300              		.loc 1 3034 1
 4301 003a 00BF     		nop
 4302 003c 1037     		adds	r7, r7, #16
 4303              	.LCFI146:
 4304              		.cfi_def_cfa_offset 8
 4305 003e BD46     		mov	sp, r7
 4306              	.LCFI147:
 4307              		.cfi_def_cfa_register 13
 4308              		@ sp needed
 4309 0040 80BD     		pop	{r7, pc}
 4310              	.L283:
 4311 0042 00BF     		.align	2
 4312              	.L282:
 4313 0044 00000000 		.word	pxCurrentTCB
 4314              		.cfi_endproc
 4315              	.LFE35:
 4317              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4318              		.align	1
 4319              		.global	vTaskPlaceOnUnorderedEventList
 4320              		.syntax unified
 4321              		.thumb
 4322              		.thumb_func
 4323              		.fpu fpv4-sp-d16
 4325              	vTaskPlaceOnUnorderedEventList:
 4326              	.LFB36:
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4327              		.loc 1 3038 1
 4328              		.cfi_startproc
 4329              		@ args = 0, pretend = 0, frame = 24
 4330              		@ frame_needed = 1, uses_anonymous_args = 0
 4331 0000 80B5     		push	{r7, lr}
 4332              	.LCFI148:
 4333              		.cfi_def_cfa_offset 8
 4334              		.cfi_offset 7, -8
 4335              		.cfi_offset 14, -4
 4336 0002 86B0     		sub	sp, sp, #24
 4337              	.LCFI149:
 4338              		.cfi_def_cfa_offset 32
 4339 0004 00AF     		add	r7, sp, #0
 4340              	.LCFI150:
 4341              		.cfi_def_cfa_register 7
 4342 0006 F860     		str	r0, [r7, #12]
 4343 0008 B960     		str	r1, [r7, #8]
 4344 000a 7A60     		str	r2, [r7, #4]
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4345              		.loc 1 3039 2
 4346 000c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cc5hVFFU.s 			page 134


 4347 000e 002B     		cmp	r3, #0
 4348 0010 09D1     		bne	.L285
 4349              	.LBB186:
 4350              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4351              		.loc 2 195 2 discriminator 1
 4352              		.syntax unified
 4353              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4354 0012 4FF05003 			mov r3, #80												
 4355 0016 83F31188 		msr basepri, r3											
 4356 001a BFF36F8F 		isb														
 4357 001e BFF34F8F 		dsb														
 4358              	
 4359              	@ 0 "" 2
 4360              		.thumb
 4361              		.syntax unified
 4362 0022 7B61     		str	r3, [r7, #20]
 4363              	.L286:
 4364              	.LBE187:
 4365              	.LBE186:
 4366              		.loc 1 3039 2 discriminator 1
 4367 0024 FEE7     		b	.L286
 4368              	.L285:
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4369              		.loc 1 3043 2
 4370 0026 114B     		ldr	r3, .L289
 4371 0028 1B68     		ldr	r3, [r3]
 4372 002a 002B     		cmp	r3, #0
 4373 002c 09D1     		bne	.L287
 4374              	.LBB188:
 4375              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4376              		.loc 2 195 2 discriminator 1
 4377              		.syntax unified
 4378              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4379 002e 4FF05003 			mov r3, #80												
 4380 0032 83F31188 		msr basepri, r3											
 4381 0036 BFF36F8F 		isb														
 4382 003a BFF34F8F 		dsb														
 4383              	
 4384              	@ 0 "" 2
 4385              		.thumb
 4386              		.syntax unified
 4387 003e 3B61     		str	r3, [r7, #16]
 4388              	.L288:
 4389              	.LBE189:
 4390              	.LBE188:
 4391              		.loc 1 3043 2 discriminator 2
 4392 0040 FEE7     		b	.L288
 4393              	.L287:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
ARM GAS  /tmp/cc5hVFFU.s 			page 135


3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4394              		.loc 1 3048 2
 4395 0042 0B4B     		ldr	r3, .L289+4
 4396 0044 1B68     		ldr	r3, [r3]
 4397 0046 BA68     		ldr	r2, [r7, #8]
 4398 0048 42F00042 		orr	r2, r2, #-2147483648
 4399 004c 9A61     		str	r2, [r3, #24]
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4400              		.loc 1 3055 46
 4401 004e 084B     		ldr	r3, .L289+4
 4402 0050 1B68     		ldr	r3, [r3]
 4403              		.loc 1 3055 2
 4404 0052 1833     		adds	r3, r3, #24
 4405 0054 1946     		mov	r1, r3
 4406 0056 F868     		ldr	r0, [r7, #12]
 4407 0058 FFF7FEFF 		bl	vListInsertEnd
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4408              		.loc 1 3057 2
 4409 005c 0121     		movs	r1, #1
 4410 005e 7868     		ldr	r0, [r7, #4]
 4411 0060 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4412              		.loc 1 3058 1
 4413 0064 00BF     		nop
 4414 0066 1837     		adds	r7, r7, #24
 4415              	.LCFI151:
 4416              		.cfi_def_cfa_offset 8
 4417 0068 BD46     		mov	sp, r7
 4418              	.LCFI152:
 4419              		.cfi_def_cfa_register 13
 4420              		@ sp needed
 4421 006a 80BD     		pop	{r7, pc}
 4422              	.L290:
 4423              		.align	2
 4424              	.L289:
 4425 006c 00000000 		.word	uxSchedulerSuspended
 4426 0070 00000000 		.word	pxCurrentTCB
 4427              		.cfi_endproc
 4428              	.LFE36:
 4430              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4431              		.align	1
 4432              		.global	vTaskPlaceOnEventListRestricted
 4433              		.syntax unified
 4434              		.thumb
 4435              		.thumb_func
 4436              		.fpu fpv4-sp-d16
 4438              	vTaskPlaceOnEventListRestricted:
 4439              	.LFB37:
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc5hVFFU.s 			page 136


3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4440              		.loc 1 3064 2
 4441              		.cfi_startproc
 4442              		@ args = 0, pretend = 0, frame = 24
 4443              		@ frame_needed = 1, uses_anonymous_args = 0
 4444 0000 80B5     		push	{r7, lr}
 4445              	.LCFI153:
 4446              		.cfi_def_cfa_offset 8
 4447              		.cfi_offset 7, -8
 4448              		.cfi_offset 14, -4
 4449 0002 86B0     		sub	sp, sp, #24
 4450              	.LCFI154:
 4451              		.cfi_def_cfa_offset 32
 4452 0004 00AF     		add	r7, sp, #0
 4453              	.LCFI155:
 4454              		.cfi_def_cfa_register 7
 4455 0006 F860     		str	r0, [r7, #12]
 4456 0008 B960     		str	r1, [r7, #8]
 4457 000a 7A60     		str	r2, [r7, #4]
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4458              		.loc 1 3065 3
 4459 000c FB68     		ldr	r3, [r7, #12]
 4460 000e 002B     		cmp	r3, #0
 4461 0010 09D1     		bne	.L292
 4462              	.LBB190:
 4463              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4464              		.loc 2 195 2 discriminator 1
 4465              		.syntax unified
 4466              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4467 0012 4FF05003 			mov r3, #80												
 4468 0016 83F31188 		msr basepri, r3											
 4469 001a BFF36F8F 		isb														
 4470 001e BFF34F8F 		dsb														
 4471              	
 4472              	@ 0 "" 2
 4473              		.thumb
 4474              		.syntax unified
 4475 0022 7B61     		str	r3, [r7, #20]
 4476              	.L293:
 4477              	.LBE191:
 4478              	.LBE190:
 4479              		.loc 1 3065 3 discriminator 1
 4480 0024 FEE7     		b	.L293
 4481              	.L292:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
ARM GAS  /tmp/cc5hVFFU.s 			page 137


3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4482              		.loc 1 3077 47
 4483 0026 0A4B     		ldr	r3, .L295
 4484 0028 1B68     		ldr	r3, [r3]
 4485              		.loc 1 3077 3
 4486 002a 1833     		adds	r3, r3, #24
 4487 002c 1946     		mov	r1, r3
 4488 002e F868     		ldr	r0, [r7, #12]
 4489 0030 FFF7FEFF 		bl	vListInsertEnd
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4490              		.loc 1 3082 5
 4491 0034 7B68     		ldr	r3, [r7, #4]
 4492 0036 002B     		cmp	r3, #0
 4493 0038 02D0     		beq	.L294
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4494              		.loc 1 3084 17
 4495 003a 4FF0FF33 		mov	r3, #-1
 4496 003e BB60     		str	r3, [r7, #8]
 4497              	.L294:
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4498              		.loc 1 3088 3
 4499 0040 7968     		ldr	r1, [r7, #4]
 4500 0042 B868     		ldr	r0, [r7, #8]
 4501 0044 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4502              		.loc 1 3089 2
 4503 0048 00BF     		nop
 4504 004a 1837     		adds	r7, r7, #24
 4505              	.LCFI156:
 4506              		.cfi_def_cfa_offset 8
 4507 004c BD46     		mov	sp, r7
 4508              	.LCFI157:
 4509              		.cfi_def_cfa_register 13
 4510              		@ sp needed
 4511 004e 80BD     		pop	{r7, pc}
 4512              	.L296:
 4513              		.align	2
 4514              	.L295:
 4515 0050 00000000 		.word	pxCurrentTCB
 4516              		.cfi_endproc
 4517              	.LFE37:
 4519              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4520              		.align	1
 4521              		.global	xTaskRemoveFromEventList
 4522              		.syntax unified
 4523              		.thumb
 4524              		.thumb_func
ARM GAS  /tmp/cc5hVFFU.s 			page 138


 4525              		.fpu fpv4-sp-d16
 4527              	xTaskRemoveFromEventList:
 4528              	.LFB38:
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4529              		.loc 1 3095 1
 4530              		.cfi_startproc
 4531              		@ args = 0, pretend = 0, frame = 24
 4532              		@ frame_needed = 1, uses_anonymous_args = 0
 4533 0000 80B5     		push	{r7, lr}
 4534              	.LCFI158:
 4535              		.cfi_def_cfa_offset 8
 4536              		.cfi_offset 7, -8
 4537              		.cfi_offset 14, -4
 4538 0002 86B0     		sub	sp, sp, #24
 4539              	.LCFI159:
 4540              		.cfi_def_cfa_offset 32
 4541 0004 00AF     		add	r7, sp, #0
 4542              	.LCFI160:
 4543              		.cfi_def_cfa_register 7
 4544 0006 7860     		str	r0, [r7, #4]
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 4545              		.loc 1 3112 19
 4546 0008 7B68     		ldr	r3, [r7, #4]
 4547 000a DB68     		ldr	r3, [r3, #12]
 4548              		.loc 1 3112 17
 4549 000c DB68     		ldr	r3, [r3, #12]
 4550 000e 3B61     		str	r3, [r7, #16]
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4551              		.loc 1 3113 2
 4552 0010 3B69     		ldr	r3, [r7, #16]
 4553 0012 002B     		cmp	r3, #0
 4554 0014 09D1     		bne	.L298
 4555              	.LBB192:
 4556              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4557              		.loc 2 195 2 discriminator 1
ARM GAS  /tmp/cc5hVFFU.s 			page 139


 4558              		.syntax unified
 4559              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4560 0016 4FF05003 			mov r3, #80												
 4561 001a 83F31188 		msr basepri, r3											
 4562 001e BFF36F8F 		isb														
 4563 0022 BFF34F8F 		dsb														
 4564              	
 4565              	@ 0 "" 2
 4566              		.thumb
 4567              		.syntax unified
 4568 0026 FB60     		str	r3, [r7, #12]
 4569              	.L299:
 4570              	.LBE193:
 4571              	.LBE192:
 4572              		.loc 1 3113 2 discriminator 1
 4573 0028 FEE7     		b	.L299
 4574              	.L298:
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4575              		.loc 1 3114 11
 4576 002a 3B69     		ldr	r3, [r7, #16]
 4577 002c 1833     		adds	r3, r3, #24
 4578 002e 1846     		mov	r0, r3
 4579 0030 FFF7FEFF 		bl	uxListRemove
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4580              		.loc 1 3116 27
 4581 0034 1D4B     		ldr	r3, .L306
 4582 0036 1B68     		ldr	r3, [r3]
 4583              		.loc 1 3116 4
 4584 0038 002B     		cmp	r3, #0
 4585 003a 1DD1     		bne	.L300
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4586              		.loc 1 3118 12
 4587 003c 3B69     		ldr	r3, [r7, #16]
 4588 003e 0433     		adds	r3, r3, #4
 4589 0040 1846     		mov	r0, r3
 4590 0042 FFF7FEFF 		bl	uxListRemove
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4591              		.loc 1 3119 3
 4592 0046 3B69     		ldr	r3, [r7, #16]
 4593 0048 DA6A     		ldr	r2, [r3, #44]
 4594 004a 194B     		ldr	r3, .L306+4
 4595 004c 1B68     		ldr	r3, [r3]
 4596 004e 9A42     		cmp	r2, r3
 4597 0050 03D9     		bls	.L301
 4598              		.loc 1 3119 3 is_stmt 0 discriminator 1
 4599 0052 3B69     		ldr	r3, [r7, #16]
 4600 0054 DB6A     		ldr	r3, [r3, #44]
 4601 0056 164A     		ldr	r2, .L306+4
 4602 0058 1360     		str	r3, [r2]
 4603              	.L301:
 4604              		.loc 1 3119 3 discriminator 3
 4605 005a 3B69     		ldr	r3, [r7, #16]
 4606 005c DA6A     		ldr	r2, [r3, #44]
 4607 005e 1346     		mov	r3, r2
 4608 0060 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/cc5hVFFU.s 			page 140


 4609 0062 1344     		add	r3, r3, r2
 4610 0064 9B00     		lsls	r3, r3, #2
 4611 0066 134A     		ldr	r2, .L306+8
 4612 0068 1A44     		add	r2, r2, r3
 4613 006a 3B69     		ldr	r3, [r7, #16]
 4614 006c 0433     		adds	r3, r3, #4
 4615 006e 1946     		mov	r1, r3
 4616 0070 1046     		mov	r0, r2
 4617 0072 FFF7FEFF 		bl	vListInsertEnd
 4618 0076 05E0     		b	.L302
 4619              	.L300:
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4620              		.loc 1 3139 3 is_stmt 1
 4621 0078 3B69     		ldr	r3, [r7, #16]
 4622 007a 1833     		adds	r3, r3, #24
 4623 007c 1946     		mov	r1, r3
 4624 007e 0E48     		ldr	r0, .L306+12
 4625 0080 FFF7FEFF 		bl	vListInsertEnd
 4626              	.L302:
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4627              		.loc 1 3142 20
 4628 0084 3B69     		ldr	r3, [r7, #16]
 4629 0086 DA6A     		ldr	r2, [r3, #44]
 4630              		.loc 1 3142 47
 4631 0088 0C4B     		ldr	r3, .L306+16
 4632 008a 1B68     		ldr	r3, [r3]
 4633 008c DB6A     		ldr	r3, [r3, #44]
 4634              		.loc 1 3142 4
 4635 008e 9A42     		cmp	r2, r3
 4636 0090 05D9     		bls	.L303
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 4637              		.loc 1 3147 11
ARM GAS  /tmp/cc5hVFFU.s 			page 141


 4638 0092 0123     		movs	r3, #1
 4639 0094 7B61     		str	r3, [r7, #20]
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4640              		.loc 1 3151 17
 4641 0096 0A4B     		ldr	r3, .L306+20
 4642 0098 0122     		movs	r2, #1
 4643 009a 1A60     		str	r2, [r3]
 4644 009c 01E0     		b	.L304
 4645              	.L303:
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 4646              		.loc 1 3155 11
 4647 009e 0023     		movs	r3, #0
 4648 00a0 7B61     		str	r3, [r7, #20]
 4649              	.L304:
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4650              		.loc 1 3158 9
 4651 00a2 7B69     		ldr	r3, [r7, #20]
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4652              		.loc 1 3159 1
 4653 00a4 1846     		mov	r0, r3
 4654 00a6 1837     		adds	r7, r7, #24
 4655              	.LCFI161:
 4656              		.cfi_def_cfa_offset 8
 4657 00a8 BD46     		mov	sp, r7
 4658              	.LCFI162:
 4659              		.cfi_def_cfa_register 13
 4660              		@ sp needed
 4661 00aa 80BD     		pop	{r7, pc}
 4662              	.L307:
 4663              		.align	2
 4664              	.L306:
 4665 00ac 00000000 		.word	uxSchedulerSuspended
 4666 00b0 00000000 		.word	uxTopReadyPriority
 4667 00b4 00000000 		.word	pxReadyTasksLists
 4668 00b8 00000000 		.word	xPendingReadyList
 4669 00bc 00000000 		.word	pxCurrentTCB
 4670 00c0 00000000 		.word	xYieldPending
 4671              		.cfi_endproc
 4672              	.LFE38:
 4674              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4675              		.align	1
 4676              		.global	vTaskRemoveFromUnorderedEventList
 4677              		.syntax unified
 4678              		.thumb
 4679              		.thumb_func
 4680              		.fpu fpv4-sp-d16
 4682              	vTaskRemoveFromUnorderedEventList:
 4683              	.LFB39:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc5hVFFU.s 			page 142


3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4684              		.loc 1 3163 1
 4685              		.cfi_startproc
 4686              		@ args = 0, pretend = 0, frame = 24
 4687              		@ frame_needed = 1, uses_anonymous_args = 0
 4688 0000 80B5     		push	{r7, lr}
 4689              	.LCFI163:
 4690              		.cfi_def_cfa_offset 8
 4691              		.cfi_offset 7, -8
 4692              		.cfi_offset 14, -4
 4693 0002 86B0     		sub	sp, sp, #24
 4694              	.LCFI164:
 4695              		.cfi_def_cfa_offset 32
 4696 0004 00AF     		add	r7, sp, #0
 4697              	.LCFI165:
 4698              		.cfi_def_cfa_register 7
 4699 0006 7860     		str	r0, [r7, #4]
 4700 0008 3960     		str	r1, [r7]
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4701              		.loc 1 3168 2
 4702 000a 284B     		ldr	r3, .L316
 4703 000c 1B68     		ldr	r3, [r3]
 4704 000e 002B     		cmp	r3, #0
 4705 0010 09D1     		bne	.L309
 4706              	.LBB194:
 4707              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4708              		.loc 2 195 2 discriminator 1
 4709              		.syntax unified
 4710              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4711 0012 4FF05003 			mov r3, #80												
 4712 0016 83F31188 		msr basepri, r3											
 4713 001a BFF36F8F 		isb														
 4714 001e BFF34F8F 		dsb														
 4715              	
 4716              	@ 0 "" 2
 4717              		.thumb
 4718              		.syntax unified
 4719 0022 3B61     		str	r3, [r7, #16]
 4720              	.L310:
 4721              	.LBE195:
 4722              	.LBE194:
 4723              		.loc 1 3168 2 discriminator 1
 4724 0024 FEE7     		b	.L310
 4725              	.L309:
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4726              		.loc 1 3171 2
 4727 0026 3B68     		ldr	r3, [r7]
 4728 0028 43F00042 		orr	r2, r3, #-2147483648
ARM GAS  /tmp/cc5hVFFU.s 			page 143


 4729 002c 7B68     		ldr	r3, [r7, #4]
 4730 002e 1A60     		str	r2, [r3]
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 4731              		.loc 1 3175 17
 4732 0030 7B68     		ldr	r3, [r7, #4]
 4733 0032 DB68     		ldr	r3, [r3, #12]
 4734 0034 7B61     		str	r3, [r7, #20]
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4735              		.loc 1 3176 2
 4736 0036 7B69     		ldr	r3, [r7, #20]
 4737 0038 002B     		cmp	r3, #0
 4738 003a 09D1     		bne	.L311
 4739              	.LBB196:
 4740              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4741              		.loc 2 195 2 discriminator 1
 4742              		.syntax unified
 4743              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4744 003c 4FF05003 			mov r3, #80												
 4745 0040 83F31188 		msr basepri, r3											
 4746 0044 BFF36F8F 		isb														
 4747 0048 BFF34F8F 		dsb														
 4748              	
 4749              	@ 0 "" 2
 4750              		.thumb
 4751              		.syntax unified
 4752 004c FB60     		str	r3, [r7, #12]
 4753              	.L312:
 4754              	.LBE197:
 4755              	.LBE196:
 4756              		.loc 1 3176 2 discriminator 2
 4757 004e FEE7     		b	.L312
 4758              	.L311:
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4759              		.loc 1 3177 11
 4760 0050 7868     		ldr	r0, [r7, #4]
 4761 0052 FFF7FEFF 		bl	uxListRemove
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4762              		.loc 1 3182 11
 4763 0056 7B69     		ldr	r3, [r7, #20]
 4764 0058 0433     		adds	r3, r3, #4
 4765 005a 1846     		mov	r0, r3
 4766 005c FFF7FEFF 		bl	uxListRemove
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4767              		.loc 1 3183 2
 4768 0060 7B69     		ldr	r3, [r7, #20]
 4769 0062 DA6A     		ldr	r2, [r3, #44]
 4770 0064 124B     		ldr	r3, .L316+4
 4771 0066 1B68     		ldr	r3, [r3]
 4772 0068 9A42     		cmp	r2, r3
ARM GAS  /tmp/cc5hVFFU.s 			page 144


 4773 006a 03D9     		bls	.L313
 4774              		.loc 1 3183 2 is_stmt 0 discriminator 1
 4775 006c 7B69     		ldr	r3, [r7, #20]
 4776 006e DB6A     		ldr	r3, [r3, #44]
 4777 0070 0F4A     		ldr	r2, .L316+4
 4778 0072 1360     		str	r3, [r2]
 4779              	.L313:
 4780              		.loc 1 3183 2 discriminator 3
 4781 0074 7B69     		ldr	r3, [r7, #20]
 4782 0076 DA6A     		ldr	r2, [r3, #44]
 4783 0078 1346     		mov	r3, r2
 4784 007a 9B00     		lsls	r3, r3, #2
 4785 007c 1344     		add	r3, r3, r2
 4786 007e 9B00     		lsls	r3, r3, #2
 4787 0080 0C4A     		ldr	r2, .L316+8
 4788 0082 1A44     		add	r2, r2, r3
 4789 0084 7B69     		ldr	r3, [r7, #20]
 4790 0086 0433     		adds	r3, r3, #4
 4791 0088 1946     		mov	r1, r3
 4792 008a 1046     		mov	r0, r2
 4793 008c FFF7FEFF 		bl	vListInsertEnd
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4794              		.loc 1 3185 20 is_stmt 1 discriminator 3
 4795 0090 7B69     		ldr	r3, [r7, #20]
 4796 0092 DA6A     		ldr	r2, [r3, #44]
 4797              		.loc 1 3185 47 discriminator 3
 4798 0094 084B     		ldr	r3, .L316+12
 4799 0096 1B68     		ldr	r3, [r3]
 4800 0098 DB6A     		ldr	r3, [r3, #44]
 4801              		.loc 1 3185 4 discriminator 3
 4802 009a 9A42     		cmp	r2, r3
 4803 009c 02D9     		bls	.L315
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4804              		.loc 1 3191 17
 4805 009e 074B     		ldr	r3, .L316+16
 4806 00a0 0122     		movs	r2, #1
 4807 00a2 1A60     		str	r2, [r3]
 4808              	.L315:
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4809              		.loc 1 3193 1
 4810 00a4 00BF     		nop
 4811 00a6 1837     		adds	r7, r7, #24
 4812              	.LCFI166:
 4813              		.cfi_def_cfa_offset 8
 4814 00a8 BD46     		mov	sp, r7
 4815              	.LCFI167:
 4816              		.cfi_def_cfa_register 13
 4817              		@ sp needed
 4818 00aa 80BD     		pop	{r7, pc}
 4819              	.L317:
ARM GAS  /tmp/cc5hVFFU.s 			page 145


 4820              		.align	2
 4821              	.L316:
 4822 00ac 00000000 		.word	uxSchedulerSuspended
 4823 00b0 00000000 		.word	uxTopReadyPriority
 4824 00b4 00000000 		.word	pxReadyTasksLists
 4825 00b8 00000000 		.word	pxCurrentTCB
 4826 00bc 00000000 		.word	xYieldPending
 4827              		.cfi_endproc
 4828              	.LFE39:
 4830              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4831              		.align	1
 4832              		.global	vTaskSetTimeOutState
 4833              		.syntax unified
 4834              		.thumb
 4835              		.thumb_func
 4836              		.fpu fpv4-sp-d16
 4838              	vTaskSetTimeOutState:
 4839              	.LFB40:
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4840              		.loc 1 3197 1
 4841              		.cfi_startproc
 4842              		@ args = 0, pretend = 0, frame = 16
 4843              		@ frame_needed = 1, uses_anonymous_args = 0
 4844 0000 80B5     		push	{r7, lr}
 4845              	.LCFI168:
 4846              		.cfi_def_cfa_offset 8
 4847              		.cfi_offset 7, -8
 4848              		.cfi_offset 14, -4
 4849 0002 84B0     		sub	sp, sp, #16
 4850              	.LCFI169:
 4851              		.cfi_def_cfa_offset 24
 4852 0004 00AF     		add	r7, sp, #0
 4853              	.LCFI170:
 4854              		.cfi_def_cfa_register 7
 4855 0006 7860     		str	r0, [r7, #4]
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4856              		.loc 1 3198 2
 4857 0008 7B68     		ldr	r3, [r7, #4]
 4858 000a 002B     		cmp	r3, #0
 4859 000c 09D1     		bne	.L319
 4860              	.LBB198:
 4861              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4862              		.loc 2 195 2 discriminator 1
 4863              		.syntax unified
 4864              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4865 000e 4FF05003 			mov r3, #80												
 4866 0012 83F31188 		msr basepri, r3											
 4867 0016 BFF36F8F 		isb														
 4868 001a BFF34F8F 		dsb														
 4869              	
 4870              	@ 0 "" 2
 4871              		.thumb
 4872              		.syntax unified
ARM GAS  /tmp/cc5hVFFU.s 			page 146


 4873 001e FB60     		str	r3, [r7, #12]
 4874              	.L320:
 4875              	.LBE199:
 4876              	.LBE198:
 4877              		.loc 1 3198 2 discriminator 1
 4878 0020 FEE7     		b	.L320
 4879              	.L319:
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4880              		.loc 1 3199 2
 4881 0022 FFF7FEFF 		bl	vPortEnterCritical
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4882              		.loc 1 3201 29
 4883 0026 074B     		ldr	r3, .L321
 4884 0028 1A68     		ldr	r2, [r3]
 4885 002a 7B68     		ldr	r3, [r7, #4]
 4886 002c 1A60     		str	r2, [r3]
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4887              		.loc 1 3202 30
 4888 002e 064B     		ldr	r3, .L321+4
 4889 0030 1A68     		ldr	r2, [r3]
 4890 0032 7B68     		ldr	r3, [r7, #4]
 4891 0034 5A60     		str	r2, [r3, #4]
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4892              		.loc 1 3204 2
 4893 0036 FFF7FEFF 		bl	vPortExitCritical
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4894              		.loc 1 3205 1
 4895 003a 00BF     		nop
 4896 003c 1037     		adds	r7, r7, #16
 4897              	.LCFI171:
 4898              		.cfi_def_cfa_offset 8
 4899 003e BD46     		mov	sp, r7
 4900              	.LCFI172:
 4901              		.cfi_def_cfa_register 13
 4902              		@ sp needed
 4903 0040 80BD     		pop	{r7, pc}
 4904              	.L322:
 4905 0042 00BF     		.align	2
 4906              	.L321:
 4907 0044 00000000 		.word	xNumOfOverflows
 4908 0048 00000000 		.word	xTickCount
 4909              		.cfi_endproc
 4910              	.LFE40:
 4912              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4913              		.align	1
 4914              		.global	vTaskInternalSetTimeOutState
 4915              		.syntax unified
 4916              		.thumb
 4917              		.thumb_func
 4918              		.fpu fpv4-sp-d16
 4920              	vTaskInternalSetTimeOutState:
 4921              	.LFB41:
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
ARM GAS  /tmp/cc5hVFFU.s 			page 147


3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4922              		.loc 1 3209 1
 4923              		.cfi_startproc
 4924              		@ args = 0, pretend = 0, frame = 8
 4925              		@ frame_needed = 1, uses_anonymous_args = 0
 4926              		@ link register save eliminated.
 4927 0000 80B4     		push	{r7}
 4928              	.LCFI173:
 4929              		.cfi_def_cfa_offset 4
 4930              		.cfi_offset 7, -4
 4931 0002 83B0     		sub	sp, sp, #12
 4932              	.LCFI174:
 4933              		.cfi_def_cfa_offset 16
 4934 0004 00AF     		add	r7, sp, #0
 4935              	.LCFI175:
 4936              		.cfi_def_cfa_register 7
 4937 0006 7860     		str	r0, [r7, #4]
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4938              		.loc 1 3211 28
 4939 0008 064B     		ldr	r3, .L324
 4940 000a 1A68     		ldr	r2, [r3]
 4941 000c 7B68     		ldr	r3, [r7, #4]
 4942 000e 1A60     		str	r2, [r3]
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4943              		.loc 1 3212 29
 4944 0010 054B     		ldr	r3, .L324+4
 4945 0012 1A68     		ldr	r2, [r3]
 4946 0014 7B68     		ldr	r3, [r7, #4]
 4947 0016 5A60     		str	r2, [r3, #4]
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4948              		.loc 1 3213 1
 4949 0018 00BF     		nop
 4950 001a 0C37     		adds	r7, r7, #12
 4951              	.LCFI176:
 4952              		.cfi_def_cfa_offset 4
 4953 001c BD46     		mov	sp, r7
 4954              	.LCFI177:
 4955              		.cfi_def_cfa_register 13
 4956              		@ sp needed
 4957 001e 5DF8047B 		ldr	r7, [sp], #4
 4958              	.LCFI178:
 4959              		.cfi_restore 7
 4960              		.cfi_def_cfa_offset 0
 4961 0022 7047     		bx	lr
 4962              	.L325:
 4963              		.align	2
 4964              	.L324:
 4965 0024 00000000 		.word	xNumOfOverflows
 4966 0028 00000000 		.word	xTickCount
 4967              		.cfi_endproc
 4968              	.LFE41:
 4970              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4971              		.align	1
 4972              		.global	xTaskCheckForTimeOut
 4973              		.syntax unified
 4974              		.thumb
ARM GAS  /tmp/cc5hVFFU.s 			page 148


 4975              		.thumb_func
 4976              		.fpu fpv4-sp-d16
 4978              	xTaskCheckForTimeOut:
 4979              	.LFB42:
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4980              		.loc 1 3217 1
 4981              		.cfi_startproc
 4982              		@ args = 0, pretend = 0, frame = 32
 4983              		@ frame_needed = 1, uses_anonymous_args = 0
 4984 0000 80B5     		push	{r7, lr}
 4985              	.LCFI179:
 4986              		.cfi_def_cfa_offset 8
 4987              		.cfi_offset 7, -8
 4988              		.cfi_offset 14, -4
 4989 0002 88B0     		sub	sp, sp, #32
 4990              	.LCFI180:
 4991              		.cfi_def_cfa_offset 40
 4992 0004 00AF     		add	r7, sp, #0
 4993              	.LCFI181:
 4994              		.cfi_def_cfa_register 7
 4995 0006 7860     		str	r0, [r7, #4]
 4996 0008 3960     		str	r1, [r7]
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4997              		.loc 1 3220 2
 4998 000a 7B68     		ldr	r3, [r7, #4]
 4999 000c 002B     		cmp	r3, #0
 5000 000e 09D1     		bne	.L327
 5001              	.LBB200:
 5002              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5003              		.loc 2 195 2 discriminator 1
 5004              		.syntax unified
 5005              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5006 0010 4FF05003 			mov r3, #80												
 5007 0014 83F31188 		msr basepri, r3											
 5008 0018 BFF36F8F 		isb														
 5009 001c BFF34F8F 		dsb														
 5010              	
 5011              	@ 0 "" 2
 5012              		.thumb
 5013              		.syntax unified
 5014 0020 3B61     		str	r3, [r7, #16]
 5015              	.L328:
 5016              	.LBE201:
 5017              	.LBE200:
 5018              		.loc 1 3220 2 discriminator 1
 5019 0022 FEE7     		b	.L328
 5020              	.L327:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5021              		.loc 1 3221 2
 5022 0024 3B68     		ldr	r3, [r7]
 5023 0026 002B     		cmp	r3, #0
ARM GAS  /tmp/cc5hVFFU.s 			page 149


 5024 0028 09D1     		bne	.L329
 5025              	.LBB202:
 5026              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5027              		.loc 2 195 2 discriminator 1
 5028              		.syntax unified
 5029              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5030 002a 4FF05003 			mov r3, #80												
 5031 002e 83F31188 		msr basepri, r3											
 5032 0032 BFF36F8F 		isb														
 5033 0036 BFF34F8F 		dsb														
 5034              	
 5035              	@ 0 "" 2
 5036              		.thumb
 5037              		.syntax unified
 5038 003a FB60     		str	r3, [r7, #12]
 5039              	.L330:
 5040              	.LBE203:
 5041              	.LBE202:
 5042              		.loc 1 3221 2 discriminator 2
 5043 003c FEE7     		b	.L330
 5044              	.L329:
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5045              		.loc 1 3223 2
 5046 003e FFF7FEFF 		bl	vPortEnterCritical
 5047              	.LBB204:
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 5048              		.loc 1 3226 20
 5049 0042 1D4B     		ldr	r3, .L336
 5050 0044 1B68     		ldr	r3, [r3]
 5051 0046 BB61     		str	r3, [r7, #24]
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5052              		.loc 1 3227 62
 5053 0048 7B68     		ldr	r3, [r7, #4]
 5054 004a 5B68     		ldr	r3, [r3, #4]
 5055              		.loc 1 3227 20
 5056 004c BA69     		ldr	r2, [r7, #24]
 5057 004e D31A     		subs	r3, r2, r3
 5058 0050 7B61     		str	r3, [r7, #20]
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 5059              		.loc 1 3241 8
ARM GAS  /tmp/cc5hVFFU.s 			page 150


 5060 0052 3B68     		ldr	r3, [r7]
 5061 0054 1B68     		ldr	r3, [r3]
 5062              		.loc 1 3241 6
 5063 0056 B3F1FF3F 		cmp	r3, #-1
 5064 005a 02D1     		bne	.L331
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 5065              		.loc 1 3246 13
 5066 005c 0023     		movs	r3, #0
 5067 005e FB61     		str	r3, [r7, #28]
 5068 0060 23E0     		b	.L332
 5069              	.L331:
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 5070              		.loc 1 3251 37
 5071 0062 7B68     		ldr	r3, [r7, #4]
 5072 0064 1A68     		ldr	r2, [r3]
 5073              		.loc 1 3251 25
 5074 0066 154B     		ldr	r3, .L336+4
 5075 0068 1B68     		ldr	r3, [r3]
 5076              		.loc 1 3251 5
 5077 006a 9A42     		cmp	r2, r3
 5078 006c 07D0     		beq	.L333
 5079              		.loc 1 3251 89 discriminator 1
 5080 006e 7B68     		ldr	r3, [r7, #4]
 5081 0070 5B68     		ldr	r3, [r3, #4]
 5082              		.loc 1 3251 56 discriminator 1
 5083 0072 BA69     		ldr	r2, [r7, #24]
 5084 0074 9A42     		cmp	r2, r3
 5085 0076 02D3     		bcc	.L333
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 5086              		.loc 1 3258 12
 5087 0078 0123     		movs	r3, #1
 5088 007a FB61     		str	r3, [r7, #28]
 5089 007c 15E0     		b	.L332
 5090              	.L333:
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 5091              		.loc 1 3260 27
 5092 007e 3B68     		ldr	r3, [r7]
 5093 0080 1B68     		ldr	r3, [r3]
 5094              		.loc 1 3260 10
 5095 0082 7A69     		ldr	r2, [r7, #20]
 5096 0084 9A42     		cmp	r2, r3
 5097 0086 0BD2     		bcs	.L334
ARM GAS  /tmp/cc5hVFFU.s 			page 151


3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 5098              		.loc 1 3263 19
 5099 0088 3B68     		ldr	r3, [r7]
 5100 008a 1A68     		ldr	r2, [r3]
 5101 008c 7B69     		ldr	r3, [r7, #20]
 5102 008e D21A     		subs	r2, r2, r3
 5103 0090 3B68     		ldr	r3, [r7]
 5104 0092 1A60     		str	r2, [r3]
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 5105              		.loc 1 3264 4
 5106 0094 7868     		ldr	r0, [r7, #4]
 5107 0096 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 5108              		.loc 1 3265 12
 5109 009a 0023     		movs	r3, #0
 5110 009c FB61     		str	r3, [r7, #28]
 5111 009e 04E0     		b	.L332
 5112              	.L334:
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 5113              		.loc 1 3269 19
 5114 00a0 3B68     		ldr	r3, [r7]
 5115 00a2 0022     		movs	r2, #0
 5116 00a4 1A60     		str	r2, [r3]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 5117              		.loc 1 3270 12
 5118 00a6 0123     		movs	r3, #1
 5119 00a8 FB61     		str	r3, [r7, #28]
 5120              	.L332:
 5121              	.LBE204:
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 5122              		.loc 1 3273 2
 5123 00aa FFF7FEFF 		bl	vPortExitCritical
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 5124              		.loc 1 3275 9
 5125 00ae FB69     		ldr	r3, [r7, #28]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5126              		.loc 1 3276 1
 5127 00b0 1846     		mov	r0, r3
 5128 00b2 2037     		adds	r7, r7, #32
 5129              	.LCFI182:
 5130              		.cfi_def_cfa_offset 8
 5131 00b4 BD46     		mov	sp, r7
 5132              	.LCFI183:
 5133              		.cfi_def_cfa_register 13
 5134              		@ sp needed
 5135 00b6 80BD     		pop	{r7, pc}
 5136              	.L337:
 5137              		.align	2
 5138              	.L336:
ARM GAS  /tmp/cc5hVFFU.s 			page 152


 5139 00b8 00000000 		.word	xTickCount
 5140 00bc 00000000 		.word	xNumOfOverflows
 5141              		.cfi_endproc
 5142              	.LFE42:
 5144              		.section	.text.vTaskMissedYield,"ax",%progbits
 5145              		.align	1
 5146              		.global	vTaskMissedYield
 5147              		.syntax unified
 5148              		.thumb
 5149              		.thumb_func
 5150              		.fpu fpv4-sp-d16
 5152              	vTaskMissedYield:
 5153              	.LFB43:
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5154              		.loc 1 3280 1
 5155              		.cfi_startproc
 5156              		@ args = 0, pretend = 0, frame = 0
 5157              		@ frame_needed = 1, uses_anonymous_args = 0
 5158              		@ link register save eliminated.
 5159 0000 80B4     		push	{r7}
 5160              	.LCFI184:
 5161              		.cfi_def_cfa_offset 4
 5162              		.cfi_offset 7, -4
 5163 0002 00AF     		add	r7, sp, #0
 5164              	.LCFI185:
 5165              		.cfi_def_cfa_register 7
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 5166              		.loc 1 3281 16
 5167 0004 034B     		ldr	r3, .L339
 5168 0006 0122     		movs	r2, #1
 5169 0008 1A60     		str	r2, [r3]
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5170              		.loc 1 3282 1
 5171 000a 00BF     		nop
 5172 000c BD46     		mov	sp, r7
 5173              	.LCFI186:
 5174              		.cfi_def_cfa_register 13
 5175              		@ sp needed
 5176 000e 5DF8047B 		ldr	r7, [sp], #4
 5177              	.LCFI187:
 5178              		.cfi_restore 7
 5179              		.cfi_def_cfa_offset 0
 5180 0012 7047     		bx	lr
 5181              	.L340:
 5182              		.align	2
 5183              	.L339:
 5184 0014 00000000 		.word	xYieldPending
 5185              		.cfi_endproc
 5186              	.LFE43:
 5188              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 5189              		.align	1
 5190              		.global	uxTaskGetTaskNumber
 5191              		.syntax unified
 5192              		.thumb
ARM GAS  /tmp/cc5hVFFU.s 			page 153


 5193              		.thumb_func
 5194              		.fpu fpv4-sp-d16
 5196              	uxTaskGetTaskNumber:
 5197              	.LFB44:
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5198              		.loc 1 3288 2
 5199              		.cfi_startproc
 5200              		@ args = 0, pretend = 0, frame = 16
 5201              		@ frame_needed = 1, uses_anonymous_args = 0
 5202              		@ link register save eliminated.
 5203 0000 80B4     		push	{r7}
 5204              	.LCFI188:
 5205              		.cfi_def_cfa_offset 4
 5206              		.cfi_offset 7, -4
 5207 0002 85B0     		sub	sp, sp, #20
 5208              	.LCFI189:
 5209              		.cfi_def_cfa_offset 24
 5210 0004 00AF     		add	r7, sp, #0
 5211              	.LCFI190:
 5212              		.cfi_def_cfa_register 7
 5213 0006 7860     		str	r0, [r7, #4]
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5214              		.loc 1 3292 5
 5215 0008 7B68     		ldr	r3, [r7, #4]
 5216 000a 002B     		cmp	r3, #0
 5217 000c 05D0     		beq	.L342
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5218              		.loc 1 3294 10
 5219 000e 7B68     		ldr	r3, [r7, #4]
 5220 0010 BB60     		str	r3, [r7, #8]
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 5221              		.loc 1 3295 13
 5222 0012 BB68     		ldr	r3, [r7, #8]
 5223 0014 9B6C     		ldr	r3, [r3, #72]
 5224 0016 FB60     		str	r3, [r7, #12]
 5225 0018 01E0     		b	.L343
 5226              	.L342:
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
 5227              		.loc 1 3299 13
 5228 001a 0023     		movs	r3, #0
 5229 001c FB60     		str	r3, [r7, #12]
 5230              	.L343:
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
ARM GAS  /tmp/cc5hVFFU.s 			page 154


 5231              		.loc 1 3302 10
 5232 001e FB68     		ldr	r3, [r7, #12]
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5233              		.loc 1 3303 2
 5234 0020 1846     		mov	r0, r3
 5235 0022 1437     		adds	r7, r7, #20
 5236              	.LCFI191:
 5237              		.cfi_def_cfa_offset 4
 5238 0024 BD46     		mov	sp, r7
 5239              	.LCFI192:
 5240              		.cfi_def_cfa_register 13
 5241              		@ sp needed
 5242 0026 5DF8047B 		ldr	r7, [sp], #4
 5243              	.LCFI193:
 5244              		.cfi_restore 7
 5245              		.cfi_def_cfa_offset 0
 5246 002a 7047     		bx	lr
 5247              		.cfi_endproc
 5248              	.LFE44:
 5250              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5251              		.align	1
 5252              		.global	vTaskSetTaskNumber
 5253              		.syntax unified
 5254              		.thumb
 5255              		.thumb_func
 5256              		.fpu fpv4-sp-d16
 5258              	vTaskSetTaskNumber:
 5259              	.LFB45:
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5260              		.loc 1 3311 2
 5261              		.cfi_startproc
 5262              		@ args = 0, pretend = 0, frame = 16
 5263              		@ frame_needed = 1, uses_anonymous_args = 0
 5264              		@ link register save eliminated.
 5265 0000 80B4     		push	{r7}
 5266              	.LCFI194:
 5267              		.cfi_def_cfa_offset 4
 5268              		.cfi_offset 7, -4
 5269 0002 85B0     		sub	sp, sp, #20
 5270              	.LCFI195:
 5271              		.cfi_def_cfa_offset 24
 5272 0004 00AF     		add	r7, sp, #0
 5273              	.LCFI196:
 5274              		.cfi_def_cfa_register 7
 5275 0006 7860     		str	r0, [r7, #4]
 5276 0008 3960     		str	r1, [r7]
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5277              		.loc 1 3314 5
ARM GAS  /tmp/cc5hVFFU.s 			page 155


 5278 000a 7B68     		ldr	r3, [r7, #4]
 5279 000c 002B     		cmp	r3, #0
 5280 000e 04D0     		beq	.L347
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5281              		.loc 1 3316 10
 5282 0010 7B68     		ldr	r3, [r7, #4]
 5283 0012 FB60     		str	r3, [r7, #12]
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5284              		.loc 1 3317 24
 5285 0014 FB68     		ldr	r3, [r7, #12]
 5286 0016 3A68     		ldr	r2, [r7]
 5287 0018 9A64     		str	r2, [r3, #72]
 5288              	.L347:
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5289              		.loc 1 3319 2
 5290 001a 00BF     		nop
 5291 001c 1437     		adds	r7, r7, #20
 5292              	.LCFI197:
 5293              		.cfi_def_cfa_offset 4
 5294 001e BD46     		mov	sp, r7
 5295              	.LCFI198:
 5296              		.cfi_def_cfa_register 13
 5297              		@ sp needed
 5298 0020 5DF8047B 		ldr	r7, [sp], #4
 5299              	.LCFI199:
 5300              		.cfi_restore 7
 5301              		.cfi_def_cfa_offset 0
 5302 0024 7047     		bx	lr
 5303              		.cfi_endproc
 5304              	.LFE45:
 5306              		.section	.text.prvIdleTask,"ax",%progbits
 5307              		.align	1
 5308              		.syntax unified
 5309              		.thumb
 5310              		.thumb_func
 5311              		.fpu fpv4-sp-d16
 5313              	prvIdleTask:
 5314              	.LFB46:
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5315              		.loc 1 3335 1
ARM GAS  /tmp/cc5hVFFU.s 			page 156


 5316              		.cfi_startproc
 5317              		@ args = 0, pretend = 0, frame = 8
 5318              		@ frame_needed = 1, uses_anonymous_args = 0
 5319 0000 80B5     		push	{r7, lr}
 5320              	.LCFI200:
 5321              		.cfi_def_cfa_offset 8
 5322              		.cfi_offset 7, -8
 5323              		.cfi_offset 14, -4
 5324 0002 82B0     		sub	sp, sp, #8
 5325              	.LCFI201:
 5326              		.cfi_def_cfa_offset 16
 5327 0004 00AF     		add	r7, sp, #0
 5328              	.LCFI202:
 5329              		.cfi_def_cfa_register 7
 5330 0006 7860     		str	r0, [r7, #4]
 5331              	.L350:
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 5332              		.loc 1 3351 3
 5333 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
ARM GAS  /tmp/cc5hVFFU.s 			page 157


 5334              		.loc 1 3374 8
 5335 000c 064B     		ldr	r3, .L351
 5336 000e 1B68     		ldr	r3, [r3]
 5337              		.loc 1 3374 6
 5338 0010 012B     		cmp	r3, #1
 5339 0012 F9D9     		bls	.L350
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 5340              		.loc 1 3376 5
 5341 0014 054B     		ldr	r3, .L351+4
 5342 0016 4FF08052 		mov	r2, #268435456
 5343 001a 1A60     		str	r2, [r3]
 5344              		.syntax unified
 5345              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5346 001c BFF34F8F 		dsb
 5347              	@ 0 "" 2
 5348              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5349 0020 BFF36F8F 		isb
 5350              	@ 0 "" 2
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5351              		.loc 1 3351 3
 5352              		.thumb
 5353              		.syntax unified
 5354 0024 F0E7     		b	.L350
 5355              	.L352:
 5356 0026 00BF     		.align	2
 5357              	.L351:
 5358 0028 00000000 		.word	pxReadyTasksLists
 5359 002c 04ED00E0 		.word	-536810236
 5360              		.cfi_endproc
 5361              	.LFE46:
 5363              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5364              		.align	1
 5365              		.syntax unified
 5366              		.thumb
 5367              		.thumb_func
 5368              		.fpu fpv4-sp-d16
 5370              	prvInitialiseTaskLists:
 5371              	.LFB47:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
ARM GAS  /tmp/cc5hVFFU.s 			page 158


3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  /tmp/cc5hVFFU.s 			page 159


3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc5hVFFU.s 			page 160


3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5372              		.loc 1 3547 1
 5373              		.cfi_startproc
 5374              		@ args = 0, pretend = 0, frame = 8
 5375              		@ frame_needed = 1, uses_anonymous_args = 0
 5376 0000 80B5     		push	{r7, lr}
 5377              	.LCFI203:
 5378              		.cfi_def_cfa_offset 8
 5379              		.cfi_offset 7, -8
 5380              		.cfi_offset 14, -4
 5381 0002 82B0     		sub	sp, sp, #8
 5382              	.LCFI204:
 5383              		.cfi_def_cfa_offset 16
 5384 0004 00AF     		add	r7, sp, #0
 5385              	.LCFI205:
 5386              		.cfi_def_cfa_register 7
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
ARM GAS  /tmp/cc5hVFFU.s 			page 161


 5387              		.loc 1 3550 18
 5388 0006 0023     		movs	r3, #0
 5389 0008 7B60     		str	r3, [r7, #4]
 5390              		.loc 1 3550 2
 5391 000a 0CE0     		b	.L354
 5392              	.L355:
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5393              		.loc 1 3552 3 discriminator 3
 5394 000c 7A68     		ldr	r2, [r7, #4]
 5395 000e 1346     		mov	r3, r2
 5396 0010 9B00     		lsls	r3, r3, #2
 5397 0012 1344     		add	r3, r3, r2
 5398 0014 9B00     		lsls	r3, r3, #2
 5399 0016 124A     		ldr	r2, .L356
 5400 0018 1344     		add	r3, r3, r2
 5401 001a 1846     		mov	r0, r3
 5402 001c FFF7FEFF 		bl	vListInitialise
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5403              		.loc 1 3550 101 discriminator 3
 5404 0020 7B68     		ldr	r3, [r7, #4]
 5405 0022 0133     		adds	r3, r3, #1
 5406 0024 7B60     		str	r3, [r7, #4]
 5407              	.L354:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5408              		.loc 1 3550 2 discriminator 1
 5409 0026 7B68     		ldr	r3, [r7, #4]
 5410 0028 372B     		cmp	r3, #55
 5411 002a EFD9     		bls	.L355
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 5412              		.loc 1 3555 2
 5413 002c 0D48     		ldr	r0, .L356+4
 5414 002e FFF7FEFF 		bl	vListInitialise
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5415              		.loc 1 3556 2
 5416 0032 0D48     		ldr	r0, .L356+8
 5417 0034 FFF7FEFF 		bl	vListInitialise
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5418              		.loc 1 3557 2
 5419 0038 0C48     		ldr	r0, .L356+12
 5420 003a FFF7FEFF 		bl	vListInitialise
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5421              		.loc 1 3561 3
 5422 003e 0C48     		ldr	r0, .L356+16
 5423 0040 FFF7FEFF 		bl	vListInitialise
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 5424              		.loc 1 3567 3
ARM GAS  /tmp/cc5hVFFU.s 			page 162


 5425 0044 0B48     		ldr	r0, .L356+20
 5426 0046 FFF7FEFF 		bl	vListInitialise
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5427              		.loc 1 3573 20
 5428 004a 0B4B     		ldr	r3, .L356+24
 5429 004c 054A     		ldr	r2, .L356+4
 5430 004e 1A60     		str	r2, [r3]
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5431              		.loc 1 3574 28
 5432 0050 0A4B     		ldr	r3, .L356+28
 5433 0052 054A     		ldr	r2, .L356+8
 5434 0054 1A60     		str	r2, [r3]
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5435              		.loc 1 3575 1
 5436 0056 00BF     		nop
 5437 0058 0837     		adds	r7, r7, #8
 5438              	.LCFI206:
 5439              		.cfi_def_cfa_offset 8
 5440 005a BD46     		mov	sp, r7
 5441              	.LCFI207:
 5442              		.cfi_def_cfa_register 13
 5443              		@ sp needed
 5444 005c 80BD     		pop	{r7, pc}
 5445              	.L357:
 5446 005e 00BF     		.align	2
 5447              	.L356:
 5448 0060 00000000 		.word	pxReadyTasksLists
 5449 0064 00000000 		.word	xDelayedTaskList1
 5450 0068 00000000 		.word	xDelayedTaskList2
 5451 006c 00000000 		.word	xPendingReadyList
 5452 0070 00000000 		.word	xTasksWaitingTermination
 5453 0074 00000000 		.word	xSuspendedTaskList
 5454 0078 00000000 		.word	pxDelayedTaskList
 5455 007c 00000000 		.word	pxOverflowDelayedTaskList
 5456              		.cfi_endproc
 5457              	.LFE47:
 5459              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5460              		.align	1
 5461              		.syntax unified
 5462              		.thumb
 5463              		.thumb_func
 5464              		.fpu fpv4-sp-d16
 5466              	prvCheckTasksWaitingTermination:
 5467              	.LFB48:
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5468              		.loc 1 3579 1
 5469              		.cfi_startproc
 5470              		@ args = 0, pretend = 0, frame = 8
 5471              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc5hVFFU.s 			page 163


 5472 0000 80B5     		push	{r7, lr}
 5473              	.LCFI208:
 5474              		.cfi_def_cfa_offset 8
 5475              		.cfi_offset 7, -8
 5476              		.cfi_offset 14, -4
 5477 0002 82B0     		sub	sp, sp, #8
 5478              	.LCFI209:
 5479              		.cfi_def_cfa_offset 16
 5480 0004 00AF     		add	r7, sp, #0
 5481              	.LCFI210:
 5482              		.cfi_def_cfa_register 7
 5483              	.LBB205:
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5484              		.loc 1 3589 8
 5485 0006 19E0     		b	.L359
 5486              	.L360:
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 5487              		.loc 1 3591 4
 5488 0008 FFF7FEFF 		bl	vPortEnterCritical
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 5489              		.loc 1 3593 13
 5490 000c 0F4B     		ldr	r3, .L361
 5491 000e DB68     		ldr	r3, [r3, #12]
 5492              		.loc 1 3593 11
 5493 0010 DB68     		ldr	r3, [r3, #12]
 5494 0012 7B60     		str	r3, [r7, #4]
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5495              		.loc 1 3594 14
 5496 0014 7B68     		ldr	r3, [r7, #4]
 5497 0016 0433     		adds	r3, r3, #4
 5498 0018 1846     		mov	r0, r3
 5499 001a FFF7FEFF 		bl	uxListRemove
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 5500              		.loc 1 3595 5
 5501 001e 0C4B     		ldr	r3, .L361+4
 5502 0020 1B68     		ldr	r3, [r3]
 5503 0022 013B     		subs	r3, r3, #1
 5504 0024 0A4A     		ldr	r2, .L361+4
 5505 0026 1360     		str	r3, [r2]
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5506              		.loc 1 3596 5
 5507 0028 0A4B     		ldr	r3, .L361+8
 5508 002a 1B68     		ldr	r3, [r3]
 5509 002c 013B     		subs	r3, r3, #1
 5510 002e 094A     		ldr	r2, .L361+8
 5511 0030 1360     		str	r3, [r2]
ARM GAS  /tmp/cc5hVFFU.s 			page 164


3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 5512              		.loc 1 3598 4
 5513 0032 FFF7FEFF 		bl	vPortExitCritical
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 5514              		.loc 1 3600 4
 5515 0036 7868     		ldr	r0, [r7, #4]
 5516 0038 FFF7FEFF 		bl	prvDeleteTCB
 5517              	.L359:
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5518              		.loc 1 3589 39
 5519 003c 054B     		ldr	r3, .L361+8
 5520 003e 1B68     		ldr	r3, [r3]
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5521              		.loc 1 3589 8
 5522 0040 002B     		cmp	r3, #0
 5523 0042 E1D1     		bne	.L360
 5524              	.LBE205:
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5525              		.loc 1 3604 1
 5526 0044 00BF     		nop
 5527 0046 0837     		adds	r7, r7, #8
 5528              	.LCFI211:
 5529              		.cfi_def_cfa_offset 8
 5530 0048 BD46     		mov	sp, r7
 5531              	.LCFI212:
 5532              		.cfi_def_cfa_register 13
 5533              		@ sp needed
 5534 004a 80BD     		pop	{r7, pc}
 5535              	.L362:
 5536              		.align	2
 5537              	.L361:
 5538 004c 00000000 		.word	xTasksWaitingTermination
 5539 0050 00000000 		.word	uxCurrentNumberOfTasks
 5540 0054 00000000 		.word	uxDeletedTasksWaitingCleanUp
 5541              		.cfi_endproc
 5542              	.LFE48:
 5544              		.section	.text.vTaskGetInfo,"ax",%progbits
 5545              		.align	1
 5546              		.global	vTaskGetInfo
 5547              		.syntax unified
 5548              		.thumb
 5549              		.thumb_func
 5550              		.fpu fpv4-sp-d16
 5552              	vTaskGetInfo:
 5553              	.LFB49:
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5554              		.loc 1 3610 2
ARM GAS  /tmp/cc5hVFFU.s 			page 165


 5555              		.cfi_startproc
 5556              		@ args = 0, pretend = 0, frame = 24
 5557              		@ frame_needed = 1, uses_anonymous_args = 0
 5558 0000 80B5     		push	{r7, lr}
 5559              	.LCFI213:
 5560              		.cfi_def_cfa_offset 8
 5561              		.cfi_offset 7, -8
 5562              		.cfi_offset 14, -4
 5563 0002 86B0     		sub	sp, sp, #24
 5564              	.LCFI214:
 5565              		.cfi_def_cfa_offset 32
 5566 0004 00AF     		add	r7, sp, #0
 5567              	.LCFI215:
 5568              		.cfi_def_cfa_register 7
 5569 0006 F860     		str	r0, [r7, #12]
 5570 0008 B960     		str	r1, [r7, #8]
 5571 000a 7A60     		str	r2, [r7, #4]
 5572 000c FB70     		strb	r3, [r7, #3]
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5573              		.loc 1 3614 11
 5574 000e FB68     		ldr	r3, [r7, #12]
 5575 0010 002B     		cmp	r3, #0
 5576 0012 02D1     		bne	.L364
 5577              		.loc 1 3614 11 is_stmt 0 discriminator 1
 5578 0014 2C4B     		ldr	r3, .L374
 5579 0016 1B68     		ldr	r3, [r3]
 5580 0018 00E0     		b	.L365
 5581              	.L364:
 5582              		.loc 1 3614 11 discriminator 2
 5583 001a FB68     		ldr	r3, [r7, #12]
 5584              	.L365:
 5585              		.loc 1 3614 9 is_stmt 1 discriminator 4
 5586 001c 7B61     		str	r3, [r7, #20]
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5587              		.loc 1 3616 25 discriminator 4
 5588 001e BB68     		ldr	r3, [r7, #8]
 5589 0020 7A69     		ldr	r2, [r7, #20]
 5590 0022 1A60     		str	r2, [r3]
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5591              		.loc 1 3617 47 discriminator 4
 5592 0024 7B69     		ldr	r3, [r7, #20]
 5593 0026 03F13402 		add	r2, r3, #52
 5594              		.loc 1 3617 28 discriminator 4
 5595 002a BB68     		ldr	r3, [r7, #8]
 5596 002c 5A60     		str	r2, [r3, #4]
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5597              		.loc 1 3618 42 discriminator 4
 5598 002e 7B69     		ldr	r3, [r7, #20]
 5599 0030 DA6A     		ldr	r2, [r3, #44]
 5600              		.loc 1 3618 35 discriminator 4
 5601 0032 BB68     		ldr	r3, [r7, #8]
 5602 0034 1A61     		str	r2, [r3, #16]
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
ARM GAS  /tmp/cc5hVFFU.s 			page 166


 5603              		.loc 1 3619 36 discriminator 4
 5604 0036 7B69     		ldr	r3, [r7, #20]
 5605 0038 1A6B     		ldr	r2, [r3, #48]
 5606              		.loc 1 3619 29 discriminator 4
 5607 003a BB68     		ldr	r3, [r7, #8]
 5608 003c DA61     		str	r2, [r3, #28]
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5609              		.loc 1 3620 36 discriminator 4
 5610 003e 7B69     		ldr	r3, [r7, #20]
 5611 0040 5A6C     		ldr	r2, [r3, #68]
 5612              		.loc 1 3620 29 discriminator 4
 5613 0042 BB68     		ldr	r3, [r7, #8]
 5614 0044 9A60     		str	r2, [r3, #8]
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5615              		.loc 1 3624 40 discriminator 4
 5616 0046 7B69     		ldr	r3, [r7, #20]
 5617 0048 DA6C     		ldr	r2, [r3, #76]
 5618              		.loc 1 3624 33 discriminator 4
 5619 004a BB68     		ldr	r3, [r7, #8]
 5620 004c 5A61     		str	r2, [r3, #20]
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 5621              		.loc 1 3638 35 discriminator 4
 5622 004e BB68     		ldr	r3, [r7, #8]
 5623 0050 0022     		movs	r2, #0
 5624 0052 9A61     		str	r2, [r3, #24]
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
 5625              		.loc 1 3645 5 discriminator 4
 5626 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5627 0056 052B     		cmp	r3, #5
 5628 0058 1AD0     		beq	.L366
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5629              		.loc 1 3647 14
 5630 005a 1B4B     		ldr	r3, .L374
 5631 005c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc5hVFFU.s 			page 167


 5632              		.loc 1 3647 6
 5633 005e 7A69     		ldr	r2, [r7, #20]
 5634 0060 9A42     		cmp	r2, r3
 5635 0062 03D1     		bne	.L367
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5636              		.loc 1 3649 33
 5637 0064 BB68     		ldr	r3, [r7, #8]
 5638 0066 0022     		movs	r2, #0
 5639 0068 1A73     		strb	r2, [r3, #12]
 5640 006a 18E0     		b	.L370
 5641              	.L367:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5642              		.loc 1 3653 33
 5643 006c BB68     		ldr	r3, [r7, #8]
 5644 006e FA78     		ldrb	r2, [r7, #3]
 5645 0070 1A73     		strb	r2, [r3, #12]
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
 5646              		.loc 1 3660 8
 5647 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5648 0074 032B     		cmp	r3, #3
 5649 0076 12D1     		bne	.L370
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
 5650              		.loc 1 3662 7
 5651 0078 FFF7FEFF 		bl	vTaskSuspendAll
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5652              		.loc 1 3664 12
 5653 007c 7B69     		ldr	r3, [r7, #20]
 5654 007e 9B6A     		ldr	r3, [r3, #40]
 5655              		.loc 1 3664 10
 5656 0080 002B     		cmp	r3, #0
 5657 0082 02D0     		beq	.L369
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5658              		.loc 1 3666 37
 5659 0084 BB68     		ldr	r3, [r7, #8]
 5660 0086 0222     		movs	r2, #2
 5661 0088 1A73     		strb	r2, [r3, #12]
 5662              	.L369:
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
 5663              		.loc 1 3669 16
 5664 008a FFF7FEFF 		bl	xTaskResumeAll
 5665 008e 06E0     		b	.L370
 5666              	.L366:
ARM GAS  /tmp/cc5hVFFU.s 			page 168


3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5667              		.loc 1 3677 34
 5668 0090 7869     		ldr	r0, [r7, #20]
 5669 0092 FFF7FEFF 		bl	eTaskGetState
 5670 0096 0346     		mov	r3, r0
 5671 0098 1A46     		mov	r2, r3
 5672              		.loc 1 3677 32
 5673 009a BB68     		ldr	r3, [r7, #8]
 5674 009c 1A73     		strb	r2, [r3, #12]
 5675              	.L370:
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5676              		.loc 1 3682 5
 5677 009e 7B68     		ldr	r3, [r7, #4]
 5678 00a0 002B     		cmp	r3, #0
 5679 00a2 09D0     		beq	.L371
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5680              		.loc 1 3690 89
 5681 00a4 7B69     		ldr	r3, [r7, #20]
 5682 00a6 1B6B     		ldr	r3, [r3, #48]
 5683              		.loc 1 3690 42
 5684 00a8 1846     		mov	r0, r3
 5685 00aa FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5686 00ae 0346     		mov	r3, r0
 5687 00b0 1A46     		mov	r2, r3
 5688              		.loc 1 3690 40
 5689 00b2 BB68     		ldr	r3, [r7, #8]
 5690 00b4 1A84     		strh	r2, [r3, #32]	@ movhi
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5691              		.loc 1 3698 2
 5692 00b6 02E0     		b	.L373
 5693              	.L371:
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc5hVFFU.s 			page 169


 5694              		.loc 1 3696 39
 5695 00b8 BB68     		ldr	r3, [r7, #8]
 5696 00ba 0022     		movs	r2, #0
 5697 00bc 1A84     		strh	r2, [r3, #32]	@ movhi
 5698              	.L373:
 5699              		.loc 1 3698 2
 5700 00be 00BF     		nop
 5701 00c0 1837     		adds	r7, r7, #24
 5702              	.LCFI216:
 5703              		.cfi_def_cfa_offset 8
 5704 00c2 BD46     		mov	sp, r7
 5705              	.LCFI217:
 5706              		.cfi_def_cfa_register 13
 5707              		@ sp needed
 5708 00c4 80BD     		pop	{r7, pc}
 5709              	.L375:
 5710 00c6 00BF     		.align	2
 5711              	.L374:
 5712 00c8 00000000 		.word	pxCurrentTCB
 5713              		.cfi_endproc
 5714              	.LFE49:
 5716              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5717              		.align	1
 5718              		.syntax unified
 5719              		.thumb
 5720              		.thumb_func
 5721              		.fpu fpv4-sp-d16
 5723              	prvListTasksWithinSingleList:
 5724              	.LFB50:
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5725              		.loc 1 3706 2
 5726              		.cfi_startproc
 5727              		@ args = 0, pretend = 0, frame = 40
 5728              		@ frame_needed = 1, uses_anonymous_args = 0
 5729 0000 80B5     		push	{r7, lr}
 5730              	.LCFI218:
 5731              		.cfi_def_cfa_offset 8
 5732              		.cfi_offset 7, -8
 5733              		.cfi_offset 14, -4
 5734 0002 8AB0     		sub	sp, sp, #40
 5735              	.LCFI219:
 5736              		.cfi_def_cfa_offset 48
 5737 0004 00AF     		add	r7, sp, #0
 5738              	.LCFI220:
 5739              		.cfi_def_cfa_register 7
 5740 0006 F860     		str	r0, [r7, #12]
 5741 0008 B960     		str	r1, [r7, #8]
 5742 000a 1346     		mov	r3, r2
 5743 000c FB71     		strb	r3, [r7, #7]
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
ARM GAS  /tmp/cc5hVFFU.s 			page 170


3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 5744              		.loc 1 3708 14
 5745 000e 0023     		movs	r3, #0
 5746 0010 7B62     		str	r3, [r7, #36]
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5747              		.loc 1 3710 7
 5748 0012 BB68     		ldr	r3, [r7, #8]
 5749 0014 1B68     		ldr	r3, [r3]
 5750              		.loc 1 3710 5
 5751 0016 002B     		cmp	r3, #0
 5752 0018 3FD0     		beq	.L377
 5753              	.LBB206:
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5754              		.loc 1 3712 4
 5755 001a BB68     		ldr	r3, [r7, #8]
 5756 001c 3B62     		str	r3, [r7, #32]
 5757 001e 3B6A     		ldr	r3, [r7, #32]
 5758 0020 5B68     		ldr	r3, [r3, #4]
 5759 0022 5A68     		ldr	r2, [r3, #4]
 5760 0024 3B6A     		ldr	r3, [r7, #32]
 5761 0026 5A60     		str	r2, [r3, #4]
 5762 0028 3B6A     		ldr	r3, [r7, #32]
 5763 002a 5A68     		ldr	r2, [r3, #4]
 5764 002c 3B6A     		ldr	r3, [r7, #32]
 5765 002e 0833     		adds	r3, r3, #8
 5766 0030 9A42     		cmp	r2, r3
 5767 0032 04D1     		bne	.L378
 5768              		.loc 1 3712 4 is_stmt 0 discriminator 1
 5769 0034 3B6A     		ldr	r3, [r7, #32]
 5770 0036 5B68     		ldr	r3, [r3, #4]
 5771 0038 5A68     		ldr	r2, [r3, #4]
 5772 003a 3B6A     		ldr	r3, [r7, #32]
 5773 003c 5A60     		str	r2, [r3, #4]
 5774              	.L378:
 5775              		.loc 1 3712 4 discriminator 3
 5776 003e 3B6A     		ldr	r3, [r7, #32]
 5777 0040 5B68     		ldr	r3, [r3, #4]
 5778 0042 DB68     		ldr	r3, [r3, #12]
 5779 0044 FB61     		str	r3, [r7, #28]
 5780              	.L380:
 5781              	.LBE206:
 5782              	.LBB207:
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5783              		.loc 1 3720 5 is_stmt 1
 5784 0046 BB68     		ldr	r3, [r7, #8]
 5785 0048 BB61     		str	r3, [r7, #24]
 5786 004a BB69     		ldr	r3, [r7, #24]
 5787 004c 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/cc5hVFFU.s 			page 171


 5788 004e 5A68     		ldr	r2, [r3, #4]
 5789 0050 BB69     		ldr	r3, [r7, #24]
 5790 0052 5A60     		str	r2, [r3, #4]
 5791 0054 BB69     		ldr	r3, [r7, #24]
 5792 0056 5A68     		ldr	r2, [r3, #4]
 5793 0058 BB69     		ldr	r3, [r7, #24]
 5794 005a 0833     		adds	r3, r3, #8
 5795 005c 9A42     		cmp	r2, r3
 5796 005e 04D1     		bne	.L379
 5797              		.loc 1 3720 5 is_stmt 0 discriminator 1
 5798 0060 BB69     		ldr	r3, [r7, #24]
 5799 0062 5B68     		ldr	r3, [r3, #4]
 5800 0064 5A68     		ldr	r2, [r3, #4]
 5801 0066 BB69     		ldr	r3, [r7, #24]
 5802 0068 5A60     		str	r2, [r3, #4]
 5803              	.L379:
 5804              		.loc 1 3720 5 discriminator 3
 5805 006a BB69     		ldr	r3, [r7, #24]
 5806 006c 5B68     		ldr	r3, [r3, #4]
 5807 006e DB68     		ldr	r3, [r3, #12]
 5808 0070 7B61     		str	r3, [r7, #20]
 5809              	.LBE207:
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5810              		.loc 1 3721 67 is_stmt 1 discriminator 3
 5811 0072 7A6A     		ldr	r2, [r7, #36]
 5812 0074 1346     		mov	r3, r2
 5813 0076 DB00     		lsls	r3, r3, #3
 5814 0078 1344     		add	r3, r3, r2
 5815 007a 9B00     		lsls	r3, r3, #2
 5816 007c 1A46     		mov	r2, r3
 5817              		.loc 1 3721 5 discriminator 3
 5818 007e FB68     		ldr	r3, [r7, #12]
 5819 0080 9918     		adds	r1, r3, r2
 5820 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5821 0084 0122     		movs	r2, #1
 5822 0086 7869     		ldr	r0, [r7, #20]
 5823 0088 FFF7FEFF 		bl	vTaskGetInfo
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5824              		.loc 1 3722 11 discriminator 3
 5825 008c 7B6A     		ldr	r3, [r7, #36]
 5826 008e 0133     		adds	r3, r3, #1
 5827 0090 7B62     		str	r3, [r7, #36]
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5828              		.loc 1 3723 4 discriminator 3
 5829 0092 7A69     		ldr	r2, [r7, #20]
 5830 0094 FB69     		ldr	r3, [r7, #28]
 5831 0096 9A42     		cmp	r2, r3
 5832 0098 D5D1     		bne	.L380
 5833              	.L377:
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 5834              		.loc 1 3730 10
ARM GAS  /tmp/cc5hVFFU.s 			page 172


 5835 009a 7B6A     		ldr	r3, [r7, #36]
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5836              		.loc 1 3731 2
 5837 009c 1846     		mov	r0, r3
 5838 009e 2837     		adds	r7, r7, #40
 5839              	.LCFI221:
 5840              		.cfi_def_cfa_offset 8
 5841 00a0 BD46     		mov	sp, r7
 5842              	.LCFI222:
 5843              		.cfi_def_cfa_register 13
 5844              		@ sp needed
 5845 00a2 80BD     		pop	{r7, pc}
 5846              		.cfi_endproc
 5847              	.LFE50:
 5849              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5850              		.align	1
 5851              		.syntax unified
 5852              		.thumb
 5853              		.thumb_func
 5854              		.fpu fpv4-sp-d16
 5856              	prvTaskCheckFreeStackSpace:
 5857              	.LFB51:
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5858              		.loc 1 3739 2
 5859              		.cfi_startproc
 5860              		@ args = 0, pretend = 0, frame = 16
 5861              		@ frame_needed = 1, uses_anonymous_args = 0
 5862              		@ link register save eliminated.
 5863 0000 80B4     		push	{r7}
 5864              	.LCFI223:
 5865              		.cfi_def_cfa_offset 4
 5866              		.cfi_offset 7, -4
 5867 0002 85B0     		sub	sp, sp, #20
 5868              	.LCFI224:
 5869              		.cfi_def_cfa_offset 24
 5870 0004 00AF     		add	r7, sp, #0
 5871              	.LCFI225:
 5872              		.cfi_def_cfa_register 7
 5873 0006 7860     		str	r0, [r7, #4]
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 5874              		.loc 1 3740 11
 5875 0008 0023     		movs	r3, #0
 5876 000a FB60     		str	r3, [r7, #12]
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5877              		.loc 1 3742 8
 5878 000c 05E0     		b	.L383
 5879              	.L384:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
ARM GAS  /tmp/cc5hVFFU.s 			page 173


 5880              		.loc 1 3744 17
 5881 000e 7B68     		ldr	r3, [r7, #4]
 5882 0010 0133     		adds	r3, r3, #1
 5883 0012 7B60     		str	r3, [r7, #4]
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 5884              		.loc 1 3745 11
 5885 0014 FB68     		ldr	r3, [r7, #12]
 5886 0016 0133     		adds	r3, r3, #1
 5887 0018 FB60     		str	r3, [r7, #12]
 5888              	.L383:
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5889              		.loc 1 3742 10
 5890 001a 7B68     		ldr	r3, [r7, #4]
 5891 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5892              		.loc 1 3742 8
 5893 001e A52B     		cmp	r3, #165
 5894 0020 F5D0     		beq	.L384
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 5895              		.loc 1 3748 11
 5896 0022 FB68     		ldr	r3, [r7, #12]
 5897 0024 9B08     		lsrs	r3, r3, #2
 5898 0026 FB60     		str	r3, [r7, #12]
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 5899              		.loc 1 3750 10
 5900 0028 FB68     		ldr	r3, [r7, #12]
 5901 002a 9BB2     		uxth	r3, r3
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5902              		.loc 1 3751 2
 5903 002c 1846     		mov	r0, r3
 5904 002e 1437     		adds	r7, r7, #20
 5905              	.LCFI226:
 5906              		.cfi_def_cfa_offset 4
 5907 0030 BD46     		mov	sp, r7
 5908              	.LCFI227:
 5909              		.cfi_def_cfa_register 13
 5910              		@ sp needed
 5911 0032 5DF8047B 		ldr	r7, [sp], #4
 5912              	.LCFI228:
 5913              		.cfi_restore 7
 5914              		.cfi_def_cfa_offset 0
 5915 0036 7047     		bx	lr
 5916              		.cfi_endproc
 5917              	.LFE51:
 5919              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5920              		.align	1
 5921              		.global	uxTaskGetStackHighWaterMark
 5922              		.syntax unified
 5923              		.thumb
 5924              		.thumb_func
 5925              		.fpu fpv4-sp-d16
 5927              	uxTaskGetStackHighWaterMark:
 5928              	.LFB52:
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc5hVFFU.s 			page 174


3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5929              		.loc 1 3799 2
 5930              		.cfi_startproc
 5931              		@ args = 0, pretend = 0, frame = 24
 5932              		@ frame_needed = 1, uses_anonymous_args = 0
 5933 0000 80B5     		push	{r7, lr}
 5934              	.LCFI229:
 5935              		.cfi_def_cfa_offset 8
 5936              		.cfi_offset 7, -8
 5937              		.cfi_offset 14, -4
 5938 0002 86B0     		sub	sp, sp, #24
ARM GAS  /tmp/cc5hVFFU.s 			page 175


 5939              	.LCFI230:
 5940              		.cfi_def_cfa_offset 32
 5941 0004 00AF     		add	r7, sp, #0
 5942              	.LCFI231:
 5943              		.cfi_def_cfa_register 7
 5944 0006 7860     		str	r0, [r7, #4]
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5945              		.loc 1 3804 11
 5946 0008 7B68     		ldr	r3, [r7, #4]
 5947 000a 002B     		cmp	r3, #0
 5948 000c 02D1     		bne	.L387
 5949              		.loc 1 3804 11 is_stmt 0 discriminator 1
 5950 000e 094B     		ldr	r3, .L390
 5951 0010 1B68     		ldr	r3, [r3]
 5952 0012 00E0     		b	.L388
 5953              	.L387:
 5954              		.loc 1 3804 11 discriminator 2
 5955 0014 7B68     		ldr	r3, [r7, #4]
 5956              	.L388:
 5957              		.loc 1 3804 9 is_stmt 1 discriminator 4
 5958 0016 7B61     		str	r3, [r7, #20]
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 5959              		.loc 1 3808 18 discriminator 4
 5960 0018 7B69     		ldr	r3, [r7, #20]
 5961 001a 1B6B     		ldr	r3, [r3, #48]
 5962 001c 3B61     		str	r3, [r7, #16]
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 5963              		.loc 1 3816 30 discriminator 4
 5964 001e 3869     		ldr	r0, [r7, #16]
 5965 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5966 0024 0346     		mov	r3, r0
 5967              		.loc 1 3816 12 discriminator 4
 5968 0026 FB60     		str	r3, [r7, #12]
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5969              		.loc 1 3818 10 discriminator 4
 5970 0028 FB68     		ldr	r3, [r7, #12]
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5971              		.loc 1 3819 2 discriminator 4
 5972 002a 1846     		mov	r0, r3
 5973 002c 1837     		adds	r7, r7, #24
 5974              	.LCFI232:
 5975              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc5hVFFU.s 			page 176


 5976 002e BD46     		mov	sp, r7
 5977              	.LCFI233:
 5978              		.cfi_def_cfa_register 13
 5979              		@ sp needed
 5980 0030 80BD     		pop	{r7, pc}
 5981              	.L391:
 5982 0032 00BF     		.align	2
 5983              	.L390:
 5984 0034 00000000 		.word	pxCurrentTCB
 5985              		.cfi_endproc
 5986              	.LFE52:
 5988              		.section	.text.prvDeleteTCB,"ax",%progbits
 5989              		.align	1
 5990              		.syntax unified
 5991              		.thumb
 5992              		.thumb_func
 5993              		.fpu fpv4-sp-d16
 5995              	prvDeleteTCB:
 5996              	.LFB53:
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5997              		.loc 1 3827 2
 5998              		.cfi_startproc
 5999              		@ args = 0, pretend = 0, frame = 16
 6000              		@ frame_needed = 1, uses_anonymous_args = 0
 6001 0000 80B5     		push	{r7, lr}
 6002              	.LCFI234:
 6003              		.cfi_def_cfa_offset 8
 6004              		.cfi_offset 7, -8
 6005              		.cfi_offset 14, -4
 6006 0002 84B0     		sub	sp, sp, #16
 6007              	.LCFI235:
 6008              		.cfi_def_cfa_offset 24
 6009 0004 00AF     		add	r7, sp, #0
 6010              	.LCFI236:
 6011              		.cfi_def_cfa_register 7
 6012 0006 7860     		str	r0, [r7, #4]
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
ARM GAS  /tmp/cc5hVFFU.s 			page 177


3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 6013              		.loc 1 3853 13
 6014 0008 7B68     		ldr	r3, [r7, #4]
 6015 000a 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 6016              		.loc 1 3853 6
 6017 000e 002B     		cmp	r3, #0
 6018 0010 08D1     		bne	.L393
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 6019              		.loc 1 3857 21
 6020 0012 7B68     		ldr	r3, [r7, #4]
 6021 0014 1B6B     		ldr	r3, [r3, #48]
 6022              		.loc 1 3857 5
 6023 0016 1846     		mov	r0, r3
 6024 0018 FFF7FEFF 		bl	vPortFree
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 6025              		.loc 1 3858 5
 6026 001c 7868     		ldr	r0, [r7, #4]
 6027 001e FFF7FEFF 		bl	vPortFree
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6028              		.loc 1 3875 2
 6029 0022 17E0     		b	.L397
 6030              	.L393:
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6031              		.loc 1 3860 18
 6032 0024 7B68     		ldr	r3, [r7, #4]
 6033 0026 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc5hVFFU.s 			page 178


 6034              		.loc 1 3860 11
 6035 002a 012B     		cmp	r3, #1
 6036 002c 03D1     		bne	.L395
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6037              		.loc 1 3864 5
 6038 002e 7868     		ldr	r0, [r7, #4]
 6039 0030 FFF7FEFF 		bl	vPortFree
 6040              		.loc 1 3875 2
 6041 0034 0EE0     		b	.L397
 6042              	.L395:
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 6043              		.loc 1 3870 5
 6044 0036 7B68     		ldr	r3, [r7, #4]
 6045 0038 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 6046 003c 022B     		cmp	r3, #2
 6047 003e 09D0     		beq	.L397
 6048              	.LBB208:
 6049              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6050              		.loc 2 195 2 discriminator 1
 6051              		.syntax unified
 6052              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6053 0040 4FF05003 			mov r3, #80												
 6054 0044 83F31188 		msr basepri, r3											
 6055 0048 BFF36F8F 		isb														
 6056 004c BFF34F8F 		dsb														
 6057              	
 6058              	@ 0 "" 2
 6059              		.thumb
 6060              		.syntax unified
 6061 0050 FB60     		str	r3, [r7, #12]
 6062              	.L396:
 6063              	.LBE209:
 6064              	.LBE208:
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 6065              		.loc 1 3870 5 discriminator 1
 6066 0052 FEE7     		b	.L396
 6067              	.L397:
 6068              		.loc 1 3875 2
 6069 0054 00BF     		nop
 6070 0056 1037     		adds	r7, r7, #16
 6071              	.LCFI237:
 6072              		.cfi_def_cfa_offset 8
 6073 0058 BD46     		mov	sp, r7
 6074              	.LCFI238:
 6075              		.cfi_def_cfa_register 13
 6076              		@ sp needed
 6077 005a 80BD     		pop	{r7, pc}
 6078              		.cfi_endproc
 6079              	.LFE53:
 6081              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 6082              		.align	1
 6083              		.syntax unified
 6084              		.thumb
 6085              		.thumb_func
 6086              		.fpu fpv4-sp-d16
 6088              	prvResetNextTaskUnblockTime:
ARM GAS  /tmp/cc5hVFFU.s 			page 179


 6089              	.LFB54:
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6090              		.loc 1 3881 1
 6091              		.cfi_startproc
 6092              		@ args = 0, pretend = 0, frame = 8
 6093              		@ frame_needed = 1, uses_anonymous_args = 0
 6094              		@ link register save eliminated.
 6095 0000 80B4     		push	{r7}
 6096              	.LCFI239:
 6097              		.cfi_def_cfa_offset 4
 6098              		.cfi_offset 7, -4
 6099 0002 83B0     		sub	sp, sp, #12
 6100              	.LCFI240:
 6101              		.cfi_def_cfa_offset 16
 6102 0004 00AF     		add	r7, sp, #0
 6103              	.LCFI241:
 6104              		.cfi_def_cfa_register 7
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 6105              		.loc 1 3884 6
 6106 0006 0C4B     		ldr	r3, .L402
 6107 0008 1B68     		ldr	r3, [r3]
 6108 000a 1B68     		ldr	r3, [r3]
 6109              		.loc 1 3884 4
 6110 000c 002B     		cmp	r3, #0
 6111 000e 04D1     		bne	.L399
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 6112              		.loc 1 3890 24
 6113 0010 0A4B     		ldr	r3, .L402+4
 6114 0012 4FF0FF32 		mov	r2, #-1
 6115 0016 1A60     		str	r2, [r3]
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6116              		.loc 1 3901 1
 6117 0018 08E0     		b	.L401
 6118              	.L399:
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
ARM GAS  /tmp/cc5hVFFU.s 			page 180


 6119              		.loc 1 3898 15
 6120 001a 074B     		ldr	r3, .L402
 6121 001c 1B68     		ldr	r3, [r3]
 6122 001e DB68     		ldr	r3, [r3, #12]
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 6123              		.loc 1 3898 13
 6124 0020 DB68     		ldr	r3, [r3, #12]
 6125 0022 7B60     		str	r3, [r7, #4]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6126              		.loc 1 3899 26
 6127 0024 7B68     		ldr	r3, [r7, #4]
 6128 0026 5B68     		ldr	r3, [r3, #4]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6129              		.loc 1 3899 24
 6130 0028 044A     		ldr	r2, .L402+4
 6131 002a 1360     		str	r3, [r2]
 6132              	.L401:
 6133              		.loc 1 3901 1
 6134 002c 00BF     		nop
 6135 002e 0C37     		adds	r7, r7, #12
 6136              	.LCFI242:
 6137              		.cfi_def_cfa_offset 4
 6138 0030 BD46     		mov	sp, r7
 6139              	.LCFI243:
 6140              		.cfi_def_cfa_register 13
 6141              		@ sp needed
 6142 0032 5DF8047B 		ldr	r7, [sp], #4
 6143              	.LCFI244:
 6144              		.cfi_restore 7
 6145              		.cfi_def_cfa_offset 0
 6146 0036 7047     		bx	lr
 6147              	.L403:
 6148              		.align	2
 6149              	.L402:
 6150 0038 00000000 		.word	pxDelayedTaskList
 6151 003c 00000000 		.word	xNextTaskUnblockTime
 6152              		.cfi_endproc
 6153              	.LFE54:
 6155              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 6156              		.align	1
 6157              		.global	xTaskGetCurrentTaskHandle
 6158              		.syntax unified
 6159              		.thumb
 6160              		.thumb_func
 6161              		.fpu fpv4-sp-d16
 6163              	xTaskGetCurrentTaskHandle:
 6164              	.LFB55:
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6165              		.loc 1 3907 2
 6166              		.cfi_startproc
 6167              		@ args = 0, pretend = 0, frame = 8
 6168              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc5hVFFU.s 			page 181


 6169              		@ link register save eliminated.
 6170 0000 80B4     		push	{r7}
 6171              	.LCFI245:
 6172              		.cfi_def_cfa_offset 4
 6173              		.cfi_offset 7, -4
 6174 0002 83B0     		sub	sp, sp, #12
 6175              	.LCFI246:
 6176              		.cfi_def_cfa_offset 16
 6177 0004 00AF     		add	r7, sp, #0
 6178              	.LCFI247:
 6179              		.cfi_def_cfa_register 7
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 6180              		.loc 1 3913 11
 6181 0006 054B     		ldr	r3, .L406
 6182 0008 1B68     		ldr	r3, [r3]
 6183 000a 7B60     		str	r3, [r7, #4]
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6184              		.loc 1 3915 10
 6185 000c 7B68     		ldr	r3, [r7, #4]
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6186              		.loc 1 3916 2
 6187 000e 1846     		mov	r0, r3
 6188 0010 0C37     		adds	r7, r7, #12
 6189              	.LCFI248:
 6190              		.cfi_def_cfa_offset 4
 6191 0012 BD46     		mov	sp, r7
 6192              	.LCFI249:
 6193              		.cfi_def_cfa_register 13
 6194              		@ sp needed
 6195 0014 5DF8047B 		ldr	r7, [sp], #4
 6196              	.LCFI250:
 6197              		.cfi_restore 7
 6198              		.cfi_def_cfa_offset 0
 6199 0018 7047     		bx	lr
 6200              	.L407:
 6201 001a 00BF     		.align	2
 6202              	.L406:
 6203 001c 00000000 		.word	pxCurrentTCB
 6204              		.cfi_endproc
 6205              	.LFE55:
 6207              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 6208              		.align	1
 6209              		.global	xTaskGetSchedulerState
 6210              		.syntax unified
 6211              		.thumb
 6212              		.thumb_func
 6213              		.fpu fpv4-sp-d16
 6215              	xTaskGetSchedulerState:
 6216              	.LFB56:
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
ARM GAS  /tmp/cc5hVFFU.s 			page 182


3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6217              		.loc 1 3924 2
 6218              		.cfi_startproc
 6219              		@ args = 0, pretend = 0, frame = 8
 6220              		@ frame_needed = 1, uses_anonymous_args = 0
 6221              		@ link register save eliminated.
 6222 0000 80B4     		push	{r7}
 6223              	.LCFI251:
 6224              		.cfi_def_cfa_offset 4
 6225              		.cfi_offset 7, -4
 6226 0002 83B0     		sub	sp, sp, #12
 6227              	.LCFI252:
 6228              		.cfi_def_cfa_offset 16
 6229 0004 00AF     		add	r7, sp, #0
 6230              	.LCFI253:
 6231              		.cfi_def_cfa_register 7
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 6232              		.loc 1 3927 25
 6233 0006 0B4B     		ldr	r3, .L413
 6234 0008 1B68     		ldr	r3, [r3]
 6235              		.loc 1 3927 5
 6236 000a 002B     		cmp	r3, #0
 6237 000c 02D1     		bne	.L409
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 6238              		.loc 1 3929 12
 6239 000e 0123     		movs	r3, #1
 6240 0010 7B60     		str	r3, [r7, #4]
 6241 0012 08E0     		b	.L410
 6242              	.L409:
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6243              		.loc 1 3933 29
 6244 0014 084B     		ldr	r3, .L413+4
 6245 0016 1B68     		ldr	r3, [r3]
 6246              		.loc 1 3933 6
 6247 0018 002B     		cmp	r3, #0
 6248 001a 02D1     		bne	.L411
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 6249              		.loc 1 3935 13
 6250 001c 0223     		movs	r3, #2
 6251 001e 7B60     		str	r3, [r7, #4]
 6252 0020 01E0     		b	.L410
 6253              	.L411:
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc5hVFFU.s 			page 183


3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 6254              		.loc 1 3939 13
 6255 0022 0023     		movs	r3, #0
 6256 0024 7B60     		str	r3, [r7, #4]
 6257              	.L410:
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6258              		.loc 1 3943 10
 6259 0026 7B68     		ldr	r3, [r7, #4]
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6260              		.loc 1 3944 2
 6261 0028 1846     		mov	r0, r3
 6262 002a 0C37     		adds	r7, r7, #12
 6263              	.LCFI254:
 6264              		.cfi_def_cfa_offset 4
 6265 002c BD46     		mov	sp, r7
 6266              	.LCFI255:
 6267              		.cfi_def_cfa_register 13
 6268              		@ sp needed
 6269 002e 5DF8047B 		ldr	r7, [sp], #4
 6270              	.LCFI256:
 6271              		.cfi_restore 7
 6272              		.cfi_def_cfa_offset 0
 6273 0032 7047     		bx	lr
 6274              	.L414:
 6275              		.align	2
 6276              	.L413:
 6277 0034 00000000 		.word	xSchedulerRunning
 6278 0038 00000000 		.word	uxSchedulerSuspended
 6279              		.cfi_endproc
 6280              	.LFE56:
 6282              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6283              		.align	1
 6284              		.global	xTaskPriorityInherit
 6285              		.syntax unified
 6286              		.thumb
 6287              		.thumb_func
 6288              		.fpu fpv4-sp-d16
 6290              	xTaskPriorityInherit:
 6291              	.LFB57:
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6292              		.loc 1 3952 2
 6293              		.cfi_startproc
 6294              		@ args = 0, pretend = 0, frame = 16
 6295              		@ frame_needed = 1, uses_anonymous_args = 0
 6296 0000 80B5     		push	{r7, lr}
 6297              	.LCFI257:
 6298              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc5hVFFU.s 			page 184


 6299              		.cfi_offset 7, -8
 6300              		.cfi_offset 14, -4
 6301 0002 84B0     		sub	sp, sp, #16
 6302              	.LCFI258:
 6303              		.cfi_def_cfa_offset 24
 6304 0004 00AF     		add	r7, sp, #0
 6305              	.LCFI259:
 6306              		.cfi_def_cfa_register 7
 6307 0006 7860     		str	r0, [r7, #4]
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6308              		.loc 1 3953 16
 6309 0008 7B68     		ldr	r3, [r7, #4]
 6310 000a BB60     		str	r3, [r7, #8]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6311              		.loc 1 3954 13
 6312 000c 0023     		movs	r3, #0
 6313 000e FB60     		str	r3, [r7, #12]
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6314              		.loc 1 3959 5
 6315 0010 7B68     		ldr	r3, [r7, #4]
 6316 0012 002B     		cmp	r3, #0
 6317 0014 51D0     		beq	.L416
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6318              		.loc 1 3964 24
 6319 0016 BB68     		ldr	r3, [r7, #8]
 6320 0018 DA6A     		ldr	r2, [r3, #44]
 6321              		.loc 1 3964 51
 6322 001a 2A4B     		ldr	r3, .L423
 6323 001c 1B68     		ldr	r3, [r3]
 6324 001e DB6A     		ldr	r3, [r3, #44]
 6325              		.loc 1 3964 6
 6326 0020 9A42     		cmp	r2, r3
 6327 0022 41D2     		bcs	.L417
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 6328              		.loc 1 3969 11
 6329 0024 BB68     		ldr	r3, [r7, #8]
 6330 0026 9B69     		ldr	r3, [r3, #24]
 6331              		.loc 1 3969 7
 6332 0028 002B     		cmp	r3, #0
 6333 002a 06DB     		blt	.L418
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 6334              		.loc 1 3971 6
 6335 002c 254B     		ldr	r3, .L423
 6336 002e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc5hVFFU.s 			page 185


 6337 0030 DB6A     		ldr	r3, [r3, #44]
 6338 0032 C3F13802 		rsb	r2, r3, #56
 6339 0036 BB68     		ldr	r3, [r7, #8]
 6340 0038 9A61     		str	r2, [r3, #24]
 6341              	.L418:
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 6342              		.loc 1 3980 9
 6343 003a BB68     		ldr	r3, [r7, #8]
 6344 003c 5969     		ldr	r1, [r3, #20]
 6345 003e BB68     		ldr	r3, [r7, #8]
 6346 0040 DA6A     		ldr	r2, [r3, #44]
 6347 0042 1346     		mov	r3, r2
 6348 0044 9B00     		lsls	r3, r3, #2
 6349 0046 1344     		add	r3, r3, r2
 6350 0048 9B00     		lsls	r3, r3, #2
 6351 004a 1F4A     		ldr	r2, .L423+4
 6352 004c 1344     		add	r3, r3, r2
 6353              		.loc 1 3980 7
 6354 004e 9942     		cmp	r1, r3
 6355 0050 22D1     		bne	.L419
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6356              		.loc 1 3982 10
 6357 0052 BB68     		ldr	r3, [r7, #8]
 6358 0054 0433     		adds	r3, r3, #4
 6359 0056 1846     		mov	r0, r3
 6360 0058 FFF7FEFF 		bl	uxListRemove
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6361              		.loc 1 3992 49
 6362 005c 194B     		ldr	r3, .L423
 6363 005e 1B68     		ldr	r3, [r3]
 6364 0060 DA6A     		ldr	r2, [r3, #44]
 6365              		.loc 1 3992 35
 6366 0062 BB68     		ldr	r3, [r7, #8]
 6367 0064 DA62     		str	r2, [r3, #44]
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6368              		.loc 1 3993 6
 6369 0066 BB68     		ldr	r3, [r7, #8]
 6370 0068 DA6A     		ldr	r2, [r3, #44]
 6371 006a 184B     		ldr	r3, .L423+8
ARM GAS  /tmp/cc5hVFFU.s 			page 186


 6372 006c 1B68     		ldr	r3, [r3]
 6373 006e 9A42     		cmp	r2, r3
 6374 0070 03D9     		bls	.L420
 6375              		.loc 1 3993 6 is_stmt 0 discriminator 1
 6376 0072 BB68     		ldr	r3, [r7, #8]
 6377 0074 DB6A     		ldr	r3, [r3, #44]
 6378 0076 154A     		ldr	r2, .L423+8
 6379 0078 1360     		str	r3, [r2]
 6380              	.L420:
 6381              		.loc 1 3993 6 discriminator 3
 6382 007a BB68     		ldr	r3, [r7, #8]
 6383 007c DA6A     		ldr	r2, [r3, #44]
 6384 007e 1346     		mov	r3, r2
 6385 0080 9B00     		lsls	r3, r3, #2
 6386 0082 1344     		add	r3, r3, r2
 6387 0084 9B00     		lsls	r3, r3, #2
 6388 0086 104A     		ldr	r2, .L423+4
 6389 0088 1A44     		add	r2, r2, r3
 6390 008a BB68     		ldr	r3, [r7, #8]
 6391 008c 0433     		adds	r3, r3, #4
 6392 008e 1946     		mov	r1, r3
 6393 0090 1046     		mov	r0, r2
 6394 0092 FFF7FEFF 		bl	vListInsertEnd
 6395 0096 04E0     		b	.L421
 6396              	.L419:
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6397              		.loc 1 3998 49 is_stmt 1
 6398 0098 0A4B     		ldr	r3, .L423
 6399 009a 1B68     		ldr	r3, [r3]
 6400 009c DA6A     		ldr	r2, [r3, #44]
 6401              		.loc 1 3998 35
 6402 009e BB68     		ldr	r3, [r7, #8]
 6403 00a0 DA62     		str	r2, [r3, #44]
 6404              	.L421:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6405              		.loc 1 4004 13
 6406 00a2 0123     		movs	r3, #1
 6407 00a4 FB60     		str	r3, [r7, #12]
 6408 00a6 08E0     		b	.L416
 6409              	.L417:
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6410              		.loc 1 4008 25
 6411 00a8 BB68     		ldr	r3, [r7, #8]
 6412 00aa DA6C     		ldr	r2, [r3, #76]
 6413              		.loc 1 4008 56
ARM GAS  /tmp/cc5hVFFU.s 			page 187


 6414 00ac 054B     		ldr	r3, .L423
 6415 00ae 1B68     		ldr	r3, [r3]
 6416 00b0 DB6A     		ldr	r3, [r3, #44]
 6417              		.loc 1 4008 7
 6418 00b2 9A42     		cmp	r2, r3
 6419 00b4 01D2     		bcs	.L416
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6420              		.loc 1 4017 14
 6421 00b6 0123     		movs	r3, #1
 6422 00b8 FB60     		str	r3, [r7, #12]
 6423              	.L416:
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6424              		.loc 1 4030 10
 6425 00ba FB68     		ldr	r3, [r7, #12]
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6426              		.loc 1 4031 2
 6427 00bc 1846     		mov	r0, r3
 6428 00be 1037     		adds	r7, r7, #16
 6429              	.LCFI260:
 6430              		.cfi_def_cfa_offset 8
 6431 00c0 BD46     		mov	sp, r7
 6432              	.LCFI261:
 6433              		.cfi_def_cfa_register 13
 6434              		@ sp needed
 6435 00c2 80BD     		pop	{r7, pc}
 6436              	.L424:
 6437              		.align	2
 6438              	.L423:
 6439 00c4 00000000 		.word	pxCurrentTCB
 6440 00c8 00000000 		.word	pxReadyTasksLists
 6441 00cc 00000000 		.word	uxTopReadyPriority
 6442              		.cfi_endproc
 6443              	.LFE57:
 6445              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6446              		.align	1
 6447              		.global	xTaskPriorityDisinherit
 6448              		.syntax unified
ARM GAS  /tmp/cc5hVFFU.s 			page 188


 6449              		.thumb
 6450              		.thumb_func
 6451              		.fpu fpv4-sp-d16
 6453              	xTaskPriorityDisinherit:
 6454              	.LFB58:
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6455              		.loc 1 4039 2
 6456              		.cfi_startproc
 6457              		@ args = 0, pretend = 0, frame = 24
 6458              		@ frame_needed = 1, uses_anonymous_args = 0
 6459 0000 80B5     		push	{r7, lr}
 6460              	.LCFI262:
 6461              		.cfi_def_cfa_offset 8
 6462              		.cfi_offset 7, -8
 6463              		.cfi_offset 14, -4
 6464 0002 86B0     		sub	sp, sp, #24
 6465              	.LCFI263:
 6466              		.cfi_def_cfa_offset 32
 6467 0004 00AF     		add	r7, sp, #0
 6468              	.LCFI264:
 6469              		.cfi_def_cfa_register 7
 6470 0006 7860     		str	r0, [r7, #4]
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6471              		.loc 1 4040 16
 6472 0008 7B68     		ldr	r3, [r7, #4]
 6473 000a 3B61     		str	r3, [r7, #16]
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6474              		.loc 1 4041 13
 6475 000c 0023     		movs	r3, #0
 6476 000e 7B61     		str	r3, [r7, #20]
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6477              		.loc 1 4043 5
 6478 0010 7B68     		ldr	r3, [r7, #4]
 6479 0012 002B     		cmp	r3, #0
 6480 0014 54D0     		beq	.L426
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6481              		.loc 1 4049 4
 6482 0016 2D4B     		ldr	r3, .L433
 6483 0018 1B68     		ldr	r3, [r3]
 6484 001a 3A69     		ldr	r2, [r7, #16]
 6485 001c 9A42     		cmp	r2, r3
 6486 001e 09D0     		beq	.L427
 6487              	.LBB210:
 6488              	.LBB211:
ARM GAS  /tmp/cc5hVFFU.s 			page 189


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6489              		.loc 2 195 2 discriminator 1
 6490              		.syntax unified
 6491              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6492 0020 4FF05003 			mov r3, #80												
 6493 0024 83F31188 		msr basepri, r3											
 6494 0028 BFF36F8F 		isb														
 6495 002c BFF34F8F 		dsb														
 6496              	
 6497              	@ 0 "" 2
 6498              		.thumb
 6499              		.syntax unified
 6500 0030 FB60     		str	r3, [r7, #12]
 6501              	.L428:
 6502              	.LBE211:
 6503              	.LBE210:
 6504              		.loc 1 4049 4 discriminator 1
 6505 0032 FEE7     		b	.L428
 6506              	.L427:
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6507              		.loc 1 4050 4
 6508 0034 3B69     		ldr	r3, [r7, #16]
 6509 0036 1B6D     		ldr	r3, [r3, #80]
 6510 0038 002B     		cmp	r3, #0
 6511 003a 09D1     		bne	.L429
 6512              	.LBB212:
 6513              	.LBB213:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6514              		.loc 2 195 2 discriminator 1
 6515              		.syntax unified
 6516              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6517 003c 4FF05003 			mov r3, #80												
 6518 0040 83F31188 		msr basepri, r3											
 6519 0044 BFF36F8F 		isb														
 6520 0048 BFF34F8F 		dsb														
 6521              	
 6522              	@ 0 "" 2
 6523              		.thumb
 6524              		.syntax unified
 6525 004c BB60     		str	r3, [r7, #8]
 6526              	.L430:
 6527              	.LBE213:
 6528              	.LBE212:
 6529              		.loc 1 4050 4 discriminator 2
 6530 004e FEE7     		b	.L430
 6531              	.L429:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6532              		.loc 1 4051 11
 6533 0050 3B69     		ldr	r3, [r7, #16]
 6534 0052 1B6D     		ldr	r3, [r3, #80]
 6535              		.loc 1 4051 28
 6536 0054 5A1E     		subs	r2, r3, #1
 6537 0056 3B69     		ldr	r3, [r7, #16]
 6538 0058 1A65     		str	r2, [r3, #80]
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
ARM GAS  /tmp/cc5hVFFU.s 			page 190


4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6539              		.loc 1 4055 13
 6540 005a 3B69     		ldr	r3, [r7, #16]
 6541 005c DA6A     		ldr	r2, [r3, #44]
 6542              		.loc 1 4055 34
 6543 005e 3B69     		ldr	r3, [r7, #16]
 6544 0060 DB6C     		ldr	r3, [r3, #76]
 6545              		.loc 1 4055 6
 6546 0062 9A42     		cmp	r2, r3
 6547 0064 2CD0     		beq	.L426
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6548              		.loc 1 4058 14
 6549 0066 3B69     		ldr	r3, [r7, #16]
 6550 0068 1B6D     		ldr	r3, [r3, #80]
 6551              		.loc 1 4058 7
 6552 006a 002B     		cmp	r3, #0
 6553 006c 28D1     		bne	.L426
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6554              		.loc 1 4065 10
 6555 006e 3B69     		ldr	r3, [r7, #16]
 6556 0070 0433     		adds	r3, r3, #4
 6557 0072 1846     		mov	r0, r3
 6558 0074 FFF7FEFF 		bl	uxListRemove
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6559              		.loc 1 4077 31
 6560 0078 3B69     		ldr	r3, [r7, #16]
 6561 007a DA6C     		ldr	r2, [r3, #76]
 6562              		.loc 1 4077 24
 6563 007c 3B69     		ldr	r3, [r7, #16]
 6564 007e DA62     		str	r2, [r3, #44]
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6565              		.loc 1 4082 6
 6566 0080 3B69     		ldr	r3, [r7, #16]
 6567 0082 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/cc5hVFFU.s 			page 191


 6568 0084 C3F13802 		rsb	r2, r3, #56
 6569 0088 3B69     		ldr	r3, [r7, #16]
 6570 008a 9A61     		str	r2, [r3, #24]
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6571              		.loc 1 4083 6
 6572 008c 3B69     		ldr	r3, [r7, #16]
 6573 008e DA6A     		ldr	r2, [r3, #44]
 6574 0090 0F4B     		ldr	r3, .L433+4
 6575 0092 1B68     		ldr	r3, [r3]
 6576 0094 9A42     		cmp	r2, r3
 6577 0096 03D9     		bls	.L431
 6578              		.loc 1 4083 6 is_stmt 0 discriminator 1
 6579 0098 3B69     		ldr	r3, [r7, #16]
 6580 009a DB6A     		ldr	r3, [r3, #44]
 6581 009c 0C4A     		ldr	r2, .L433+4
 6582 009e 1360     		str	r3, [r2]
 6583              	.L431:
 6584              		.loc 1 4083 6 discriminator 3
 6585 00a0 3B69     		ldr	r3, [r7, #16]
 6586 00a2 DA6A     		ldr	r2, [r3, #44]
 6587 00a4 1346     		mov	r3, r2
 6588 00a6 9B00     		lsls	r3, r3, #2
 6589 00a8 1344     		add	r3, r3, r2
 6590 00aa 9B00     		lsls	r3, r3, #2
 6591 00ac 094A     		ldr	r2, .L433+8
 6592 00ae 1A44     		add	r2, r2, r3
 6593 00b0 3B69     		ldr	r3, [r7, #16]
 6594 00b2 0433     		adds	r3, r3, #4
 6595 00b4 1946     		mov	r1, r3
 6596 00b6 1046     		mov	r0, r2
 6597 00b8 FFF7FEFF 		bl	vListInsertEnd
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6598              		.loc 1 4093 14 is_stmt 1 discriminator 3
 6599 00bc 0123     		movs	r3, #1
 6600 00be 7B61     		str	r3, [r7, #20]
 6601              	.L426:
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/cc5hVFFU.s 			page 192


4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6602              		.loc 1 4110 10
 6603 00c0 7B69     		ldr	r3, [r7, #20]
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6604              		.loc 1 4111 2
 6605 00c2 1846     		mov	r0, r3
 6606 00c4 1837     		adds	r7, r7, #24
 6607              	.LCFI265:
 6608              		.cfi_def_cfa_offset 8
 6609 00c6 BD46     		mov	sp, r7
 6610              	.LCFI266:
 6611              		.cfi_def_cfa_register 13
 6612              		@ sp needed
 6613 00c8 80BD     		pop	{r7, pc}
 6614              	.L434:
 6615 00ca 00BF     		.align	2
 6616              	.L433:
 6617 00cc 00000000 		.word	pxCurrentTCB
 6618 00d0 00000000 		.word	uxTopReadyPriority
 6619 00d4 00000000 		.word	pxReadyTasksLists
 6620              		.cfi_endproc
 6621              	.LFE58:
 6623              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6624              		.align	1
 6625              		.global	vTaskPriorityDisinheritAfterTimeout
 6626              		.syntax unified
 6627              		.thumb
 6628              		.thumb_func
 6629              		.fpu fpv4-sp-d16
 6631              	vTaskPriorityDisinheritAfterTimeout:
 6632              	.LFB59:
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6633              		.loc 1 4119 2
 6634              		.cfi_startproc
 6635              		@ args = 0, pretend = 0, frame = 32
 6636              		@ frame_needed = 1, uses_anonymous_args = 0
 6637 0000 80B5     		push	{r7, lr}
 6638              	.LCFI267:
 6639              		.cfi_def_cfa_offset 8
 6640              		.cfi_offset 7, -8
 6641              		.cfi_offset 14, -4
 6642 0002 88B0     		sub	sp, sp, #32
 6643              	.LCFI268:
 6644              		.cfi_def_cfa_offset 40
 6645 0004 00AF     		add	r7, sp, #0
 6646              	.LCFI269:
ARM GAS  /tmp/cc5hVFFU.s 			page 193


 6647              		.cfi_def_cfa_register 7
 6648 0006 7860     		str	r0, [r7, #4]
 6649 0008 3960     		str	r1, [r7]
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6650              		.loc 1 4120 16
 6651 000a 7B68     		ldr	r3, [r7, #4]
 6652 000c BB61     		str	r3, [r7, #24]
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6653              		.loc 1 4122 20
 6654 000e 0123     		movs	r3, #1
 6655 0010 7B61     		str	r3, [r7, #20]
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6656              		.loc 1 4124 5
 6657 0012 7B68     		ldr	r3, [r7, #4]
 6658 0014 002B     		cmp	r3, #0
 6659 0016 68D0     		beq	.L445
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6660              		.loc 1 4128 4
 6661 0018 BB69     		ldr	r3, [r7, #24]
 6662 001a 1B6D     		ldr	r3, [r3, #80]
 6663 001c 002B     		cmp	r3, #0
 6664 001e 09D1     		bne	.L437
 6665              	.LBB214:
 6666              	.LBB215:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6667              		.loc 2 195 2 discriminator 1
 6668              		.syntax unified
 6669              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6670 0020 4FF05003 			mov r3, #80												
 6671 0024 83F31188 		msr basepri, r3											
 6672 0028 BFF36F8F 		isb														
 6673 002c BFF34F8F 		dsb														
 6674              	
 6675              	@ 0 "" 2
 6676              		.thumb
 6677              		.syntax unified
 6678 0030 FB60     		str	r3, [r7, #12]
 6679              	.L438:
 6680              	.LBE215:
 6681              	.LBE214:
 6682              		.loc 1 4128 4 discriminator 1
 6683 0032 FEE7     		b	.L438
 6684              	.L437:
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6685              		.loc 1 4134 13
 6686 0034 BB69     		ldr	r3, [r7, #24]
 6687 0036 DB6C     		ldr	r3, [r3, #76]
ARM GAS  /tmp/cc5hVFFU.s 			page 194


 6688              		.loc 1 4134 6
 6689 0038 3A68     		ldr	r2, [r7]
 6690 003a 9A42     		cmp	r2, r3
 6691 003c 02D9     		bls	.L439
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6692              		.loc 1 4136 21
 6693 003e 3B68     		ldr	r3, [r7]
 6694 0040 FB61     		str	r3, [r7, #28]
 6695 0042 02E0     		b	.L440
 6696              	.L439:
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 6697              		.loc 1 4140 21
 6698 0044 BB69     		ldr	r3, [r7, #24]
 6699 0046 DB6C     		ldr	r3, [r3, #76]
 6700 0048 FB61     		str	r3, [r7, #28]
 6701              	.L440:
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 6702              		.loc 1 4144 13
 6703 004a BB69     		ldr	r3, [r7, #24]
 6704 004c DB6A     		ldr	r3, [r3, #44]
 6705              		.loc 1 4144 6
 6706 004e FA69     		ldr	r2, [r7, #28]
 6707 0050 9A42     		cmp	r2, r3
 6708 0052 4AD0     		beq	.L445
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6709              		.loc 1 4150 14
 6710 0054 BB69     		ldr	r3, [r7, #24]
 6711 0056 1B6D     		ldr	r3, [r3, #80]
 6712              		.loc 1 4150 7
 6713 0058 7A69     		ldr	r2, [r7, #20]
 6714 005a 9A42     		cmp	r2, r3
 6715 005c 45D1     		bne	.L445
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 6716              		.loc 1 4155 6
 6717 005e 254B     		ldr	r3, .L446
 6718 0060 1B68     		ldr	r3, [r3]
 6719 0062 BA69     		ldr	r2, [r7, #24]
 6720 0064 9A42     		cmp	r2, r3
 6721 0066 09D1     		bne	.L441
 6722              	.LBB216:
 6723              	.LBB217:
ARM GAS  /tmp/cc5hVFFU.s 			page 195


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6724              		.loc 2 195 2 discriminator 1
 6725              		.syntax unified
 6726              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6727 0068 4FF05003 			mov r3, #80												
 6728 006c 83F31188 		msr basepri, r3											
 6729 0070 BFF36F8F 		isb														
 6730 0074 BFF34F8F 		dsb														
 6731              	
 6732              	@ 0 "" 2
 6733              		.thumb
 6734              		.syntax unified
 6735 0078 BB60     		str	r3, [r7, #8]
 6736              	.L442:
 6737              	.LBE217:
 6738              	.LBE216:
 6739              		.loc 1 4155 6 discriminator 2
 6740 007a FEE7     		b	.L442
 6741              	.L441:
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6742              		.loc 1 4161 28
 6743 007c BB69     		ldr	r3, [r7, #24]
 6744 007e DB6A     		ldr	r3, [r3, #44]
 6745 0080 3B61     		str	r3, [r7, #16]
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6746              		.loc 1 4162 24
 6747 0082 BB69     		ldr	r3, [r7, #24]
 6748 0084 FA69     		ldr	r2, [r7, #28]
 6749 0086 DA62     		str	r2, [r3, #44]
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6750              		.loc 1 4166 12
 6751 0088 BB69     		ldr	r3, [r7, #24]
 6752 008a 9B69     		ldr	r3, [r3, #24]
 6753              		.loc 1 4166 8
 6754 008c 002B     		cmp	r3, #0
 6755 008e 04DB     		blt	.L443
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6756              		.loc 1 4168 7
 6757 0090 FB69     		ldr	r3, [r7, #28]
 6758 0092 C3F13802 		rsb	r2, r3, #56
 6759 0096 BB69     		ldr	r3, [r7, #24]
 6760 0098 9A61     		str	r2, [r3, #24]
 6761              	.L443:
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cc5hVFFU.s 			page 196


4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6762              		.loc 1 4181 10
 6763 009a BB69     		ldr	r3, [r7, #24]
 6764 009c 5969     		ldr	r1, [r3, #20]
 6765 009e 3A69     		ldr	r2, [r7, #16]
 6766 00a0 1346     		mov	r3, r2
 6767 00a2 9B00     		lsls	r3, r3, #2
 6768 00a4 1344     		add	r3, r3, r2
 6769 00a6 9B00     		lsls	r3, r3, #2
 6770 00a8 134A     		ldr	r2, .L446+4
 6771 00aa 1344     		add	r3, r3, r2
 6772              		.loc 1 4181 8
 6773 00ac 9942     		cmp	r1, r3
 6774 00ae 1CD1     		bne	.L445
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6775              		.loc 1 4183 11
 6776 00b0 BB69     		ldr	r3, [r7, #24]
 6777 00b2 0433     		adds	r3, r3, #4
 6778 00b4 1846     		mov	r0, r3
 6779 00b6 FFF7FEFF 		bl	uxListRemove
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6780              		.loc 1 4192 7
 6781 00ba BB69     		ldr	r3, [r7, #24]
 6782 00bc DA6A     		ldr	r2, [r3, #44]
 6783 00be 0F4B     		ldr	r3, .L446+8
 6784 00c0 1B68     		ldr	r3, [r3]
 6785 00c2 9A42     		cmp	r2, r3
 6786 00c4 03D9     		bls	.L444
 6787              		.loc 1 4192 7 is_stmt 0 discriminator 1
 6788 00c6 BB69     		ldr	r3, [r7, #24]
 6789 00c8 DB6A     		ldr	r3, [r3, #44]
 6790 00ca 0C4A     		ldr	r2, .L446+8
 6791 00cc 1360     		str	r3, [r2]
 6792              	.L444:
 6793              		.loc 1 4192 7 discriminator 3
 6794 00ce BB69     		ldr	r3, [r7, #24]
 6795 00d0 DA6A     		ldr	r2, [r3, #44]
 6796 00d2 1346     		mov	r3, r2
 6797 00d4 9B00     		lsls	r3, r3, #2
 6798 00d6 1344     		add	r3, r3, r2
 6799 00d8 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/cc5hVFFU.s 			page 197


 6800 00da 074A     		ldr	r2, .L446+4
 6801 00dc 1A44     		add	r2, r2, r3
 6802 00de BB69     		ldr	r3, [r7, #24]
 6803 00e0 0433     		adds	r3, r3, #4
 6804 00e2 1946     		mov	r1, r3
 6805 00e4 1046     		mov	r0, r2
 6806 00e6 FFF7FEFF 		bl	vListInsertEnd
 6807              	.L445:
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6808              		.loc 1 4213 2 is_stmt 1
 6809 00ea 00BF     		nop
 6810 00ec 2037     		adds	r7, r7, #32
 6811              	.LCFI270:
 6812              		.cfi_def_cfa_offset 8
 6813 00ee BD46     		mov	sp, r7
 6814              	.LCFI271:
 6815              		.cfi_def_cfa_register 13
 6816              		@ sp needed
 6817 00f0 80BD     		pop	{r7, pc}
 6818              	.L447:
 6819 00f2 00BF     		.align	2
 6820              	.L446:
 6821 00f4 00000000 		.word	pxCurrentTCB
 6822 00f8 00000000 		.word	pxReadyTasksLists
 6823 00fc 00000000 		.word	uxTopReadyPriority
 6824              		.cfi_endproc
 6825              	.LFE59:
 6827              		.section	.text.prvWriteNameToBuffer,"ax",%progbits
 6828              		.align	1
 6829              		.syntax unified
 6830              		.thumb
 6831              		.thumb_func
 6832              		.fpu fpv4-sp-d16
 6834              	prvWriteNameToBuffer:
 6835              	.LFB60:
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
ARM GAS  /tmp/cc5hVFFU.s 			page 198


4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/cc5hVFFU.s 			page 199


4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6836              		.loc 1 4284 2
 6837              		.cfi_startproc
 6838              		@ args = 0, pretend = 0, frame = 16
 6839              		@ frame_needed = 1, uses_anonymous_args = 0
 6840 0000 80B5     		push	{r7, lr}
 6841              	.LCFI272:
 6842              		.cfi_def_cfa_offset 8
 6843              		.cfi_offset 7, -8
 6844              		.cfi_offset 14, -4
 6845 0002 84B0     		sub	sp, sp, #16
 6846              	.LCFI273:
 6847              		.cfi_def_cfa_offset 24
 6848 0004 00AF     		add	r7, sp, #0
 6849              	.LCFI274:
 6850              		.cfi_def_cfa_register 7
 6851 0006 7860     		str	r0, [r7, #4]
 6852 0008 3960     		str	r1, [r7]
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
 6853              		.loc 1 4288 3
 6854 000a 3968     		ldr	r1, [r7]
 6855 000c 7868     		ldr	r0, [r7, #4]
 6856 000e FFF7FEFF 		bl	strcpy
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 6857              		.loc 1 4292 12
 6858 0012 7868     		ldr	r0, [r7, #4]
 6859 0014 FFF7FEFF 		bl	strlen
 6860 0018 F860     		str	r0, [r7, #12]
 6861              		.loc 1 4292 3
 6862 001a 07E0     		b	.L449
 6863              	.L450:
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
 6864              		.loc 1 4294 12 discriminator 3
 6865 001c 7A68     		ldr	r2, [r7, #4]
 6866 001e FB68     		ldr	r3, [r7, #12]
 6867 0020 1344     		add	r3, r3, r2
 6868              		.loc 1 4294 18 discriminator 3
 6869 0022 2022     		movs	r2, #32
 6870 0024 1A70     		strb	r2, [r3]
ARM GAS  /tmp/cc5hVFFU.s 			page 200


4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6871              		.loc 1 4292 81 discriminator 3
 6872 0026 FB68     		ldr	r3, [r7, #12]
 6873 0028 0133     		adds	r3, r3, #1
 6874 002a FB60     		str	r3, [r7, #12]
 6875              	.L449:
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6876              		.loc 1 4292 3 discriminator 1
 6877 002c FB68     		ldr	r3, [r7, #12]
 6878 002e 0E2B     		cmp	r3, #14
 6879 0030 F4D9     		bls	.L450
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
 6880              		.loc 1 4298 11
 6881 0032 7A68     		ldr	r2, [r7, #4]
 6882 0034 FB68     		ldr	r3, [r7, #12]
 6883 0036 1344     		add	r3, r3, r2
 6884              		.loc 1 4298 17
 6885 0038 0022     		movs	r2, #0
 6886 003a 1A70     		strb	r2, [r3]
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
 6887              		.loc 1 4301 10
 6888 003c 7A68     		ldr	r2, [r7, #4]
 6889 003e FB68     		ldr	r3, [r7, #12]
 6890 0040 1344     		add	r3, r3, r2
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6891              		.loc 1 4302 2
 6892 0042 1846     		mov	r0, r3
 6893 0044 1037     		adds	r7, r7, #16
 6894              	.LCFI275:
 6895              		.cfi_def_cfa_offset 8
 6896 0046 BD46     		mov	sp, r7
 6897              	.LCFI276:
 6898              		.cfi_def_cfa_register 13
 6899              		@ sp needed
 6900 0048 80BD     		pop	{r7, pc}
 6901              		.cfi_endproc
 6902              	.LFE60:
 6904              		.section	.rodata
 6905 0005 000000   		.align	2
 6906              	.LC1:
 6907 0008 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 6907      25750925 
 6907      75092575 
 6907      0D0A00
 6908              		.section	.text.vTaskList,"ax",%progbits
 6909              		.align	1
 6910              		.global	vTaskList
 6911              		.syntax unified
 6912              		.thumb
 6913              		.thumb_func
 6914              		.fpu fpv4-sp-d16
 6916              	vTaskList:
ARM GAS  /tmp/cc5hVFFU.s 			page 201


 6917              	.LFB61:
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6918              		.loc 1 4310 2
 6919              		.cfi_startproc
 6920              		@ args = 0, pretend = 0, frame = 24
 6921              		@ frame_needed = 1, uses_anonymous_args = 0
 6922 0000 90B5     		push	{r4, r7, lr}
 6923              	.LCFI277:
 6924              		.cfi_def_cfa_offset 12
 6925              		.cfi_offset 4, -12
 6926              		.cfi_offset 7, -8
 6927              		.cfi_offset 14, -4
 6928 0002 89B0     		sub	sp, sp, #36
 6929              	.LCFI278:
 6930              		.cfi_def_cfa_offset 48
 6931 0004 02AF     		add	r7, sp, #8
 6932              	.LCFI279:
 6933              		.cfi_def_cfa 7, 40
 6934 0006 7860     		str	r0, [r7, #4]
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
ARM GAS  /tmp/cc5hVFFU.s 			page 202


 6935              		.loc 1 4341 18
 6936 0008 7B68     		ldr	r3, [r7, #4]
 6937 000a 0022     		movs	r2, #0
 6938 000c 1A70     		strb	r2, [r3]
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
 6939              		.loc 1 4345 15
 6940 000e 454B     		ldr	r3, .L465
 6941 0010 1B68     		ldr	r3, [r3]
 6942 0012 FB60     		str	r3, [r7, #12]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
 6943              		.loc 1 4350 23
 6944 0014 434B     		ldr	r3, .L465
 6945 0016 1A68     		ldr	r2, [r3]
 6946              		.loc 1 4350 60
 6947 0018 1346     		mov	r3, r2
 6948 001a DB00     		lsls	r3, r3, #3
 6949 001c 1344     		add	r3, r3, r2
 6950 001e 9B00     		lsls	r3, r3, #2
 6951              		.loc 1 4350 23
 6952 0020 1846     		mov	r0, r3
 6953 0022 FFF7FEFF 		bl	pvPortMalloc
 6954 0026 B860     		str	r0, [r7, #8]
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
 6955              		.loc 1 4352 5
 6956 0028 BB68     		ldr	r3, [r7, #8]
 6957 002a 002B     		cmp	r3, #0
 6958 002c 76D0     		beq	.L464
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 6959              		.loc 1 4355 18
 6960 002e 0022     		movs	r2, #0
 6961 0030 F968     		ldr	r1, [r7, #12]
 6962 0032 B868     		ldr	r0, [r7, #8]
 6963 0034 FFF7FEFF 		bl	uxTaskGetSystemState
 6964 0038 F860     		str	r0, [r7, #12]
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
 6965              		.loc 1 4358 11
 6966 003a 0023     		movs	r3, #0
 6967 003c 7B61     		str	r3, [r7, #20]
 6968              		.loc 1 4358 4
 6969 003e 66E0     		b	.L454
 6970              	.L463:
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
 6971              		.loc 1 4360 30
 6972 0040 7A69     		ldr	r2, [r7, #20]
ARM GAS  /tmp/cc5hVFFU.s 			page 203


 6973 0042 1346     		mov	r3, r2
 6974 0044 DB00     		lsls	r3, r3, #3
 6975 0046 1344     		add	r3, r3, r2
 6976 0048 9B00     		lsls	r3, r3, #2
 6977 004a 1A46     		mov	r2, r3
 6978 004c BB68     		ldr	r3, [r7, #8]
 6979 004e 1344     		add	r3, r3, r2
 6980              		.loc 1 4360 35
 6981 0050 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 6982              		.loc 1 4360 5
 6983 0052 042B     		cmp	r3, #4
 6984 0054 1BD8     		bhi	.L455
 6985 0056 01A2     		adr	r2, .L457
 6986 0058 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 6987              		.p2align 2
 6988              	.L457:
 6989 005c 71000000 		.word	.L461+1
 6990 0060 77000000 		.word	.L460+1
 6991 0064 7D000000 		.word	.L459+1
 6992 0068 83000000 		.word	.L458+1
 6993 006c 89000000 		.word	.L456+1
 6994              		.p2align 1
 6995              	.L461:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
 6996              		.loc 1 4362 30
 6997 0070 5823     		movs	r3, #88
 6998 0072 FB74     		strb	r3, [r7, #19]
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 6999              		.loc 1 4363 11
 7000 0074 0EE0     		b	.L462
 7001              	.L460:
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
 7002              		.loc 1 4365 28
 7003 0076 5223     		movs	r3, #82
 7004 0078 FB74     		strb	r3, [r7, #19]
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 7005              		.loc 1 4366 11
 7006 007a 0BE0     		b	.L462
 7007              	.L459:
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 7008              		.loc 1 4368 30
 7009 007c 4223     		movs	r3, #66
 7010 007e FB74     		strb	r3, [r7, #19]
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 7011              		.loc 1 4369 11
 7012 0080 08E0     		b	.L462
 7013              	.L458:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 7014              		.loc 1 4371 31
 7015 0082 5323     		movs	r3, #83
 7016 0084 FB74     		strb	r3, [r7, #19]
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 7017              		.loc 1 4372 11
ARM GAS  /tmp/cc5hVFFU.s 			page 204


 7018 0086 05E0     		b	.L462
 7019              	.L456:
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
 7020              		.loc 1 4374 30
 7021 0088 4423     		movs	r3, #68
 7022 008a FB74     		strb	r3, [r7, #19]
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 7023              		.loc 1 4375 11
 7024 008c 02E0     		b	.L462
 7025              	.L455:
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
 7026              		.loc 1 4380 19
 7027 008e 0023     		movs	r3, #0
 7028 0090 FB74     		strb	r3, [r7, #19]
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 7029              		.loc 1 4381 11
 7030 0092 00BF     		nop
 7031              	.L462:
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 7032              		.loc 1 4386 75 discriminator 2
 7033 0094 7A69     		ldr	r2, [r7, #20]
 7034 0096 1346     		mov	r3, r2
 7035 0098 DB00     		lsls	r3, r3, #3
 7036 009a 1344     		add	r3, r3, r2
 7037 009c 9B00     		lsls	r3, r3, #2
 7038 009e 1A46     		mov	r2, r3
 7039 00a0 BB68     		ldr	r3, [r7, #8]
 7040 00a2 1344     		add	r3, r3, r2
 7041              		.loc 1 4386 21 discriminator 2
 7042 00a4 5B68     		ldr	r3, [r3, #4]
 7043 00a6 1946     		mov	r1, r3
 7044 00a8 7868     		ldr	r0, [r7, #4]
 7045 00aa FFF7FEFF 		bl	prvWriteNameToBuffer
 7046 00ae 7860     		str	r0, [r7, #4]
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
 7047              		.loc 1 4389 5 discriminator 2
 7048 00b0 F97C     		ldrb	r1, [r7, #19]	@ zero_extendqisi2
 7049              		.loc 1 4389 96 discriminator 2
 7050 00b2 7A69     		ldr	r2, [r7, #20]
 7051 00b4 1346     		mov	r3, r2
 7052 00b6 DB00     		lsls	r3, r3, #3
 7053 00b8 1344     		add	r3, r3, r2
 7054 00ba 9B00     		lsls	r3, r3, #2
 7055 00bc 1A46     		mov	r2, r3
 7056 00be BB68     		ldr	r3, [r7, #8]
 7057 00c0 1344     		add	r3, r3, r2
ARM GAS  /tmp/cc5hVFFU.s 			page 205


 7058              		.loc 1 4389 101 discriminator 2
 7059 00c2 1869     		ldr	r0, [r3, #16]
 7060              		.loc 1 4389 155 discriminator 2
 7061 00c4 7A69     		ldr	r2, [r7, #20]
 7062 00c6 1346     		mov	r3, r2
 7063 00c8 DB00     		lsls	r3, r3, #3
 7064 00ca 1344     		add	r3, r3, r2
 7065 00cc 9B00     		lsls	r3, r3, #2
 7066 00ce 1A46     		mov	r2, r3
 7067 00d0 BB68     		ldr	r3, [r7, #8]
 7068 00d2 1344     		add	r3, r3, r2
 7069              		.loc 1 4389 160 discriminator 2
 7070 00d4 1B8C     		ldrh	r3, [r3, #32]
 7071              		.loc 1 4389 5 discriminator 2
 7072 00d6 1C46     		mov	r4, r3
 7073              		.loc 1 4389 217 discriminator 2
 7074 00d8 7A69     		ldr	r2, [r7, #20]
 7075 00da 1346     		mov	r3, r2
 7076 00dc DB00     		lsls	r3, r3, #3
 7077 00de 1344     		add	r3, r3, r2
 7078 00e0 9B00     		lsls	r3, r3, #2
 7079 00e2 1A46     		mov	r2, r3
 7080 00e4 BB68     		ldr	r3, [r7, #8]
 7081 00e6 1344     		add	r3, r3, r2
 7082              		.loc 1 4389 222 discriminator 2
 7083 00e8 9B68     		ldr	r3, [r3, #8]
 7084              		.loc 1 4389 5 discriminator 2
 7085 00ea 0193     		str	r3, [sp, #4]
 7086 00ec 0094     		str	r4, [sp]
 7087 00ee 0346     		mov	r3, r0
 7088 00f0 0A46     		mov	r2, r1
 7089 00f2 0D49     		ldr	r1, .L465+4
 7090 00f4 7868     		ldr	r0, [r7, #4]
 7091 00f6 FFF7FEFF 		bl	sprintf
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
 7092              		.loc 1 4390 22 discriminator 2
 7093 00fa 7868     		ldr	r0, [r7, #4]
 7094 00fc FFF7FEFF 		bl	strlen
 7095 0100 0246     		mov	r2, r0
 7096              		.loc 1 4390 19 discriminator 2
 7097 0102 7B68     		ldr	r3, [r7, #4]
 7098 0104 1344     		add	r3, r3, r2
 7099 0106 7B60     		str	r3, [r7, #4]
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 7100              		.loc 1 4358 34 discriminator 2
 7101 0108 7B69     		ldr	r3, [r7, #20]
 7102 010a 0133     		adds	r3, r3, #1
 7103 010c 7B61     		str	r3, [r7, #20]
 7104              	.L454:
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 7105              		.loc 1 4358 4 discriminator 1
 7106 010e 7A69     		ldr	r2, [r7, #20]
 7107 0110 FB68     		ldr	r3, [r7, #12]
 7108 0112 9A42     		cmp	r2, r3
 7109 0114 94D3     		bcc	.L463
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc5hVFFU.s 			page 206


4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
 7110              		.loc 1 4395 4
 7111 0116 B868     		ldr	r0, [r7, #8]
 7112 0118 FFF7FEFF 		bl	vPortFree
 7113              	.L464:
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7114              		.loc 1 4401 2
 7115 011c 00BF     		nop
 7116 011e 1C37     		adds	r7, r7, #28
 7117              	.LCFI280:
 7118              		.cfi_def_cfa_offset 12
 7119 0120 BD46     		mov	sp, r7
 7120              	.LCFI281:
 7121              		.cfi_def_cfa_register 13
 7122              		@ sp needed
 7123 0122 90BD     		pop	{r4, r7, pc}
 7124              	.L466:
 7125              		.align	2
 7126              	.L465:
 7127 0124 00000000 		.word	uxCurrentNumberOfTasks
 7128 0128 08000000 		.word	.LC1
 7129              		.cfi_endproc
 7130              	.LFE61:
 7132              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 7133              		.align	1
 7134              		.global	uxTaskResetEventItemValue
 7135              		.syntax unified
 7136              		.thumb
 7137              		.thumb_func
 7138              		.fpu fpv4-sp-d16
 7140              	uxTaskResetEventItemValue:
 7141              	.LFB62:
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc5hVFFU.s 			page 207


4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
ARM GAS  /tmp/cc5hVFFU.s 			page 208


4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
ARM GAS  /tmp/cc5hVFFU.s 			page 209


4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 7142              		.loc 1 4534 1
 7143              		.cfi_startproc
 7144              		@ args = 0, pretend = 0, frame = 8
 7145              		@ frame_needed = 1, uses_anonymous_args = 0
 7146              		@ link register save eliminated.
 7147 0000 80B4     		push	{r7}
 7148              	.LCFI282:
 7149              		.cfi_def_cfa_offset 4
 7150              		.cfi_offset 7, -4
 7151 0002 83B0     		sub	sp, sp, #12
 7152              	.LCFI283:
 7153              		.cfi_def_cfa_offset 16
 7154 0004 00AF     		add	r7, sp, #0
 7155              	.LCFI284:
 7156              		.cfi_def_cfa_register 7
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 7157              		.loc 1 4537 13
 7158 0006 094B     		ldr	r3, .L469
 7159 0008 1B68     		ldr	r3, [r3]
 7160              		.loc 1 4537 11
 7161 000a 9B69     		ldr	r3, [r3, #24]
 7162 000c 7B60     		str	r3, [r7, #4]
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 7163              		.loc 1 4541 2
 7164 000e 074B     		ldr	r3, .L469
 7165 0010 1B68     		ldr	r3, [r3]
 7166 0012 DA6A     		ldr	r2, [r3, #44]
 7167 0014 054B     		ldr	r3, .L469
 7168 0016 1B68     		ldr	r3, [r3]
 7169 0018 C2F13802 		rsb	r2, r2, #56
 7170 001c 9A61     		str	r2, [r3, #24]
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 7171              		.loc 1 4543 9
 7172 001e 7B68     		ldr	r3, [r7, #4]
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 7173              		.loc 1 4544 1
 7174 0020 1846     		mov	r0, r3
 7175 0022 0C37     		adds	r7, r7, #12
 7176              	.LCFI285:
 7177              		.cfi_def_cfa_offset 4
 7178 0024 BD46     		mov	sp, r7
 7179              	.LCFI286:
 7180              		.cfi_def_cfa_register 13
 7181              		@ sp needed
 7182 0026 5DF8047B 		ldr	r7, [sp], #4
 7183              	.LCFI287:
 7184              		.cfi_restore 7
 7185              		.cfi_def_cfa_offset 0
 7186 002a 7047     		bx	lr
 7187              	.L470:
ARM GAS  /tmp/cc5hVFFU.s 			page 210


 7188              		.align	2
 7189              	.L469:
 7190 002c 00000000 		.word	pxCurrentTCB
 7191              		.cfi_endproc
 7192              	.LFE62:
 7194              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 7195              		.align	1
 7196              		.global	pvTaskIncrementMutexHeldCount
 7197              		.syntax unified
 7198              		.thumb
 7199              		.thumb_func
 7200              		.fpu fpv4-sp-d16
 7202              	pvTaskIncrementMutexHeldCount:
 7203              	.LFB63:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7204              		.loc 1 4550 2
 7205              		.cfi_startproc
 7206              		@ args = 0, pretend = 0, frame = 0
 7207              		@ frame_needed = 1, uses_anonymous_args = 0
 7208              		@ link register save eliminated.
 7209 0000 80B4     		push	{r7}
 7210              	.LCFI288:
 7211              		.cfi_def_cfa_offset 4
 7212              		.cfi_offset 7, -4
 7213 0002 00AF     		add	r7, sp, #0
 7214              	.LCFI289:
 7215              		.cfi_def_cfa_register 7
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 7216              		.loc 1 4553 20
 7217 0004 074B     		ldr	r3, .L474
 7218 0006 1B68     		ldr	r3, [r3]
 7219              		.loc 1 4553 5
 7220 0008 002B     		cmp	r3, #0
 7221 000a 04D0     		beq	.L472
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 7222              		.loc 1 4555 18
 7223 000c 054B     		ldr	r3, .L474
 7224 000e 1B68     		ldr	r3, [r3]
 7225 0010 1A6D     		ldr	r2, [r3, #80]
 7226              		.loc 1 4555 35
 7227 0012 0132     		adds	r2, r2, #1
 7228 0014 1A65     		str	r2, [r3, #80]
 7229              	.L472:
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 7230              		.loc 1 4558 10
 7231 0016 034B     		ldr	r3, .L474
 7232 0018 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc5hVFFU.s 			page 211


4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7233              		.loc 1 4559 2
 7234 001a 1846     		mov	r0, r3
 7235 001c BD46     		mov	sp, r7
 7236              	.LCFI290:
 7237              		.cfi_def_cfa_register 13
 7238              		@ sp needed
 7239 001e 5DF8047B 		ldr	r7, [sp], #4
 7240              	.LCFI291:
 7241              		.cfi_restore 7
 7242              		.cfi_def_cfa_offset 0
 7243 0022 7047     		bx	lr
 7244              	.L475:
 7245              		.align	2
 7246              	.L474:
 7247 0024 00000000 		.word	pxCurrentTCB
 7248              		.cfi_endproc
 7249              	.LFE63:
 7251              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 7252              		.align	1
 7253              		.global	ulTaskNotifyTake
 7254              		.syntax unified
 7255              		.thumb
 7256              		.thumb_func
 7257              		.fpu fpv4-sp-d16
 7259              	ulTaskNotifyTake:
 7260              	.LFB64:
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7261              		.loc 1 4567 2
 7262              		.cfi_startproc
 7263              		@ args = 0, pretend = 0, frame = 16
 7264              		@ frame_needed = 1, uses_anonymous_args = 0
 7265 0000 80B5     		push	{r7, lr}
 7266              	.LCFI292:
 7267              		.cfi_def_cfa_offset 8
 7268              		.cfi_offset 7, -8
 7269              		.cfi_offset 14, -4
 7270 0002 84B0     		sub	sp, sp, #16
 7271              	.LCFI293:
 7272              		.cfi_def_cfa_offset 24
 7273 0004 00AF     		add	r7, sp, #0
 7274              	.LCFI294:
 7275              		.cfi_def_cfa_register 7
 7276 0006 7860     		str	r0, [r7, #4]
 7277 0008 3960     		str	r1, [r7]
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7278              		.loc 1 4570 3
 7279 000a FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/cc5hVFFU.s 			page 212


4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 7280              		.loc 1 4573 20
 7281 000e 1E4B     		ldr	r3, .L482
 7282 0010 1B68     		ldr	r3, [r3]
 7283 0012 5B6D     		ldr	r3, [r3, #84]
 7284              		.loc 1 4573 6
 7285 0014 002B     		cmp	r3, #0
 7286 0016 13D1     		bne	.L477
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 7287              		.loc 1 4576 17
 7288 0018 1B4B     		ldr	r3, .L482
 7289 001a 1B68     		ldr	r3, [r3]
 7290              		.loc 1 4576 33
 7291 001c 0122     		movs	r2, #1
 7292 001e 83F85820 		strb	r2, [r3, #88]
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 7293              		.loc 1 4578 7
 7294 0022 3B68     		ldr	r3, [r7]
 7295 0024 002B     		cmp	r3, #0
 7296 0026 0BD0     		beq	.L477
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7297              		.loc 1 4580 6
 7298 0028 0121     		movs	r1, #1
 7299 002a 3868     		ldr	r0, [r7]
 7300 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 7301              		.loc 1 4587 6
 7302 0030 164B     		ldr	r3, .L482+4
 7303 0032 4FF08052 		mov	r2, #268435456
 7304 0036 1A60     		str	r2, [r3]
 7305              		.syntax unified
 7306              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7307 0038 BFF34F8F 		dsb
 7308              	@ 0 "" 2
 7309              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7310 003c BFF36F8F 		isb
 7311              	@ 0 "" 2
 7312              		.thumb
 7313              		.syntax unified
 7314              	.L477:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc5hVFFU.s 			page 213


4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7315              		.loc 1 4599 3
 7316 0040 FFF7FEFF 		bl	vPortExitCritical
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7317              		.loc 1 4601 3
 7318 0044 FFF7FEFF 		bl	vPortEnterCritical
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 7319              		.loc 1 4604 27
 7320 0048 0F4B     		ldr	r3, .L482
 7321 004a 1B68     		ldr	r3, [r3]
 7322              		.loc 1 4604 13
 7323 004c 5B6D     		ldr	r3, [r3, #84]
 7324 004e FB60     		str	r3, [r7, #12]
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 7325              		.loc 1 4606 6
 7326 0050 FB68     		ldr	r3, [r7, #12]
 7327 0052 002B     		cmp	r3, #0
 7328 0054 0CD0     		beq	.L478
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 7329              		.loc 1 4608 7
 7330 0056 7B68     		ldr	r3, [r7, #4]
 7331 0058 002B     		cmp	r3, #0
 7332 005a 04D0     		beq	.L479
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 7333              		.loc 1 4610 18
 7334 005c 0A4B     		ldr	r3, .L482
 7335 005e 1B68     		ldr	r3, [r3]
 7336              		.loc 1 4610 36
 7337 0060 0022     		movs	r2, #0
 7338 0062 5A65     		str	r2, [r3, #84]
 7339 0064 04E0     		b	.L478
 7340              	.L479:
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 7341              		.loc 1 4614 18
 7342 0066 084B     		ldr	r3, .L482
 7343 0068 1B68     		ldr	r3, [r3]
 7344              		.loc 1 4614 47
 7345 006a FA68     		ldr	r2, [r7, #12]
 7346 006c 013A     		subs	r2, r2, #1
 7347              		.loc 1 4614 36
 7348 006e 5A65     		str	r2, [r3, #84]
 7349              	.L478:
ARM GAS  /tmp/cc5hVFFU.s 			page 214


4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7350              		.loc 1 4622 16
 7351 0070 054B     		ldr	r3, .L482
 7352 0072 1B68     		ldr	r3, [r3]
 7353              		.loc 1 4622 32
 7354 0074 0022     		movs	r2, #0
 7355 0076 83F85820 		strb	r2, [r3, #88]
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7356              		.loc 1 4624 3
 7357 007a FFF7FEFF 		bl	vPortExitCritical
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 7358              		.loc 1 4626 10
 7359 007e FB68     		ldr	r3, [r7, #12]
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7360              		.loc 1 4627 2
 7361 0080 1846     		mov	r0, r3
 7362 0082 1037     		adds	r7, r7, #16
 7363              	.LCFI295:
 7364              		.cfi_def_cfa_offset 8
 7365 0084 BD46     		mov	sp, r7
 7366              	.LCFI296:
 7367              		.cfi_def_cfa_register 13
 7368              		@ sp needed
 7369 0086 80BD     		pop	{r7, pc}
 7370              	.L483:
 7371              		.align	2
 7372              	.L482:
 7373 0088 00000000 		.word	pxCurrentTCB
 7374 008c 04ED00E0 		.word	-536810236
 7375              		.cfi_endproc
 7376              	.LFE64:
 7378              		.section	.text.xTaskNotifyWait,"ax",%progbits
 7379              		.align	1
 7380              		.global	xTaskNotifyWait
 7381              		.syntax unified
 7382              		.thumb
 7383              		.thumb_func
 7384              		.fpu fpv4-sp-d16
 7386              	xTaskNotifyWait:
 7387              	.LFB65:
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/cc5hVFFU.s 			page 215


 7388              		.loc 1 4635 2
 7389              		.cfi_startproc
 7390              		@ args = 0, pretend = 0, frame = 24
 7391              		@ frame_needed = 1, uses_anonymous_args = 0
 7392 0000 80B5     		push	{r7, lr}
 7393              	.LCFI297:
 7394              		.cfi_def_cfa_offset 8
 7395              		.cfi_offset 7, -8
 7396              		.cfi_offset 14, -4
 7397 0002 86B0     		sub	sp, sp, #24
 7398              	.LCFI298:
 7399              		.cfi_def_cfa_offset 32
 7400 0004 00AF     		add	r7, sp, #0
 7401              	.LCFI299:
 7402              		.cfi_def_cfa_register 7
 7403 0006 F860     		str	r0, [r7, #12]
 7404 0008 B960     		str	r1, [r7, #8]
 7405 000a 7A60     		str	r2, [r7, #4]
 7406 000c 3B60     		str	r3, [r7]
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7407              		.loc 1 4638 3
 7408 000e FFF7FEFF 		bl	vPortEnterCritical
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7409              		.loc 1 4641 20
 7410 0012 264B     		ldr	r3, .L490
 7411 0014 1B68     		ldr	r3, [r3]
 7412 0016 93F85830 		ldrb	r3, [r3, #88]
 7413 001a DBB2     		uxtb	r3, r3
 7414              		.loc 1 4641 6
 7415 001c 022B     		cmp	r3, #2
 7416 001e 1AD0     		beq	.L485
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 7417              		.loc 1 4646 35
 7418 0020 224B     		ldr	r3, .L490
 7419 0022 1B68     		ldr	r3, [r3]
 7420 0024 596D     		ldr	r1, [r3, #84]
 7421              		.loc 1 4646 38
 7422 0026 FA68     		ldr	r2, [r7, #12]
 7423 0028 D243     		mvns	r2, r2
 7424              		.loc 1 4646 35
 7425 002a 0A40     		ands	r2, r2, r1
 7426 002c 5A65     		str	r2, [r3, #84]
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 7427              		.loc 1 4649 17
 7428 002e 1F4B     		ldr	r3, .L490
 7429 0030 1B68     		ldr	r3, [r3]
 7430              		.loc 1 4649 33
ARM GAS  /tmp/cc5hVFFU.s 			page 216


 7431 0032 0122     		movs	r2, #1
 7432 0034 83F85820 		strb	r2, [r3, #88]
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 7433              		.loc 1 4651 7
 7434 0038 3B68     		ldr	r3, [r7]
 7435 003a 002B     		cmp	r3, #0
 7436 003c 0BD0     		beq	.L485
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7437              		.loc 1 4653 6
 7438 003e 0121     		movs	r1, #1
 7439 0040 3868     		ldr	r0, [r7]
 7440 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 7441              		.loc 1 4660 6
 7442 0046 1A4B     		ldr	r3, .L490+4
 7443 0048 4FF08052 		mov	r2, #268435456
 7444 004c 1A60     		str	r2, [r3]
 7445              		.syntax unified
 7446              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7447 004e BFF34F8F 		dsb
 7448              	@ 0 "" 2
 7449              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7450 0052 BFF36F8F 		isb
 7451              	@ 0 "" 2
 7452              		.thumb
 7453              		.syntax unified
 7454              	.L485:
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7455              		.loc 1 4672 3
 7456 0056 FFF7FEFF 		bl	vPortExitCritical
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7457              		.loc 1 4674 3
 7458 005a FFF7FEFF 		bl	vPortEnterCritical
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
ARM GAS  /tmp/cc5hVFFU.s 			page 217


 7459              		.loc 1 4678 6
 7460 005e 7B68     		ldr	r3, [r7, #4]
 7461 0060 002B     		cmp	r3, #0
 7462 0062 04D0     		beq	.L486
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 7463              		.loc 1 4682 41
 7464 0064 114B     		ldr	r3, .L490
 7465 0066 1B68     		ldr	r3, [r3]
 7466 0068 5A6D     		ldr	r2, [r3, #84]
 7467              		.loc 1 4682 27
 7468 006a 7B68     		ldr	r3, [r7, #4]
 7469 006c 1A60     		str	r2, [r3]
 7470              	.L486:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7471              		.loc 1 4689 20
 7472 006e 0F4B     		ldr	r3, .L490
 7473 0070 1B68     		ldr	r3, [r3]
 7474 0072 93F85830 		ldrb	r3, [r3, #88]
 7475 0076 DBB2     		uxtb	r3, r3
 7476              		.loc 1 4689 6
 7477 0078 022B     		cmp	r3, #2
 7478 007a 02D0     		beq	.L487
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 7479              		.loc 1 4692 13
 7480 007c 0023     		movs	r3, #0
 7481 007e 7B61     		str	r3, [r7, #20]
 7482 0080 08E0     		b	.L488
 7483              	.L487:
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 7484              		.loc 1 4698 35
 7485 0082 0A4B     		ldr	r3, .L490
 7486 0084 1B68     		ldr	r3, [r3]
 7487 0086 596D     		ldr	r1, [r3, #84]
 7488              		.loc 1 4698 38
 7489 0088 BA68     		ldr	r2, [r7, #8]
 7490 008a D243     		mvns	r2, r2
 7491              		.loc 1 4698 35
 7492 008c 0A40     		ands	r2, r2, r1
 7493 008e 5A65     		str	r2, [r3, #84]
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 7494              		.loc 1 4699 13
ARM GAS  /tmp/cc5hVFFU.s 			page 218


 7495 0090 0123     		movs	r3, #1
 7496 0092 7B61     		str	r3, [r7, #20]
 7497              	.L488:
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7498              		.loc 1 4702 16
 7499 0094 054B     		ldr	r3, .L490
 7500 0096 1B68     		ldr	r3, [r3]
 7501              		.loc 1 4702 32
 7502 0098 0022     		movs	r2, #0
 7503 009a 83F85820 		strb	r2, [r3, #88]
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7504              		.loc 1 4704 3
 7505 009e FFF7FEFF 		bl	vPortExitCritical
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7506              		.loc 1 4706 10
 7507 00a2 7B69     		ldr	r3, [r7, #20]
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7508              		.loc 1 4707 2
 7509 00a4 1846     		mov	r0, r3
 7510 00a6 1837     		adds	r7, r7, #24
 7511              	.LCFI300:
 7512              		.cfi_def_cfa_offset 8
 7513 00a8 BD46     		mov	sp, r7
 7514              	.LCFI301:
 7515              		.cfi_def_cfa_register 13
 7516              		@ sp needed
 7517 00aa 80BD     		pop	{r7, pc}
 7518              	.L491:
 7519              		.align	2
 7520              	.L490:
 7521 00ac 00000000 		.word	pxCurrentTCB
 7522 00b0 04ED00E0 		.word	-536810236
 7523              		.cfi_endproc
 7524              	.LFE65:
 7526              		.section	.text.xTaskGenericNotify,"ax",%progbits
 7527              		.align	1
 7528              		.global	xTaskGenericNotify
 7529              		.syntax unified
 7530              		.thumb
 7531              		.thumb_func
 7532              		.fpu fpv4-sp-d16
 7534              	xTaskGenericNotify:
 7535              	.LFB66:
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7536              		.loc 1 4715 2
 7537              		.cfi_startproc
ARM GAS  /tmp/cc5hVFFU.s 			page 219


 7538              		@ args = 0, pretend = 0, frame = 40
 7539              		@ frame_needed = 1, uses_anonymous_args = 0
 7540 0000 80B5     		push	{r7, lr}
 7541              	.LCFI302:
 7542              		.cfi_def_cfa_offset 8
 7543              		.cfi_offset 7, -8
 7544              		.cfi_offset 14, -4
 7545 0002 8AB0     		sub	sp, sp, #40
 7546              	.LCFI303:
 7547              		.cfi_def_cfa_offset 48
 7548 0004 00AF     		add	r7, sp, #0
 7549              	.LCFI304:
 7550              		.cfi_def_cfa_register 7
 7551 0006 F860     		str	r0, [r7, #12]
 7552 0008 B960     		str	r1, [r7, #8]
 7553 000a 3B60     		str	r3, [r7]
 7554 000c 1346     		mov	r3, r2
 7555 000e FB71     		strb	r3, [r7, #7]
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7556              		.loc 1 4717 13
 7557 0010 0123     		movs	r3, #1
 7558 0012 7B62     		str	r3, [r7, #36]
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7559              		.loc 1 4720 3
 7560 0014 FB68     		ldr	r3, [r7, #12]
 7561 0016 002B     		cmp	r3, #0
 7562 0018 09D1     		bne	.L493
 7563              	.LBB218:
 7564              	.LBB219:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7565              		.loc 2 195 2 discriminator 1
 7566              		.syntax unified
 7567              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7568 001a 4FF05003 			mov r3, #80												
 7569 001e 83F31188 		msr basepri, r3											
 7570 0022 BFF36F8F 		isb														
 7571 0026 BFF34F8F 		dsb														
 7572              	
 7573              	@ 0 "" 2
 7574              		.thumb
 7575              		.syntax unified
 7576 002a BB61     		str	r3, [r7, #24]
 7577              	.L494:
 7578              	.LBE219:
 7579              	.LBE218:
 7580              		.loc 1 4720 3 discriminator 1
 7581 002c FEE7     		b	.L494
 7582              	.L493:
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7583              		.loc 1 4721 9
 7584 002e FB68     		ldr	r3, [r7, #12]
 7585 0030 3B62     		str	r3, [r7, #32]
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/cc5hVFFU.s 			page 220


 7586              		.loc 1 4723 3
 7587 0032 FFF7FEFF 		bl	vPortEnterCritical
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7588              		.loc 1 4725 6
 7589 0036 3B68     		ldr	r3, [r7]
 7590 0038 002B     		cmp	r3, #0
 7591 003a 03D0     		beq	.L495
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7592              		.loc 1 4727 42
 7593 003c 3B6A     		ldr	r3, [r7, #32]
 7594 003e 5A6D     		ldr	r2, [r3, #84]
 7595              		.loc 1 4727 35
 7596 0040 3B68     		ldr	r3, [r7]
 7597 0042 1A60     		str	r2, [r3]
 7598              	.L495:
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7599              		.loc 1 4730 26
 7600 0044 3B6A     		ldr	r3, [r7, #32]
 7601 0046 93F85830 		ldrb	r3, [r3, #88]
 7602 004a FB77     		strb	r3, [r7, #31]
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7603              		.loc 1 4732 25
 7604 004c 3B6A     		ldr	r3, [r7, #32]
 7605 004e 0222     		movs	r2, #2
 7606 0050 83F85820 		strb	r2, [r3, #88]
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7607              		.loc 1 4734 4
 7608 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7609 0056 042B     		cmp	r3, #4
 7610 0058 27D8     		bhi	.L496
 7611 005a 01A2     		adr	r2, .L498
 7612 005c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7613              		.p2align 2
 7614              	.L498:
 7615 0060 C9000000 		.word	.L513+1
 7616 0064 75000000 		.word	.L501+1
 7617 0068 83000000 		.word	.L500+1
 7618 006c 8F000000 		.word	.L499+1
 7619 0070 97000000 		.word	.L497+1
 7620              		.p2align 1
 7621              	.L501:
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7622              		.loc 1 4737 29
 7623 0074 3B6A     		ldr	r3, [r7, #32]
 7624 0076 5A6D     		ldr	r2, [r3, #84]
 7625 0078 BB68     		ldr	r3, [r7, #8]
 7626 007a 1A43     		orrs	r2, r2, r3
 7627 007c 3B6A     		ldr	r3, [r7, #32]
 7628 007e 5A65     		str	r2, [r3, #84]
ARM GAS  /tmp/cc5hVFFU.s 			page 221


4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7629              		.loc 1 4738 6
 7630 0080 25E0     		b	.L503
 7631              	.L500:
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7632              		.loc 1 4741 13
 7633 0082 3B6A     		ldr	r3, [r7, #32]
 7634 0084 5B6D     		ldr	r3, [r3, #84]
 7635              		.loc 1 4741 32
 7636 0086 5A1C     		adds	r2, r3, #1
 7637 0088 3B6A     		ldr	r3, [r7, #32]
 7638 008a 5A65     		str	r2, [r3, #84]
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7639              		.loc 1 4742 6
 7640 008c 1FE0     		b	.L503
 7641              	.L499:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7642              		.loc 1 4745 29
 7643 008e 3B6A     		ldr	r3, [r7, #32]
 7644 0090 BA68     		ldr	r2, [r7, #8]
 7645 0092 5A65     		str	r2, [r3, #84]
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7646              		.loc 1 4746 6
 7647 0094 1BE0     		b	.L503
 7648              	.L497:
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7649              		.loc 1 4749 8
 7650 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7651 0098 022B     		cmp	r3, #2
 7652 009a 03D0     		beq	.L504
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7653              		.loc 1 4751 30
 7654 009c 3B6A     		ldr	r3, [r7, #32]
 7655 009e BA68     		ldr	r2, [r7, #8]
 7656 00a0 5A65     		str	r2, [r3, #84]
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7657              		.loc 1 4758 6
 7658 00a2 14E0     		b	.L503
 7659              	.L504:
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7660              		.loc 1 4756 15
 7661 00a4 0023     		movs	r3, #0
 7662 00a6 7B62     		str	r3, [r7, #36]
 7663              		.loc 1 4758 6
ARM GAS  /tmp/cc5hVFFU.s 			page 222


 7664 00a8 11E0     		b	.L503
 7665              	.L496:
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7666              		.loc 1 4769 6
 7667 00aa 3B6A     		ldr	r3, [r7, #32]
 7668 00ac 5B6D     		ldr	r3, [r3, #84]
 7669 00ae B3F1FF3F 		cmp	r3, #-1
 7670 00b2 0BD0     		beq	.L514
 7671              	.LBB220:
 7672              	.LBB221:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7673              		.loc 2 195 2 discriminator 1
 7674              		.syntax unified
 7675              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7676 00b4 4FF05003 			mov r3, #80												
 7677 00b8 83F31188 		msr basepri, r3											
 7678 00bc BFF36F8F 		isb														
 7679 00c0 BFF34F8F 		dsb														
 7680              	
 7681              	@ 0 "" 2
 7682              		.thumb
 7683              		.syntax unified
 7684 00c4 7B61     		str	r3, [r7, #20]
 7685              	.L507:
 7686              	.LBE221:
 7687              	.LBE220:
 7688              		.loc 1 4769 6 discriminator 2
 7689 00c6 FEE7     		b	.L507
 7690              	.L513:
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7691              		.loc 1 4763 6
 7692 00c8 00BF     		nop
 7693 00ca 00E0     		b	.L503
 7694              	.L514:
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7695              		.loc 1 4771 6
 7696 00cc 00BF     		nop
 7697              	.L503:
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7698              		.loc 1 4778 6
ARM GAS  /tmp/cc5hVFFU.s 			page 223


 7699 00ce FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7700 00d0 012B     		cmp	r3, #1
 7701 00d2 39D1     		bne	.L508
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7702              		.loc 1 4780 14
 7703 00d4 3B6A     		ldr	r3, [r7, #32]
 7704 00d6 0433     		adds	r3, r3, #4
 7705 00d8 1846     		mov	r0, r3
 7706 00da FFF7FEFF 		bl	uxListRemove
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7707              		.loc 1 4781 5
 7708 00de 3B6A     		ldr	r3, [r7, #32]
 7709 00e0 DA6A     		ldr	r2, [r3, #44]
 7710 00e2 1D4B     		ldr	r3, .L515
 7711 00e4 1B68     		ldr	r3, [r3]
 7712 00e6 9A42     		cmp	r2, r3
 7713 00e8 03D9     		bls	.L509
 7714              		.loc 1 4781 5 is_stmt 0 discriminator 1
 7715 00ea 3B6A     		ldr	r3, [r7, #32]
 7716 00ec DB6A     		ldr	r3, [r3, #44]
 7717 00ee 1A4A     		ldr	r2, .L515
 7718 00f0 1360     		str	r3, [r2]
 7719              	.L509:
 7720              		.loc 1 4781 5 discriminator 3
 7721 00f2 3B6A     		ldr	r3, [r7, #32]
 7722 00f4 DA6A     		ldr	r2, [r3, #44]
 7723 00f6 1346     		mov	r3, r2
 7724 00f8 9B00     		lsls	r3, r3, #2
 7725 00fa 1344     		add	r3, r3, r2
 7726 00fc 9B00     		lsls	r3, r3, #2
 7727 00fe 174A     		ldr	r2, .L515+4
 7728 0100 1A44     		add	r2, r2, r3
 7729 0102 3B6A     		ldr	r3, [r7, #32]
 7730 0104 0433     		adds	r3, r3, #4
 7731 0106 1946     		mov	r1, r3
 7732 0108 1046     		mov	r0, r2
 7733 010a FFF7FEFF 		bl	vListInsertEnd
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7734              		.loc 1 4784 5 is_stmt 1 discriminator 3
 7735 010e 3B6A     		ldr	r3, [r7, #32]
 7736 0110 9B6A     		ldr	r3, [r3, #40]
 7737 0112 002B     		cmp	r3, #0
 7738 0114 09D0     		beq	.L510
 7739              	.LBB222:
 7740              	.LBB223:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7741              		.loc 2 195 2 discriminator 1
 7742              		.syntax unified
 7743              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7744 0116 4FF05003 			mov r3, #80												
 7745 011a 83F31188 		msr basepri, r3											
 7746 011e BFF36F8F 		isb														
 7747 0122 BFF34F8F 		dsb														
 7748              	
ARM GAS  /tmp/cc5hVFFU.s 			page 224


 7749              	@ 0 "" 2
 7750              		.thumb
 7751              		.syntax unified
 7752 0126 3B61     		str	r3, [r7, #16]
 7753              	.L511:
 7754              	.LBE223:
 7755              	.LBE222:
 7756              		.loc 1 4784 5 discriminator 3
 7757 0128 FEE7     		b	.L511
 7758              	.L510:
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7759              		.loc 1 4802 14
 7760 012a 3B6A     		ldr	r3, [r7, #32]
 7761 012c DA6A     		ldr	r2, [r3, #44]
 7762              		.loc 1 4802 41
 7763 012e 0C4B     		ldr	r3, .L515+8
 7764 0130 1B68     		ldr	r3, [r3]
 7765 0132 DB6A     		ldr	r3, [r3, #44]
 7766              		.loc 1 4802 7
 7767 0134 9A42     		cmp	r2, r3
 7768 0136 07D9     		bls	.L508
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 7769              		.loc 1 4806 6
 7770 0138 0A4B     		ldr	r3, .L515+12
 7771 013a 4FF08052 		mov	r2, #268435456
 7772 013e 1A60     		str	r2, [r3]
 7773              		.syntax unified
 7774              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7775 0140 BFF34F8F 		dsb
 7776              	@ 0 "" 2
 7777              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7778 0144 BFF36F8F 		isb
 7779              	@ 0 "" 2
 7780              		.thumb
 7781              		.syntax unified
 7782              	.L508:
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc5hVFFU.s 			page 225


4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7783              		.loc 1 4818 3
 7784 0148 FFF7FEFF 		bl	vPortExitCritical
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7785              		.loc 1 4820 10
 7786 014c 7B6A     		ldr	r3, [r7, #36]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7787              		.loc 1 4821 2
 7788 014e 1846     		mov	r0, r3
 7789 0150 2837     		adds	r7, r7, #40
 7790              	.LCFI305:
 7791              		.cfi_def_cfa_offset 8
 7792 0152 BD46     		mov	sp, r7
 7793              	.LCFI306:
 7794              		.cfi_def_cfa_register 13
 7795              		@ sp needed
 7796 0154 80BD     		pop	{r7, pc}
 7797              	.L516:
 7798 0156 00BF     		.align	2
 7799              	.L515:
 7800 0158 00000000 		.word	uxTopReadyPriority
 7801 015c 00000000 		.word	pxReadyTasksLists
 7802 0160 00000000 		.word	pxCurrentTCB
 7803 0164 04ED00E0 		.word	-536810236
 7804              		.cfi_endproc
 7805              	.LFE66:
 7807              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7808              		.align	1
 7809              		.global	xTaskGenericNotifyFromISR
 7810              		.syntax unified
 7811              		.thumb
 7812              		.thumb_func
 7813              		.fpu fpv4-sp-d16
 7815              	xTaskGenericNotifyFromISR:
 7816              	.LFB67:
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7817              		.loc 1 4829 2
 7818              		.cfi_startproc
 7819              		@ args = 4, pretend = 0, frame = 56
ARM GAS  /tmp/cc5hVFFU.s 			page 226


 7820              		@ frame_needed = 1, uses_anonymous_args = 0
 7821 0000 80B5     		push	{r7, lr}
 7822              	.LCFI307:
 7823              		.cfi_def_cfa_offset 8
 7824              		.cfi_offset 7, -8
 7825              		.cfi_offset 14, -4
 7826 0002 8EB0     		sub	sp, sp, #56
 7827              	.LCFI308:
 7828              		.cfi_def_cfa_offset 64
 7829 0004 00AF     		add	r7, sp, #0
 7830              	.LCFI309:
 7831              		.cfi_def_cfa_register 7
 7832 0006 F860     		str	r0, [r7, #12]
 7833 0008 B960     		str	r1, [r7, #8]
 7834 000a 3B60     		str	r3, [r7]
 7835 000c 1346     		mov	r3, r2
 7836 000e FB71     		strb	r3, [r7, #7]
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7837              		.loc 1 4832 13
 7838 0010 0123     		movs	r3, #1
 7839 0012 7B63     		str	r3, [r7, #52]
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7840              		.loc 1 4835 3
 7841 0014 FB68     		ldr	r3, [r7, #12]
 7842 0016 002B     		cmp	r3, #0
 7843 0018 09D1     		bne	.L518
 7844              	.LBB224:
 7845              	.LBB225:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7846              		.loc 2 195 2 discriminator 1
 7847              		.syntax unified
 7848              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7849 001a 4FF05003 			mov r3, #80												
 7850 001e 83F31188 		msr basepri, r3											
 7851 0022 BFF36F8F 		isb														
 7852 0026 BFF34F8F 		dsb														
 7853              	
 7854              	@ 0 "" 2
 7855              		.thumb
 7856              		.syntax unified
 7857 002a 7B62     		str	r3, [r7, #36]
 7858              	.L519:
 7859              	.LBE225:
 7860              	.LBE224:
 7861              		.loc 1 4835 3 discriminator 1
 7862 002c FEE7     		b	.L519
 7863              	.L518:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
ARM GAS  /tmp/cc5hVFFU.s 			page 227


4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7864              		.loc 1 4853 3
 7865 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7866              		.loc 1 4855 9
 7867 0032 FB68     		ldr	r3, [r7, #12]
 7868 0034 3B63     		str	r3, [r7, #48]
 7869              	.LBB226:
 7870              	.LBB227:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7871              		.loc 2 211 2
 7872              		.syntax unified
 7873              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7874 0036 EFF31182 			mrs r2, basepri											
 7875 003a 4FF05003 		mov r3, #80												
 7876 003e 83F31188 		msr basepri, r3											
 7877 0042 BFF36F8F 		isb														
 7878 0046 BFF34F8F 		dsb														
 7879              	
 7880              	@ 0 "" 2
 7881              		.thumb
 7882              		.syntax unified
 7883 004a 3A62     		str	r2, [r7, #32]
 7884 004c FB61     		str	r3, [r7, #28]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7885              		.loc 2 223 9
 7886 004e 3B6A     		ldr	r3, [r7, #32]
 7887              	.LBE227:
 7888              	.LBE226:
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7889              		.loc 1 4857 28
 7890 0050 FB62     		str	r3, [r7, #44]
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7891              		.loc 1 4859 6
 7892 0052 3B68     		ldr	r3, [r7]
 7893 0054 002B     		cmp	r3, #0
 7894 0056 03D0     		beq	.L521
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7895              		.loc 1 4861 42
 7896 0058 3B6B     		ldr	r3, [r7, #48]
 7897 005a 5A6D     		ldr	r2, [r3, #84]
 7898              		.loc 1 4861 35
ARM GAS  /tmp/cc5hVFFU.s 			page 228


 7899 005c 3B68     		ldr	r3, [r7]
 7900 005e 1A60     		str	r2, [r3]
 7901              	.L521:
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7902              		.loc 1 4864 26
 7903 0060 3B6B     		ldr	r3, [r7, #48]
 7904 0062 93F85830 		ldrb	r3, [r3, #88]
 7905 0066 87F82B30 		strb	r3, [r7, #43]
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7906              		.loc 1 4865 25
 7907 006a 3B6B     		ldr	r3, [r7, #48]
 7908 006c 0222     		movs	r2, #2
 7909 006e 83F85820 		strb	r2, [r3, #88]
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7910              		.loc 1 4867 4
 7911 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7912 0074 042B     		cmp	r3, #4
 7913 0076 29D8     		bhi	.L522
 7914 0078 01A2     		adr	r2, .L524
 7915 007a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7916 007e 00BF     		.p2align 2
 7917              	.L524:
 7918 0080 EB000000 		.word	.L542+1
 7919 0084 95000000 		.word	.L527+1
 7920 0088 A3000000 		.word	.L526+1
 7921 008c AF000000 		.word	.L525+1
 7922 0090 B7000000 		.word	.L523+1
 7923              		.p2align 1
 7924              	.L527:
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7925              		.loc 1 4870 29
 7926 0094 3B6B     		ldr	r3, [r7, #48]
 7927 0096 5A6D     		ldr	r2, [r3, #84]
 7928 0098 BB68     		ldr	r3, [r7, #8]
 7929 009a 1A43     		orrs	r2, r2, r3
 7930 009c 3B6B     		ldr	r3, [r7, #48]
 7931 009e 5A65     		str	r2, [r3, #84]
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7932              		.loc 1 4871 6
 7933 00a0 26E0     		b	.L529
 7934              	.L526:
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7935              		.loc 1 4874 13
 7936 00a2 3B6B     		ldr	r3, [r7, #48]
 7937 00a4 5B6D     		ldr	r3, [r3, #84]
 7938              		.loc 1 4874 32
 7939 00a6 5A1C     		adds	r2, r3, #1
 7940 00a8 3B6B     		ldr	r3, [r7, #48]
 7941 00aa 5A65     		str	r2, [r3, #84]
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  /tmp/cc5hVFFU.s 			page 229


 7942              		.loc 1 4875 6
 7943 00ac 20E0     		b	.L529
 7944              	.L525:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7945              		.loc 1 4878 29
 7946 00ae 3B6B     		ldr	r3, [r7, #48]
 7947 00b0 BA68     		ldr	r2, [r7, #8]
 7948 00b2 5A65     		str	r2, [r3, #84]
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7949              		.loc 1 4879 6
 7950 00b4 1CE0     		b	.L529
 7951              	.L523:
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7952              		.loc 1 4882 8
 7953 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7954 00ba 022B     		cmp	r3, #2
 7955 00bc 03D0     		beq	.L530
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7956              		.loc 1 4884 30
 7957 00be 3B6B     		ldr	r3, [r7, #48]
 7958 00c0 BA68     		ldr	r2, [r7, #8]
 7959 00c2 5A65     		str	r2, [r3, #84]
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7960              		.loc 1 4891 6
 7961 00c4 14E0     		b	.L529
 7962              	.L530:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7963              		.loc 1 4889 15
 7964 00c6 0023     		movs	r3, #0
 7965 00c8 7B63     		str	r3, [r7, #52]
 7966              		.loc 1 4891 6
 7967 00ca 11E0     		b	.L529
 7968              	.L522:
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7969              		.loc 1 4902 6
 7970 00cc 3B6B     		ldr	r3, [r7, #48]
ARM GAS  /tmp/cc5hVFFU.s 			page 230


 7971 00ce 5B6D     		ldr	r3, [r3, #84]
 7972 00d0 B3F1FF3F 		cmp	r3, #-1
 7973 00d4 0BD0     		beq	.L543
 7974              	.LBB228:
 7975              	.LBB229:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7976              		.loc 2 195 2 discriminator 1
 7977              		.syntax unified
 7978              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7979 00d6 4FF05003 			mov r3, #80												
 7980 00da 83F31188 		msr basepri, r3											
 7981 00de BFF36F8F 		isb														
 7982 00e2 BFF34F8F 		dsb														
 7983              	
 7984              	@ 0 "" 2
 7985              		.thumb
 7986              		.syntax unified
 7987 00e6 BB61     		str	r3, [r7, #24]
 7988              	.L533:
 7989              	.LBE229:
 7990              	.LBE228:
 7991              		.loc 1 4902 6 discriminator 2
 7992 00e8 FEE7     		b	.L533
 7993              	.L542:
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7994              		.loc 1 4896 6
 7995 00ea 00BF     		nop
 7996 00ec 00E0     		b	.L529
 7997              	.L543:
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7998              		.loc 1 4903 6
 7999 00ee 00BF     		nop
 8000              	.L529:
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001              		.loc 1 4910 6
 8002 00f0 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 8003 00f4 012B     		cmp	r3, #1
 8004 00f6 45D1     		bne	.L534
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005              		.loc 1 4913 5
 8006 00f8 3B6B     		ldr	r3, [r7, #48]
 8007 00fa 9B6A     		ldr	r3, [r3, #40]
 8008 00fc 002B     		cmp	r3, #0
 8009 00fe 09D0     		beq	.L535
 8010              	.LBB230:
 8011              	.LBB231:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8012              		.loc 2 195 2 discriminator 1
 8013              		.syntax unified
ARM GAS  /tmp/cc5hVFFU.s 			page 231


 8014              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8015 0100 4FF05003 			mov r3, #80												
 8016 0104 83F31188 		msr basepri, r3											
 8017 0108 BFF36F8F 		isb														
 8018 010c BFF34F8F 		dsb														
 8019              	
 8020              	@ 0 "" 2
 8021              		.thumb
 8022              		.syntax unified
 8023 0110 7B61     		str	r3, [r7, #20]
 8024              	.L536:
 8025              	.LBE231:
 8026              	.LBE230:
 8027              		.loc 1 4913 5 discriminator 3
 8028 0112 FEE7     		b	.L536
 8029              	.L535:
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8030              		.loc 1 4915 30
 8031 0114 204B     		ldr	r3, .L544
 8032 0116 1B68     		ldr	r3, [r3]
 8033              		.loc 1 4915 7
 8034 0118 002B     		cmp	r3, #0
 8035 011a 1DD1     		bne	.L537
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8036              		.loc 1 4917 15
 8037 011c 3B6B     		ldr	r3, [r7, #48]
 8038 011e 0433     		adds	r3, r3, #4
 8039 0120 1846     		mov	r0, r3
 8040 0122 FFF7FEFF 		bl	uxListRemove
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 8041              		.loc 1 4918 6
 8042 0126 3B6B     		ldr	r3, [r7, #48]
 8043 0128 DA6A     		ldr	r2, [r3, #44]
 8044 012a 1C4B     		ldr	r3, .L544+4
 8045 012c 1B68     		ldr	r3, [r3]
 8046 012e 9A42     		cmp	r2, r3
 8047 0130 03D9     		bls	.L538
 8048              		.loc 1 4918 6 is_stmt 0 discriminator 1
 8049 0132 3B6B     		ldr	r3, [r7, #48]
 8050 0134 DB6A     		ldr	r3, [r3, #44]
 8051 0136 194A     		ldr	r2, .L544+4
 8052 0138 1360     		str	r3, [r2]
 8053              	.L538:
 8054              		.loc 1 4918 6 discriminator 3
 8055 013a 3B6B     		ldr	r3, [r7, #48]
 8056 013c DA6A     		ldr	r2, [r3, #44]
 8057 013e 1346     		mov	r3, r2
 8058 0140 9B00     		lsls	r3, r3, #2
 8059 0142 1344     		add	r3, r3, r2
 8060 0144 9B00     		lsls	r3, r3, #2
 8061 0146 164A     		ldr	r2, .L544+8
 8062 0148 1A44     		add	r2, r2, r3
 8063 014a 3B6B     		ldr	r3, [r7, #48]
 8064 014c 0433     		adds	r3, r3, #4
 8065 014e 1946     		mov	r1, r3
ARM GAS  /tmp/cc5hVFFU.s 			page 232


 8066 0150 1046     		mov	r0, r2
 8067 0152 FFF7FEFF 		bl	vListInsertEnd
 8068 0156 05E0     		b	.L539
 8069              	.L537:
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8070              		.loc 1 4924 6 is_stmt 1
 8071 0158 3B6B     		ldr	r3, [r7, #48]
 8072 015a 1833     		adds	r3, r3, #24
 8073 015c 1946     		mov	r1, r3
 8074 015e 1148     		ldr	r0, .L544+12
 8075 0160 FFF7FEFF 		bl	vListInsertEnd
 8076              	.L539:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8077              		.loc 1 4927 14
 8078 0164 3B6B     		ldr	r3, [r7, #48]
 8079 0166 DA6A     		ldr	r2, [r3, #44]
 8080              		.loc 1 4927 41
 8081 0168 0F4B     		ldr	r3, .L544+16
 8082 016a 1B68     		ldr	r3, [r3]
 8083 016c DB6A     		ldr	r3, [r3, #44]
 8084              		.loc 1 4927 7
 8085 016e 9A42     		cmp	r2, r3
 8086 0170 08D9     		bls	.L534
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 8087              		.loc 1 4931 8
 8088 0172 3B6C     		ldr	r3, [r7, #64]
 8089 0174 002B     		cmp	r3, #0
 8090 0176 02D0     		beq	.L540
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 8091              		.loc 1 4933 34
 8092 0178 3B6C     		ldr	r3, [r7, #64]
 8093 017a 0122     		movs	r2, #1
 8094 017c 1A60     		str	r2, [r3]
 8095              	.L540:
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 8096              		.loc 1 4939 20
 8097 017e 0B4B     		ldr	r3, .L544+20
 8098 0180 0122     		movs	r2, #1
 8099 0182 1A60     		str	r2, [r3]
 8100              	.L534:
 8101 0184 FB6A     		ldr	r3, [r7, #44]
ARM GAS  /tmp/cc5hVFFU.s 			page 233


 8102 0186 3B61     		str	r3, [r7, #16]
 8103              	.LBB232:
 8104              	.LBB233:
 8105              		.loc 2 229 2
 8106 0188 3B69     		ldr	r3, [r7, #16]
 8107              		.syntax unified
 8108              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8109 018a 83F31188 			msr basepri, r3	
 8110              	@ 0 "" 2
 8111              		.thumb
 8112              		.syntax unified
 8113              	.LBE233:
 8114              	.LBE232:
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 8115              		.loc 1 4949 10
 8116 018e 7B6B     		ldr	r3, [r7, #52]
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8117              		.loc 1 4950 2
 8118 0190 1846     		mov	r0, r3
 8119 0192 3837     		adds	r7, r7, #56
 8120              	.LCFI310:
 8121              		.cfi_def_cfa_offset 8
 8122 0194 BD46     		mov	sp, r7
 8123              	.LCFI311:
 8124              		.cfi_def_cfa_register 13
 8125              		@ sp needed
 8126 0196 80BD     		pop	{r7, pc}
 8127              	.L545:
 8128              		.align	2
 8129              	.L544:
 8130 0198 00000000 		.word	uxSchedulerSuspended
 8131 019c 00000000 		.word	uxTopReadyPriority
 8132 01a0 00000000 		.word	pxReadyTasksLists
 8133 01a4 00000000 		.word	xPendingReadyList
 8134 01a8 00000000 		.word	pxCurrentTCB
 8135 01ac 00000000 		.word	xYieldPending
 8136              		.cfi_endproc
 8137              	.LFE67:
 8139              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 8140              		.align	1
 8141              		.global	vTaskNotifyGiveFromISR
 8142              		.syntax unified
 8143              		.thumb
 8144              		.thumb_func
 8145              		.fpu fpv4-sp-d16
 8147              	vTaskNotifyGiveFromISR:
 8148              	.LFB68:
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc5hVFFU.s 			page 234


4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 8149              		.loc 1 4958 2
 8150              		.cfi_startproc
 8151              		@ args = 0, pretend = 0, frame = 40
 8152              		@ frame_needed = 1, uses_anonymous_args = 0
 8153 0000 80B5     		push	{r7, lr}
 8154              	.LCFI312:
 8155              		.cfi_def_cfa_offset 8
 8156              		.cfi_offset 7, -8
 8157              		.cfi_offset 14, -4
 8158 0002 8AB0     		sub	sp, sp, #40
 8159              	.LCFI313:
 8160              		.cfi_def_cfa_offset 48
 8161 0004 00AF     		add	r7, sp, #0
 8162              	.LCFI314:
 8163              		.cfi_def_cfa_register 7
 8164 0006 7860     		str	r0, [r7, #4]
 8165 0008 3960     		str	r1, [r7]
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 8166              		.loc 1 4963 3
 8167 000a 7B68     		ldr	r3, [r7, #4]
 8168 000c 002B     		cmp	r3, #0
 8169 000e 09D1     		bne	.L547
 8170              	.LBB234:
 8171              	.LBB235:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8172              		.loc 2 195 2 discriminator 1
 8173              		.syntax unified
 8174              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8175 0010 4FF05003 			mov r3, #80												
 8176 0014 83F31188 		msr basepri, r3											
 8177 0018 BFF36F8F 		isb														
 8178 001c BFF34F8F 		dsb														
 8179              	
 8180              	@ 0 "" 2
 8181              		.thumb
 8182              		.syntax unified
 8183 0020 BB61     		str	r3, [r7, #24]
 8184              	.L548:
 8185              	.LBE235:
 8186              	.LBE234:
 8187              		.loc 1 4963 3 discriminator 1
 8188 0022 FEE7     		b	.L548
 8189              	.L547:
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
ARM GAS  /tmp/cc5hVFFU.s 			page 235


4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8190              		.loc 1 4981 3
 8191 0024 FFF7FEFF 		bl	vPortValidateInterruptPriority
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 8192              		.loc 1 4983 9
 8193 0028 7B68     		ldr	r3, [r7, #4]
 8194 002a 7B62     		str	r3, [r7, #36]
 8195              	.LBB236:
 8196              	.LBB237:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8197              		.loc 2 211 2
 8198              		.syntax unified
 8199              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8200 002c EFF31182 			mrs r2, basepri											
 8201 0030 4FF05003 		mov r3, #80												
 8202 0034 83F31188 		msr basepri, r3											
 8203 0038 BFF36F8F 		isb														
 8204 003c BFF34F8F 		dsb														
 8205              	
 8206              	@ 0 "" 2
 8207              		.thumb
 8208              		.syntax unified
 8209 0040 7A61     		str	r2, [r7, #20]
 8210 0042 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 8211              		.loc 2 223 9
 8212 0044 7B69     		ldr	r3, [r7, #20]
 8213              	.LBE237:
 8214              	.LBE236:
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8215              		.loc 1 4985 28
 8216 0046 3B62     		str	r3, [r7, #32]
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8217              		.loc 1 4987 26
 8218 0048 7B6A     		ldr	r3, [r7, #36]
 8219 004a 93F85830 		ldrb	r3, [r3, #88]
 8220 004e FB77     		strb	r3, [r7, #31]
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8221              		.loc 1 4988 25
 8222 0050 7B6A     		ldr	r3, [r7, #36]
ARM GAS  /tmp/cc5hVFFU.s 			page 236


 8223 0052 0222     		movs	r2, #2
 8224 0054 83F85820 		strb	r2, [r3, #88]
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 8225              		.loc 1 4992 11
 8226 0058 7B6A     		ldr	r3, [r7, #36]
 8227 005a 5B6D     		ldr	r3, [r3, #84]
 8228              		.loc 1 4992 30
 8229 005c 5A1C     		adds	r2, r3, #1
 8230 005e 7B6A     		ldr	r3, [r7, #36]
 8231 0060 5A65     		str	r2, [r3, #84]
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8232              		.loc 1 4998 6
 8233 0062 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 8234 0064 012B     		cmp	r3, #1
 8235 0066 45D1     		bne	.L550
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8236              		.loc 1 5001 5
 8237 0068 7B6A     		ldr	r3, [r7, #36]
 8238 006a 9B6A     		ldr	r3, [r3, #40]
 8239 006c 002B     		cmp	r3, #0
 8240 006e 09D0     		beq	.L551
 8241              	.LBB238:
 8242              	.LBB239:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8243              		.loc 2 195 2 discriminator 1
 8244              		.syntax unified
 8245              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8246 0070 4FF05003 			mov r3, #80												
 8247 0074 83F31188 		msr basepri, r3											
 8248 0078 BFF36F8F 		isb														
 8249 007c BFF34F8F 		dsb														
 8250              	
 8251              	@ 0 "" 2
 8252              		.thumb
 8253              		.syntax unified
 8254 0080 FB60     		str	r3, [r7, #12]
 8255              	.L552:
 8256              	.LBE239:
 8257              	.LBE238:
 8258              		.loc 1 5001 5 discriminator 2
 8259 0082 FEE7     		b	.L552
 8260              	.L551:
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8261              		.loc 1 5003 30
 8262 0084 204B     		ldr	r3, .L557
 8263 0086 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc5hVFFU.s 			page 237


 8264              		.loc 1 5003 7
 8265 0088 002B     		cmp	r3, #0
 8266 008a 1DD1     		bne	.L553
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8267              		.loc 1 5005 15
 8268 008c 7B6A     		ldr	r3, [r7, #36]
 8269 008e 0433     		adds	r3, r3, #4
 8270 0090 1846     		mov	r0, r3
 8271 0092 FFF7FEFF 		bl	uxListRemove
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 8272              		.loc 1 5006 6
 8273 0096 7B6A     		ldr	r3, [r7, #36]
 8274 0098 DA6A     		ldr	r2, [r3, #44]
 8275 009a 1C4B     		ldr	r3, .L557+4
 8276 009c 1B68     		ldr	r3, [r3]
 8277 009e 9A42     		cmp	r2, r3
 8278 00a0 03D9     		bls	.L554
 8279              		.loc 1 5006 6 is_stmt 0 discriminator 1
 8280 00a2 7B6A     		ldr	r3, [r7, #36]
 8281 00a4 DB6A     		ldr	r3, [r3, #44]
 8282 00a6 194A     		ldr	r2, .L557+4
 8283 00a8 1360     		str	r3, [r2]
 8284              	.L554:
 8285              		.loc 1 5006 6 discriminator 3
 8286 00aa 7B6A     		ldr	r3, [r7, #36]
 8287 00ac DA6A     		ldr	r2, [r3, #44]
 8288 00ae 1346     		mov	r3, r2
 8289 00b0 9B00     		lsls	r3, r3, #2
 8290 00b2 1344     		add	r3, r3, r2
 8291 00b4 9B00     		lsls	r3, r3, #2
 8292 00b6 164A     		ldr	r2, .L557+8
 8293 00b8 1A44     		add	r2, r2, r3
 8294 00ba 7B6A     		ldr	r3, [r7, #36]
 8295 00bc 0433     		adds	r3, r3, #4
 8296 00be 1946     		mov	r1, r3
 8297 00c0 1046     		mov	r0, r2
 8298 00c2 FFF7FEFF 		bl	vListInsertEnd
 8299 00c6 05E0     		b	.L555
 8300              	.L553:
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8301              		.loc 1 5012 6 is_stmt 1
 8302 00c8 7B6A     		ldr	r3, [r7, #36]
 8303 00ca 1833     		adds	r3, r3, #24
 8304 00cc 1946     		mov	r1, r3
 8305 00ce 1148     		ldr	r0, .L557+12
 8306 00d0 FFF7FEFF 		bl	vListInsertEnd
 8307              	.L555:
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8308              		.loc 1 5015 14
ARM GAS  /tmp/cc5hVFFU.s 			page 238


 8309 00d4 7B6A     		ldr	r3, [r7, #36]
 8310 00d6 DA6A     		ldr	r2, [r3, #44]
 8311              		.loc 1 5015 41
 8312 00d8 0F4B     		ldr	r3, .L557+16
 8313 00da 1B68     		ldr	r3, [r3]
 8314 00dc DB6A     		ldr	r3, [r3, #44]
 8315              		.loc 1 5015 7
 8316 00de 9A42     		cmp	r2, r3
 8317 00e0 08D9     		bls	.L550
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 8318              		.loc 1 5019 8
 8319 00e2 3B68     		ldr	r3, [r7]
 8320 00e4 002B     		cmp	r3, #0
 8321 00e6 02D0     		beq	.L556
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 8322              		.loc 1 5021 34
 8323 00e8 3B68     		ldr	r3, [r7]
 8324 00ea 0122     		movs	r2, #1
 8325 00ec 1A60     		str	r2, [r3]
 8326              	.L556:
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 8327              		.loc 1 5027 20
 8328 00ee 0B4B     		ldr	r3, .L557+20
 8329 00f0 0122     		movs	r2, #1
 8330 00f2 1A60     		str	r2, [r3]
 8331              	.L550:
 8332 00f4 3B6A     		ldr	r3, [r7, #32]
 8333 00f6 BB60     		str	r3, [r7, #8]
 8334              	.LBB240:
 8335              	.LBB241:
 8336              		.loc 2 229 2
 8337 00f8 BB68     		ldr	r3, [r7, #8]
 8338              		.syntax unified
 8339              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8340 00fa 83F31188 			msr basepri, r3	
 8341              	@ 0 "" 2
 8342              		.thumb
 8343              		.syntax unified
 8344              	.LBE241:
 8345              	.LBE240:
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
ARM GAS  /tmp/cc5hVFFU.s 			page 239


5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8346              		.loc 1 5036 2
 8347 00fe 00BF     		nop
 8348 0100 2837     		adds	r7, r7, #40
 8349              	.LCFI315:
 8350              		.cfi_def_cfa_offset 8
 8351 0102 BD46     		mov	sp, r7
 8352              	.LCFI316:
 8353              		.cfi_def_cfa_register 13
 8354              		@ sp needed
 8355 0104 80BD     		pop	{r7, pc}
 8356              	.L558:
 8357 0106 00BF     		.align	2
 8358              	.L557:
 8359 0108 00000000 		.word	uxSchedulerSuspended
 8360 010c 00000000 		.word	uxTopReadyPriority
 8361 0110 00000000 		.word	pxReadyTasksLists
 8362 0114 00000000 		.word	xPendingReadyList
 8363 0118 00000000 		.word	pxCurrentTCB
 8364 011c 00000000 		.word	xYieldPending
 8365              		.cfi_endproc
 8366              	.LFE68:
 8368              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 8369              		.align	1
 8370              		.global	xTaskNotifyStateClear
 8371              		.syntax unified
 8372              		.thumb
 8373              		.thumb_func
 8374              		.fpu fpv4-sp-d16
 8376              	xTaskNotifyStateClear:
 8377              	.LFB69:
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 8378              		.loc 1 5045 2
 8379              		.cfi_startproc
 8380              		@ args = 0, pretend = 0, frame = 16
 8381              		@ frame_needed = 1, uses_anonymous_args = 0
 8382 0000 80B5     		push	{r7, lr}
 8383              	.LCFI317:
 8384              		.cfi_def_cfa_offset 8
 8385              		.cfi_offset 7, -8
 8386              		.cfi_offset 14, -4
 8387 0002 84B0     		sub	sp, sp, #16
 8388              	.LCFI318:
 8389              		.cfi_def_cfa_offset 24
 8390 0004 00AF     		add	r7, sp, #0
 8391              	.LCFI319:
 8392              		.cfi_def_cfa_register 7
 8393 0006 7860     		str	r0, [r7, #4]
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/cc5hVFFU.s 			page 240


5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 8394              		.loc 1 5051 11
 8395 0008 7B68     		ldr	r3, [r7, #4]
 8396 000a 002B     		cmp	r3, #0
 8397 000c 02D1     		bne	.L560
 8398              		.loc 1 5051 11 is_stmt 0 discriminator 1
 8399 000e 0E4B     		ldr	r3, .L565
 8400 0010 1B68     		ldr	r3, [r3]
 8401 0012 00E0     		b	.L561
 8402              	.L560:
 8403              		.loc 1 5051 11 discriminator 2
 8404 0014 7B68     		ldr	r3, [r7, #4]
 8405              	.L561:
 8406              		.loc 1 5051 9 is_stmt 1 discriminator 4
 8407 0016 BB60     		str	r3, [r7, #8]
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 8408              		.loc 1 5053 3 discriminator 4
 8409 0018 FFF7FEFF 		bl	vPortEnterCritical
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8410              		.loc 1 5055 13 discriminator 4
 8411 001c BB68     		ldr	r3, [r7, #8]
 8412 001e 93F85830 		ldrb	r3, [r3, #88]
 8413 0022 DBB2     		uxtb	r3, r3
 8414              		.loc 1 5055 6 discriminator 4
 8415 0024 022B     		cmp	r3, #2
 8416 0026 06D1     		bne	.L562
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8417              		.loc 1 5057 26
 8418 0028 BB68     		ldr	r3, [r7, #8]
 8419 002a 0022     		movs	r2, #0
 8420 002c 83F85820 		strb	r2, [r3, #88]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 8421              		.loc 1 5058 13
 8422 0030 0123     		movs	r3, #1
 8423 0032 FB60     		str	r3, [r7, #12]
 8424 0034 01E0     		b	.L563
 8425              	.L562:
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 8426              		.loc 1 5062 13
 8427 0036 0023     		movs	r3, #0
 8428 0038 FB60     		str	r3, [r7, #12]
 8429              	.L563:
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 8430              		.loc 1 5065 3
 8431 003a FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/cc5hVFFU.s 			page 241


5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 8432              		.loc 1 5067 10
 8433 003e FB68     		ldr	r3, [r7, #12]
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8434              		.loc 1 5068 2
 8435 0040 1846     		mov	r0, r3
 8436 0042 1037     		adds	r7, r7, #16
 8437              	.LCFI320:
 8438              		.cfi_def_cfa_offset 8
 8439 0044 BD46     		mov	sp, r7
 8440              	.LCFI321:
 8441              		.cfi_def_cfa_register 13
 8442              		@ sp needed
 8443 0046 80BD     		pop	{r7, pc}
 8444              	.L566:
 8445              		.align	2
 8446              	.L565:
 8447 0048 00000000 		.word	pxCurrentTCB
 8448              		.cfi_endproc
 8449              	.LFE69:
 8451              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 8452              		.align	1
 8453              		.syntax unified
 8454              		.thumb
 8455              		.thumb_func
 8456              		.fpu fpv4-sp-d16
 8458              	prvAddCurrentTaskToDelayedList:
 8459              	.LFB70:
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 8460              		.loc 1 5082 1
 8461              		.cfi_startproc
 8462              		@ args = 0, pretend = 0, frame = 16
 8463              		@ frame_needed = 1, uses_anonymous_args = 0
 8464 0000 80B5     		push	{r7, lr}
 8465              	.LCFI322:
 8466              		.cfi_def_cfa_offset 8
 8467              		.cfi_offset 7, -8
 8468              		.cfi_offset 14, -4
 8469 0002 84B0     		sub	sp, sp, #16
 8470              	.LCFI323:
 8471              		.cfi_def_cfa_offset 24
 8472 0004 00AF     		add	r7, sp, #0
 8473              	.LCFI324:
ARM GAS  /tmp/cc5hVFFU.s 			page 242


 8474              		.cfi_def_cfa_register 7
 8475 0006 7860     		str	r0, [r7, #4]
 8476 0008 3960     		str	r1, [r7]
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 8477              		.loc 1 5084 18
 8478 000a 214B     		ldr	r3, .L572
 8479 000c 1B68     		ldr	r3, [r3]
 8480 000e FB60     		str	r3, [r7, #12]
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8481              		.loc 1 5097 35
 8482 0010 204B     		ldr	r3, .L572+4
 8483 0012 1B68     		ldr	r3, [r3]
 8484              		.loc 1 5097 6
 8485 0014 0433     		adds	r3, r3, #4
 8486 0016 1846     		mov	r0, r3
 8487 0018 FFF7FEFF 		bl	uxListRemove
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8488              		.loc 1 5110 5
 8489 001c 7B68     		ldr	r3, [r7, #4]
 8490 001e B3F1FF3F 		cmp	r3, #-1
 8491 0022 0AD1     		bne	.L568
 8492              		.loc 1 5110 41 discriminator 1
 8493 0024 3B68     		ldr	r3, [r7]
 8494 0026 002B     		cmp	r3, #0
 8495 0028 07D0     		beq	.L568
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8496              		.loc 1 5115 56
 8497 002a 1A4B     		ldr	r3, .L572+4
ARM GAS  /tmp/cc5hVFFU.s 			page 243


 8498 002c 1B68     		ldr	r3, [r3]
 8499              		.loc 1 5115 4
 8500 002e 0433     		adds	r3, r3, #4
 8501 0030 1946     		mov	r1, r3
 8502 0032 1948     		ldr	r0, .L572+8
 8503 0034 FFF7FEFF 		bl	vListInsertEnd
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
ARM GAS  /tmp/cc5hVFFU.s 			page 244


5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 8504              		.loc 1 5190 1
 8505 0038 26E0     		b	.L571
 8506              	.L568:
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8507              		.loc 1 5122 16
 8508 003a FA68     		ldr	r2, [r7, #12]
 8509 003c 7B68     		ldr	r3, [r7, #4]
 8510 003e 1344     		add	r3, r3, r2
 8511 0040 BB60     		str	r3, [r7, #8]
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8512              		.loc 1 5125 4
 8513 0042 144B     		ldr	r3, .L572+4
 8514 0044 1B68     		ldr	r3, [r3]
 8515 0046 BA68     		ldr	r2, [r7, #8]
 8516 0048 5A60     		str	r2, [r3, #4]
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 8517              		.loc 1 5127 6
 8518 004a BA68     		ldr	r2, [r7, #8]
 8519 004c FB68     		ldr	r3, [r7, #12]
 8520 004e 9A42     		cmp	r2, r3
 8521 0050 09D2     		bcs	.L570
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8522              		.loc 1 5131 5
 8523 0052 124B     		ldr	r3, .L572+12
 8524 0054 1A68     		ldr	r2, [r3]
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8525              		.loc 1 5131 60
 8526 0056 0F4B     		ldr	r3, .L572+4
 8527 0058 1B68     		ldr	r3, [r3]
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8528              		.loc 1 5131 5
 8529 005a 0433     		adds	r3, r3, #4
 8530 005c 1946     		mov	r1, r3
ARM GAS  /tmp/cc5hVFFU.s 			page 245


 8531 005e 1046     		mov	r0, r2
 8532 0060 FFF7FEFF 		bl	vListInsert
 8533              		.loc 1 5190 1
 8534 0064 10E0     		b	.L571
 8535              	.L570:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8536              		.loc 1 5137 5
 8537 0066 0E4B     		ldr	r3, .L572+16
 8538 0068 1A68     		ldr	r2, [r3]
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8539              		.loc 1 5137 52
 8540 006a 0A4B     		ldr	r3, .L572+4
 8541 006c 1B68     		ldr	r3, [r3]
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8542              		.loc 1 5137 5
 8543 006e 0433     		adds	r3, r3, #4
 8544 0070 1946     		mov	r1, r3
 8545 0072 1046     		mov	r0, r2
 8546 0074 FFF7FEFF 		bl	vListInsert
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8547              		.loc 1 5142 21
 8548 0078 0A4B     		ldr	r3, .L572+20
 8549 007a 1B68     		ldr	r3, [r3]
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8550              		.loc 1 5142 7
 8551 007c BA68     		ldr	r2, [r7, #8]
 8552 007e 9A42     		cmp	r2, r3
 8553 0080 02D2     		bcs	.L571
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 8554              		.loc 1 5144 27
 8555 0082 084A     		ldr	r2, .L572+20
 8556 0084 BB68     		ldr	r3, [r7, #8]
 8557 0086 1360     		str	r3, [r2]
 8558              	.L571:
 8559              		.loc 1 5190 1
 8560 0088 00BF     		nop
 8561 008a 1037     		adds	r7, r7, #16
 8562              	.LCFI325:
 8563              		.cfi_def_cfa_offset 8
 8564 008c BD46     		mov	sp, r7
 8565              	.LCFI326:
 8566              		.cfi_def_cfa_register 13
 8567              		@ sp needed
 8568 008e 80BD     		pop	{r7, pc}
 8569              	.L573:
 8570              		.align	2
 8571              	.L572:
 8572 0090 00000000 		.word	xTickCount
 8573 0094 00000000 		.word	pxCurrentTCB
 8574 0098 00000000 		.word	xSuspendedTaskList
 8575 009c 00000000 		.word	pxOverflowDelayedTaskList
 8576 00a0 00000000 		.word	pxDelayedTaskList
 8577 00a4 00000000 		.word	xNextTaskUnblockTime
 8578              		.cfi_endproc
 8579              	.LFE70:
 8581              		.text
 8582              	.Letext0:
ARM GAS  /tmp/cc5hVFFU.s 			page 246


 8583              		.file 3 "/home/mego-ros2/microros_ws/firmware/toolchain/lib/gcc/arm-none-eabi/8.3.1/include/stddef
 8584              		.file 4 "/home/mego-ros2/microros_ws/firmware/toolchain/arm-none-eabi/include/machine/_default_typ
 8585              		.file 5 "/home/mego-ros2/microros_ws/firmware/toolchain/arm-none-eabi/include/sys/_types.h"
 8586              		.file 6 "/home/mego-ros2/microros_ws/firmware/toolchain/arm-none-eabi/include/sys/reent.h"
 8587              		.file 7 "/home/mego-ros2/microros_ws/firmware/toolchain/arm-none-eabi/include/sys/lock.h"
 8588              		.file 8 "/home/mego-ros2/microros_ws/firmware/toolchain/arm-none-eabi/include/stdlib.h"
 8589              		.file 9 "/home/mego-ros2/microros_ws/firmware/toolchain/arm-none-eabi/include/sys/_stdint.h"
 8590              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 8591              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 8592              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 8593              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 8594              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/cc5hVFFU.s 			page 247


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/cc5hVFFU.s:22     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/cc5hVFFU.s:19     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/cc5hVFFU.s:25     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/cc5hVFFU.s:28     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/cc5hVFFU.s:31     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/cc5hVFFU.s:34     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/cc5hVFFU.s:37     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/cc5hVFFU.s:40     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/cc5hVFFU.s:43     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/cc5hVFFU.s:46     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/cc5hVFFU.s:49     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/cc5hVFFU.s:52     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/cc5hVFFU.s:55     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/cc5hVFFU.s:58     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/cc5hVFFU.s:61     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/cc5hVFFU.s:64     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/cc5hVFFU.s:67     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/cc5hVFFU.s:70     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/cc5hVFFU.s:73     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/cc5hVFFU.s:76     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/cc5hVFFU.s:83     .bss.FreeRTOS_errno:0000000000000000 FreeRTOS_errno
     /tmp/cc5hVFFU.s:80     .bss.FreeRTOS_errno:0000000000000000 $d
     /tmp/cc5hVFFU.s:86     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/cc5hVFFU.s:89     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/cc5hVFFU.s:92     .bss.xTickCount:0000000000000000 $d
     /tmp/cc5hVFFU.s:95     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/cc5hVFFU.s:98     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/cc5hVFFU.s:101    .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/cc5hVFFU.s:104    .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/cc5hVFFU.s:107    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/cc5hVFFU.s:110    .bss.uxPendedTicks:0000000000000000 $d
     /tmp/cc5hVFFU.s:113    .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/cc5hVFFU.s:116    .bss.xYieldPending:0000000000000000 $d
     /tmp/cc5hVFFU.s:119    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/cc5hVFFU.s:122    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/cc5hVFFU.s:125    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/cc5hVFFU.s:128    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/cc5hVFFU.s:131    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/cc5hVFFU.s:134    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/cc5hVFFU.s:137    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/cc5hVFFU.s:140    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/cc5hVFFU.s:143    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/cc5hVFFU.s:146    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/cc5hVFFU.s:149    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/cc5hVFFU.s:152    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/cc5hVFFU.s:160    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/cc5hVFFU.s:441    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/cc5hVFFU.s:657    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/cc5hVFFU.s:320    .text.xTaskCreate:0000000000000000 $t
     /tmp/cc5hVFFU.s:327    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/cc5hVFFU.s:435    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/cc5hVFFU.s:651    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/cc5hVFFU.s:5370   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/cc5hVFFU.s:807    .text.prvAddNewTaskToReadyList:00000000000000c4 $d
     /tmp/cc5hVFFU.s:818    .text.vTaskDelete:0000000000000000 $t
ARM GAS  /tmp/cc5hVFFU.s 			page 248


     /tmp/cc5hVFFU.s:825    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/cc5hVFFU.s:5995   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/cc5hVFFU.s:6088   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/cc5hVFFU.s:982    .text.vTaskDelete:00000000000000c4 $d
     /tmp/cc5hVFFU.s:994    .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/cc5hVFFU.s:1001   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/cc5hVFFU.s:2760   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/cc5hVFFU.s:8458   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/cc5hVFFU.s:2807   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/cc5hVFFU.s:1202   .text.vTaskDelayUntil:00000000000000e8 $d
     /tmp/cc5hVFFU.s:1209   .text.vTaskDelay:0000000000000000 $t
     /tmp/cc5hVFFU.s:1216   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/cc5hVFFU.s:1307   .text.vTaskDelay:0000000000000060 $d
     /tmp/cc5hVFFU.s:1313   .text.eTaskGetState:0000000000000000 $t
     /tmp/cc5hVFFU.s:1320   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/cc5hVFFU.s:1476   .text.eTaskGetState:00000000000000b8 $d
     /tmp/cc5hVFFU.s:1485   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/cc5hVFFU.s:1492   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/cc5hVFFU.s:1547   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/cc5hVFFU.s:1552   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/cc5hVFFU.s:1559   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/cc5hVFFU.s:1648   .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/cc5hVFFU.s:1653   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/cc5hVFFU.s:1660   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/cc5hVFFU.s:1888   .text.vTaskPrioritySet:0000000000000128 $d
     /tmp/cc5hVFFU.s:1896   .text.vTaskSuspend:0000000000000000 $t
     /tmp/cc5hVFFU.s:1903   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/cc5hVFFU.s:4076   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/cc5hVFFU.s:2073   .text.vTaskSuspend:00000000000000d0 $d
     /tmp/cc5hVFFU.s:2083   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/cc5hVFFU.s:2089   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/cc5hVFFU.s:2180   .text.prvTaskIsTaskSuspended:0000000000000058 $d
     /tmp/cc5hVFFU.s:2186   .text.vTaskResume:0000000000000000 $t
     /tmp/cc5hVFFU.s:2193   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/cc5hVFFU.s:2330   .text.vTaskResume:00000000000000ac $d
     /tmp/cc5hVFFU.s:2338   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/cc5hVFFU.s:2345   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/cc5hVFFU.s:2514   .text.xTaskResumeFromISR:00000000000000cc $d
     /tmp/cc5hVFFU.s:2523   .rodata:0000000000000000 $d
     /tmp/cc5hVFFU.s:2527   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/cc5hVFFU.s:2534   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/cc5hVFFU.s:2679   .text.vTaskStartScheduler:00000000000000b0 $d
     /tmp/cc5hVFFU.s:5313   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/cc5hVFFU.s:2689   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/cc5hVFFU.s:2696   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/cc5hVFFU.s:2748   .text.vTaskEndScheduler:000000000000002c $d
     /tmp/cc5hVFFU.s:2753   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/cc5hVFFU.s:2795   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/cc5hVFFU.s:2800   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/cc5hVFFU.s:3810   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/cc5hVFFU.s:3024   .text.xTaskResumeAll:0000000000000114 $d
     /tmp/cc5hVFFU.s:3037   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/cc5hVFFU.s:3044   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/cc5hVFFU.s:3084   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/cc5hVFFU.s:3089   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/cc5hVFFU.s:3096   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/cc5hVFFU.s:3137   .text.xTaskGetTickCountFromISR:0000000000000020 $d
ARM GAS  /tmp/cc5hVFFU.s 			page 249


     /tmp/cc5hVFFU.s:3142   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/cc5hVFFU.s:3149   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/cc5hVFFU.s:3180   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/cc5hVFFU.s:3185   .text.pcTaskGetName:0000000000000000 $t
     /tmp/cc5hVFFU.s:3192   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/cc5hVFFU.s:3268   .text.pcTaskGetName:0000000000000044 $d
     /tmp/cc5hVFFU.s:3273   .text.prvSearchForNameWithinSingleList:0000000000000000 $t
     /tmp/cc5hVFFU.s:3279   .text.prvSearchForNameWithinSingleList:0000000000000000 prvSearchForNameWithinSingleList
     /tmp/cc5hVFFU.s:3457   .text.xTaskGetHandle:0000000000000000 $t
     /tmp/cc5hVFFU.s:3464   .text.xTaskGetHandle:0000000000000000 xTaskGetHandle
     /tmp/cc5hVFFU.s:3604   .text.xTaskGetHandle:00000000000000b4 $d
     /tmp/cc5hVFFU.s:3613   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/cc5hVFFU.s:3620   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/cc5hVFFU.s:5723   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/cc5hVFFU.s:3793   .text.uxTaskGetSystemState:0000000000000104 $d
     /tmp/cc5hVFFU.s:3803   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/cc5hVFFU.s:4054   .text.xTaskIncrementTick:0000000000000144 $d
     /tmp/cc5hVFFU.s:4069   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/cc5hVFFU.s:4228   .text.vTaskSwitchContext:00000000000000b8 $d
     /tmp/cc5hVFFU.s:4238   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/cc5hVFFU.s:4245   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/cc5hVFFU.s:4313   .text.vTaskPlaceOnEventList:0000000000000044 $d
     /tmp/cc5hVFFU.s:4318   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/cc5hVFFU.s:4325   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/cc5hVFFU.s:4425   .text.vTaskPlaceOnUnorderedEventList:000000000000006c $d
     /tmp/cc5hVFFU.s:4431   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/cc5hVFFU.s:4438   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/cc5hVFFU.s:4515   .text.vTaskPlaceOnEventListRestricted:0000000000000050 $d
     /tmp/cc5hVFFU.s:4520   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/cc5hVFFU.s:4527   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/cc5hVFFU.s:4665   .text.xTaskRemoveFromEventList:00000000000000ac $d
     /tmp/cc5hVFFU.s:4675   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/cc5hVFFU.s:4682   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/cc5hVFFU.s:4822   .text.vTaskRemoveFromUnorderedEventList:00000000000000ac $d
     /tmp/cc5hVFFU.s:4831   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/cc5hVFFU.s:4838   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/cc5hVFFU.s:4907   .text.vTaskSetTimeOutState:0000000000000044 $d
     /tmp/cc5hVFFU.s:4913   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/cc5hVFFU.s:4920   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/cc5hVFFU.s:4965   .text.vTaskInternalSetTimeOutState:0000000000000024 $d
     /tmp/cc5hVFFU.s:4971   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/cc5hVFFU.s:4978   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/cc5hVFFU.s:5139   .text.xTaskCheckForTimeOut:00000000000000b8 $d
     /tmp/cc5hVFFU.s:5145   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/cc5hVFFU.s:5152   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/cc5hVFFU.s:5184   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/cc5hVFFU.s:5189   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/cc5hVFFU.s:5196   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/cc5hVFFU.s:5251   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/cc5hVFFU.s:5258   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/cc5hVFFU.s:5307   .text.prvIdleTask:0000000000000000 $t
     /tmp/cc5hVFFU.s:5466   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/cc5hVFFU.s:5358   .text.prvIdleTask:0000000000000028 $d
     /tmp/cc5hVFFU.s:5364   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/cc5hVFFU.s:5448   .text.prvInitialiseTaskLists:0000000000000060 $d
     /tmp/cc5hVFFU.s:5460   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/cc5hVFFU.s:5538   .text.prvCheckTasksWaitingTermination:000000000000004c $d
ARM GAS  /tmp/cc5hVFFU.s 			page 250


     /tmp/cc5hVFFU.s:5545   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/cc5hVFFU.s:5552   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/cc5hVFFU.s:5856   .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/cc5hVFFU.s:5712   .text.vTaskGetInfo:00000000000000c8 $d
     /tmp/cc5hVFFU.s:5717   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/cc5hVFFU.s:5850   .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/cc5hVFFU.s:5920   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/cc5hVFFU.s:5927   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/cc5hVFFU.s:5984   .text.uxTaskGetStackHighWaterMark:0000000000000034 $d
     /tmp/cc5hVFFU.s:5989   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/cc5hVFFU.s:6082   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/cc5hVFFU.s:6150   .text.prvResetNextTaskUnblockTime:0000000000000038 $d
     /tmp/cc5hVFFU.s:6156   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/cc5hVFFU.s:6163   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/cc5hVFFU.s:6203   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/cc5hVFFU.s:6208   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/cc5hVFFU.s:6215   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/cc5hVFFU.s:6277   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/cc5hVFFU.s:6283   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/cc5hVFFU.s:6290   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/cc5hVFFU.s:6439   .text.xTaskPriorityInherit:00000000000000c4 $d
     /tmp/cc5hVFFU.s:6446   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/cc5hVFFU.s:6453   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/cc5hVFFU.s:6617   .text.xTaskPriorityDisinherit:00000000000000cc $d
     /tmp/cc5hVFFU.s:6624   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/cc5hVFFU.s:6631   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/cc5hVFFU.s:6821   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000f4 $d
     /tmp/cc5hVFFU.s:6828   .text.prvWriteNameToBuffer:0000000000000000 $t
     /tmp/cc5hVFFU.s:6834   .text.prvWriteNameToBuffer:0000000000000000 prvWriteNameToBuffer
     /tmp/cc5hVFFU.s:6909   .text.vTaskList:0000000000000000 $t
     /tmp/cc5hVFFU.s:6916   .text.vTaskList:0000000000000000 vTaskList
     /tmp/cc5hVFFU.s:6989   .text.vTaskList:000000000000005c $d
     /tmp/cc5hVFFU.s:6994   .text.vTaskList:0000000000000070 $t
     /tmp/cc5hVFFU.s:7127   .text.vTaskList:0000000000000124 $d
     /tmp/cc5hVFFU.s:7133   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/cc5hVFFU.s:7140   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/cc5hVFFU.s:7190   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/cc5hVFFU.s:7195   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/cc5hVFFU.s:7202   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/cc5hVFFU.s:7247   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/cc5hVFFU.s:7252   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/cc5hVFFU.s:7259   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/cc5hVFFU.s:7373   .text.ulTaskNotifyTake:0000000000000088 $d
     /tmp/cc5hVFFU.s:7379   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/cc5hVFFU.s:7386   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/cc5hVFFU.s:7521   .text.xTaskNotifyWait:00000000000000ac $d
     /tmp/cc5hVFFU.s:7527   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/cc5hVFFU.s:7534   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/cc5hVFFU.s:7615   .text.xTaskGenericNotify:0000000000000060 $d
     /tmp/cc5hVFFU.s:7620   .text.xTaskGenericNotify:0000000000000074 $t
     /tmp/cc5hVFFU.s:7800   .text.xTaskGenericNotify:0000000000000158 $d
     /tmp/cc5hVFFU.s:7808   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/cc5hVFFU.s:7815   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/cc5hVFFU.s:7918   .text.xTaskGenericNotifyFromISR:0000000000000080 $d
     /tmp/cc5hVFFU.s:7923   .text.xTaskGenericNotifyFromISR:0000000000000094 $t
     /tmp/cc5hVFFU.s:8130   .text.xTaskGenericNotifyFromISR:0000000000000198 $d
     /tmp/cc5hVFFU.s:8140   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
ARM GAS  /tmp/cc5hVFFU.s 			page 251


     /tmp/cc5hVFFU.s:8147   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/cc5hVFFU.s:8359   .text.vTaskNotifyGiveFromISR:0000000000000108 $d
     /tmp/cc5hVFFU.s:8369   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/cc5hVFFU.s:8376   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/cc5hVFFU.s:8447   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/cc5hVFFU.s:8452   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/cc5hVFFU.s:8572   .text.prvAddCurrentTaskToDelayedList:0000000000000090 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
strlen
vListInsert
vListInitialise
strcpy
sprintf
