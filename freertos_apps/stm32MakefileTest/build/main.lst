ARM GAS  /tmp/ccmefYBc.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata
  18              		.align	2
  19              	.LC0:
  20 0000 7072696E 		.ascii	"printf is ready \015\000"
  20      74662069 
  20      73207265 
  20      61647920 
  20      0D00
  21              		.section	.text.main,"ax",%progbits
  22              		.align	1
  23              		.global	main
  24              		.arch armv7e-m
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  28              		.fpu fpv4-sp-d16
  30              	main:
  31              	.LFB137:
  32              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
ARM GAS  /tmp/ccmefYBc.s 			page 2


  23:Core/Src/main.c **** #include "dma.h"
  24:Core/Src/main.c **** #include "lwip.h"
  25:Core/Src/main.c **** #include "tim.h"
  26:Core/Src/main.c **** #include "usart.h"
  27:Core/Src/main.c **** #include "gpio.h"
  28:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  30:Core/Src/main.c **** #include "retarget.h"
  31:Core/Src/main.c **** /* USER CODE END Includes */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PD */
  40:Core/Src/main.c **** /* USER CODE END PD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  43:Core/Src/main.c **** /* USER CODE BEGIN PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* USER CODE END PM */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE BEGIN PV */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE END PV */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  54:Core/Src/main.c **** void SystemClock_Config(void);
  55:Core/Src/main.c **** void MX_FREERTOS_Init(void);
  56:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* USER CODE END PFP */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  61:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* USER CODE END 0 */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /**
  66:Core/Src/main.c ****   * @brief  The application entry point.
  67:Core/Src/main.c ****   * @retval int
  68:Core/Src/main.c ****   */
  69:Core/Src/main.c **** int main(void)
  70:Core/Src/main.c **** {
  33              		.loc 1 70 1
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
ARM GAS  /tmp/ccmefYBc.s 			page 3


  42 0002 00AF     		add	r7, sp, #0
  43              	.LCFI1:
  44              		.cfi_def_cfa_register 7
  71:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c ****   /* USER CODE END 1 */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  76:Core/Src/main.c **** 
  77:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  78:Core/Src/main.c ****   HAL_Init();
  45              		.loc 1 78 3
  46 0004 FFF7FEFF 		bl	HAL_Init
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c ****   /* USER CODE END Init */
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* Configure the system clock */
  85:Core/Src/main.c ****   SystemClock_Config();
  47              		.loc 1 85 3
  48 0008 FFF7FEFF 		bl	SystemClock_Config
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* USER CODE END SysInit */
  90:Core/Src/main.c **** 
  91:Core/Src/main.c ****   /* Initialize all configured peripherals */
  92:Core/Src/main.c ****   MX_GPIO_Init();
  49              		.loc 1 92 3
  50 000c FFF7FEFF 		bl	MX_GPIO_Init
  93:Core/Src/main.c ****   MX_DMA_Init();
  51              		.loc 1 93 3
  52 0010 FFF7FEFF 		bl	MX_DMA_Init
  94:Core/Src/main.c ****   MX_USART1_UART_Init();
  53              		.loc 1 94 3
  54 0014 FFF7FEFF 		bl	MX_USART1_UART_Init
  95:Core/Src/main.c ****   MX_TIM9_Init();
  55              		.loc 1 95 3
  56 0018 FFF7FEFF 		bl	MX_TIM9_Init
  96:Core/Src/main.c ****   MX_TIM6_Init();
  57              		.loc 1 96 3
  58 001c FFF7FEFF 		bl	MX_TIM6_Init
  97:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
  98:Core/Src/main.c **** //  Retarget_Init(&huart1);
  99:Core/Src/main.c **** //  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 100:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim6);
  59              		.loc 1 100 3
  60 0020 0648     		ldr	r0, .L3
  61 0022 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   printf("printf is ready \r\n");
  62              		.loc 1 102 3
  63 0026 0648     		ldr	r0, .L3+4
  64 0028 FFF7FEFF 		bl	puts
 103:Core/Src/main.c ****   /* USER CODE END 2 */
 104:Core/Src/main.c **** 
ARM GAS  /tmp/ccmefYBc.s 			page 4


 105:Core/Src/main.c ****   /* Init scheduler */
 106:Core/Src/main.c ****   osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
  65              		.loc 1 106 3
  66 002c FFF7FEFF 		bl	osKernelInitialize
 107:Core/Src/main.c ****   MX_FREERTOS_Init();
  67              		.loc 1 107 3
  68 0030 FFF7FEFF 		bl	MX_FREERTOS_Init
 108:Core/Src/main.c ****   /* Start scheduler */
 109:Core/Src/main.c ****   osKernelStart();
  69              		.loc 1 109 3
  70 0034 FFF7FEFF 		bl	osKernelStart
  71              	.L2:
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 112:Core/Src/main.c ****   /* Infinite loop */
 113:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 114:Core/Src/main.c ****   while (1)
  72              		.loc 1 114 9 discriminator 1
  73 0038 FEE7     		b	.L2
  74              	.L4:
  75 003a 00BF     		.align	2
  76              	.L3:
  77 003c 00000000 		.word	htim6
  78 0040 00000000 		.word	.LC0
  79              		.cfi_endproc
  80              	.LFE137:
  82              		.section	.text.SystemClock_Config,"ax",%progbits
  83              		.align	1
  84              		.global	SystemClock_Config
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  88              		.fpu fpv4-sp-d16
  90              	SystemClock_Config:
  91              	.LFB138:
 115:Core/Src/main.c ****   {
 116:Core/Src/main.c ****     /* USER CODE END WHILE */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 119:Core/Src/main.c ****   }
 120:Core/Src/main.c ****   /* USER CODE END 3 */
 121:Core/Src/main.c **** }
 122:Core/Src/main.c **** 
 123:Core/Src/main.c **** /**
 124:Core/Src/main.c ****   * @brief System Clock Configuration
 125:Core/Src/main.c ****   * @retval None
 126:Core/Src/main.c ****   */
 127:Core/Src/main.c **** void SystemClock_Config(void)
 128:Core/Src/main.c **** {
  92              		.loc 1 128 1
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 80
  95              		@ frame_needed = 1, uses_anonymous_args = 0
  96 0000 80B5     		push	{r7, lr}
  97              	.LCFI2:
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 7, -8
ARM GAS  /tmp/ccmefYBc.s 			page 5


 100              		.cfi_offset 14, -4
 101 0002 94B0     		sub	sp, sp, #80
 102              	.LCFI3:
 103              		.cfi_def_cfa_offset 88
 104 0004 00AF     		add	r7, sp, #0
 105              	.LCFI4:
 106              		.cfi_def_cfa_register 7
 129:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 107              		.loc 1 129 22
 108 0006 07F12003 		add	r3, r7, #32
 109 000a 3022     		movs	r2, #48
 110 000c 0021     		movs	r1, #0
 111 000e 1846     		mov	r0, r3
 112 0010 FFF7FEFF 		bl	memset
 130:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 113              		.loc 1 130 22
 114 0014 07F10C03 		add	r3, r7, #12
 115 0018 0022     		movs	r2, #0
 116 001a 1A60     		str	r2, [r3]
 117 001c 5A60     		str	r2, [r3, #4]
 118 001e 9A60     		str	r2, [r3, #8]
 119 0020 DA60     		str	r2, [r3, #12]
 120 0022 1A61     		str	r2, [r3, #16]
 121              	.LBB4:
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 133:Core/Src/main.c ****   */
 134:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 122              		.loc 1 134 3
 123 0024 0023     		movs	r3, #0
 124 0026 BB60     		str	r3, [r7, #8]
 125 0028 284B     		ldr	r3, .L9
 126 002a 1B6C     		ldr	r3, [r3, #64]
 127 002c 274A     		ldr	r2, .L9
 128 002e 43F08053 		orr	r3, r3, #268435456
 129 0032 1364     		str	r3, [r2, #64]
 130 0034 254B     		ldr	r3, .L9
 131 0036 1B6C     		ldr	r3, [r3, #64]
 132 0038 03F08053 		and	r3, r3, #268435456
 133 003c BB60     		str	r3, [r7, #8]
 134 003e BB68     		ldr	r3, [r7, #8]
 135              	.LBE4:
 136              	.LBB5:
 135:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 137              		.loc 1 135 3
 138 0040 0023     		movs	r3, #0
 139 0042 7B60     		str	r3, [r7, #4]
 140 0044 224B     		ldr	r3, .L9+4
 141 0046 1B68     		ldr	r3, [r3]
 142 0048 214A     		ldr	r2, .L9+4
 143 004a 43F48043 		orr	r3, r3, #16384
 144 004e 1360     		str	r3, [r2]
 145 0050 1F4B     		ldr	r3, .L9+4
 146 0052 1B68     		ldr	r3, [r3]
 147 0054 03F48043 		and	r3, r3, #16384
 148 0058 7B60     		str	r3, [r7, #4]
 149 005a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccmefYBc.s 			page 6


 150              	.LBE5:
 136:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 137:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 138:Core/Src/main.c ****   */
 139:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 151              		.loc 1 139 36
 152 005c 0223     		movs	r3, #2
 153 005e 3B62     		str	r3, [r7, #32]
 140:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 154              		.loc 1 140 30
 155 0060 0123     		movs	r3, #1
 156 0062 FB62     		str	r3, [r7, #44]
 141:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 157              		.loc 1 141 41
 158 0064 1023     		movs	r3, #16
 159 0066 3B63     		str	r3, [r7, #48]
 142:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 160              		.loc 1 142 34
 161 0068 0223     		movs	r3, #2
 162 006a BB63     		str	r3, [r7, #56]
 143:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 163              		.loc 1 143 35
 164 006c 0023     		movs	r3, #0
 165 006e FB63     		str	r3, [r7, #60]
 144:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 166              		.loc 1 144 30
 167 0070 0823     		movs	r3, #8
 168 0072 3B64     		str	r3, [r7, #64]
 145:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 169              		.loc 1 145 30
 170 0074 A823     		movs	r3, #168
 171 0076 7B64     		str	r3, [r7, #68]
 146:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 172              		.loc 1 146 30
 173 0078 0223     		movs	r3, #2
 174 007a BB64     		str	r3, [r7, #72]
 147:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 175              		.loc 1 147 30
 176 007c 0423     		movs	r3, #4
 177 007e FB64     		str	r3, [r7, #76]
 148:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 178              		.loc 1 148 7
 179 0080 07F12003 		add	r3, r7, #32
 180 0084 1846     		mov	r0, r3
 181 0086 FFF7FEFF 		bl	HAL_RCC_OscConfig
 182 008a 0346     		mov	r3, r0
 183              		.loc 1 148 6
 184 008c 002B     		cmp	r3, #0
 185 008e 01D0     		beq	.L6
 149:Core/Src/main.c ****   {
 150:Core/Src/main.c ****     Error_Handler();
 186              		.loc 1 150 5
 187 0090 FFF7FEFF 		bl	Error_Handler
 188              	.L6:
 151:Core/Src/main.c ****   }
 152:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 153:Core/Src/main.c ****   */
ARM GAS  /tmp/ccmefYBc.s 			page 7


 154:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 189              		.loc 1 154 31
 190 0094 0F23     		movs	r3, #15
 191 0096 FB60     		str	r3, [r7, #12]
 155:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 156:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 192              		.loc 1 156 34
 193 0098 0223     		movs	r3, #2
 194 009a 3B61     		str	r3, [r7, #16]
 157:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 195              		.loc 1 157 35
 196 009c 0023     		movs	r3, #0
 197 009e 7B61     		str	r3, [r7, #20]
 158:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 198              		.loc 1 158 36
 199 00a0 4FF4A053 		mov	r3, #5120
 200 00a4 BB61     		str	r3, [r7, #24]
 159:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 201              		.loc 1 159 36
 202 00a6 4FF48053 		mov	r3, #4096
 203 00aa FB61     		str	r3, [r7, #28]
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 204              		.loc 1 161 7
 205 00ac 07F10C03 		add	r3, r7, #12
 206 00b0 0521     		movs	r1, #5
 207 00b2 1846     		mov	r0, r3
 208 00b4 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 209 00b8 0346     		mov	r3, r0
 210              		.loc 1 161 6
 211 00ba 002B     		cmp	r3, #0
 212 00bc 01D0     		beq	.L8
 162:Core/Src/main.c ****   {
 163:Core/Src/main.c ****     Error_Handler();
 213              		.loc 1 163 5
 214 00be FFF7FEFF 		bl	Error_Handler
 215              	.L8:
 164:Core/Src/main.c ****   }
 165:Core/Src/main.c **** }
 216              		.loc 1 165 1
 217 00c2 00BF     		nop
 218 00c4 5037     		adds	r7, r7, #80
 219              	.LCFI5:
 220              		.cfi_def_cfa_offset 8
 221 00c6 BD46     		mov	sp, r7
 222              	.LCFI6:
 223              		.cfi_def_cfa_register 13
 224              		@ sp needed
 225 00c8 80BD     		pop	{r7, pc}
 226              	.L10:
 227 00ca 00BF     		.align	2
 228              	.L9:
 229 00cc 00380240 		.word	1073887232
 230 00d0 00700040 		.word	1073770496
 231              		.cfi_endproc
 232              	.LFE138:
 234              		.global	button_pin2
ARM GAS  /tmp/ccmefYBc.s 			page 8


 235              		.section	.bss.button_pin2,"aw",%nobits
 236              		.align	2
 239              	button_pin2:
 240 0000 00000000 		.space	12
 240      00000000 
 240      00000000 
 241              		.global	button_pin3
 242              		.section	.bss.button_pin3,"aw",%nobits
 243              		.align	2
 246              	button_pin3:
 247 0000 00000000 		.space	12
 247      00000000 
 247      00000000 
 248              		.global	button_pin4
 249              		.section	.bss.button_pin4,"aw",%nobits
 250              		.align	2
 253              	button_pin4:
 254 0000 00000000 		.space	12
 254      00000000 
 254      00000000 
 255              		.global	timeCount_10s
 256              		.section	.bss.timeCount_10s,"aw",%nobits
 257              		.align	2
 260              	timeCount_10s:
 261 0000 00000000 		.space	4
 262              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 263              		.align	1
 264              		.global	HAL_TIM_PeriodElapsedCallback
 265              		.syntax unified
 266              		.thumb
 267              		.thumb_func
 268              		.fpu fpv4-sp-d16
 270              	HAL_TIM_PeriodElapsedCallback:
 271              	.LFB139:
 166:Core/Src/main.c **** 
 167:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 168:Core/Src/main.c **** typedef struct {
 169:Core/Src/main.c ****         int cnt_10ms;
 170:Core/Src/main.c ****         int btn_press;
 171:Core/Src/main.c ****         int value;
 172:Core/Src/main.c **** }BUTTON;
 173:Core/Src/main.c **** 
 174:Core/Src/main.c **** BUTTON button_pin2 = {0};
 175:Core/Src/main.c **** BUTTON button_pin3 = {0};
 176:Core/Src/main.c **** BUTTON button_pin4 = {0};
 177:Core/Src/main.c **** 
 178:Core/Src/main.c **** 
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** //void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 181:Core/Src/main.c **** //        static unsigned char ledState = 0;
 182:Core/Src/main.c **** //        if(htim == (&htim6)){
 183:Core/Src/main.c **** ////              if(cnt_10ms++ >= 100){
 184:Core/Src/main.c **** ////                      cnt_10ms = 0;
 185:Core/Src/main.c **** ////                      printf("pin read :%d \r\n", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3));
 186:Core/Src/main.c **** ////              }
 187:Core/Src/main.c **** //                //printf("into the %s \r\n", __func__);
 188:Core/Src/main.c **** //                if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == 0){
ARM GAS  /tmp/ccmefYBc.s 			page 9


 189:Core/Src/main.c **** //                        if(button_pin2.cnt_10ms++ >= 8 && button_pin2.btn_press == 0){
 190:Core/Src/main.c **** //                                button_pin2.btn_press = 1;
 191:Core/Src/main.c **** //                                //printf("btn press \r\n");
 192:Core/Src/main.c **** //                                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, button_pin2.value);
 193:Core/Src/main.c **** //                                button_pin2.value = ~button_pin2.value;
 194:Core/Src/main.c **** //                        }
 195:Core/Src/main.c **** //                } else if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == 0){
 196:Core/Src/main.c **** //                        button_pin3.cnt_10ms++;
 197:Core/Src/main.c **** //                        if(button_pin3.cnt_10ms++ >= 8 && button_pin3.btn_press == 0){
 198:Core/Src/main.c **** //                                button_pin3.btn_press = 1;
 199:Core/Src/main.c **** //
 200:Core/Src/main.c **** //                                //function code
 201:Core/Src/main.c **** //                                TIM6->ARR += 10;
 202:Core/Src/main.c **** //                                if(TIM6->ARR >= 500){
 203:Core/Src/main.c **** //                                        TIM6->ARR = 50;
 204:Core/Src/main.c **** //                                }
 205:Core/Src/main.c **** //                                //printf("current htim9.Period is : %d \r\n", TIM6->ARR);
 206:Core/Src/main.c **** //                        }
 207:Core/Src/main.c **** //                } else {
 208:Core/Src/main.c **** //                        button_pin2.cnt_10ms = 0;
 209:Core/Src/main.c **** //                        button_pin2.btn_press = 0;
 210:Core/Src/main.c **** //
 211:Core/Src/main.c **** //                        button_pin3.cnt_10ms = 0;
 212:Core/Src/main.c **** //                        button_pin3.btn_press = 0;
 213:Core/Src/main.c **** //                }
 214:Core/Src/main.c **** //        }
 215:Core/Src/main.c **** //}
 216:Core/Src/main.c **** 
 217:Core/Src/main.c **** /* USER CODE END 4 */
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****  /**
 220:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 221:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 222:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 223:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 224:Core/Src/main.c ****   * @param  htim : TIM handle
 225:Core/Src/main.c ****   * @retval None
 226:Core/Src/main.c ****   */
 227:Core/Src/main.c **** int timeCount_10s = 0;
 228:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 229:Core/Src/main.c **** {
 272              		.loc 1 229 1
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 8
 275              		@ frame_needed = 1, uses_anonymous_args = 0
 276 0000 80B5     		push	{r7, lr}
 277              	.LCFI7:
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 7, -8
 280              		.cfi_offset 14, -4
 281 0002 82B0     		sub	sp, sp, #8
 282              	.LCFI8:
 283              		.cfi_def_cfa_offset 16
 284 0004 00AF     		add	r7, sp, #0
 285              	.LCFI9:
 286              		.cfi_def_cfa_register 7
 287 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccmefYBc.s 			page 10


 230:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 231:Core/Src/main.c ****   static uint16_t period = 0;
 232:Core/Src/main.c ****   if(htim == &htim6){
 288              		.loc 1 232 5
 289 0008 7B68     		ldr	r3, [r7, #4]
 290 000a 094A     		ldr	r2, .L15
 291 000c 9342     		cmp	r3, r2
 292 000e 04D1     		bne	.L12
 233:Core/Src/main.c **** 	if(timeCount_10s++ >= 100){
 293              		.loc 1 233 18
 294 0010 084B     		ldr	r3, .L15+4
 295 0012 1B68     		ldr	r3, [r3]
 296 0014 0133     		adds	r3, r3, #1
 297 0016 074A     		ldr	r2, .L15+4
 298 0018 1360     		str	r3, [r2]
 299              	.L12:
 234:Core/Src/main.c **** //  		printf("period : %d \r\n", period);
 235:Core/Src/main.c **** //		TIM9->ARR = period;
 236:Core/Src/main.c **** //		period += 10;
 237:Core/Src/main.c **** //		if(period >= 499){
 238:Core/Src/main.c **** //			period = 0;
 239:Core/Src/main.c **** //		}	
 240:Core/Src/main.c ****   	} 
 241:Core/Src/main.c ****   }
 242:Core/Src/main.c **** 
 243:Core/Src/main.c **** //  static unsigned char ledState = 0;
 244:Core/Src/main.c **** //  if(htim->Instance == TIM6)
 245:Core/Src/main.c **** //  {
 246:Core/Src/main.c **** ////              if(cnt_10ms++ >= 100){
 247:Core/Src/main.c **** ////                      cnt_10ms = 0;
 248:Core/Src/main.c **** ////                      printf("pin read :%d \r\n", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3));
 249:Core/Src/main.c **** ////              }
 250:Core/Src/main.c **** //                //printf("into the %s \r\n", __func__);
 251:Core/Src/main.c **** //                if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == 0){
 252:Core/Src/main.c **** //                        if(button_pin2.cnt_10ms++ >= 8 && button_pin2.btn_press == 0){
 253:Core/Src/main.c **** //                                button_pin2.btn_press = 1;
 254:Core/Src/main.c **** //                                //printf("btn press \r\n");
 255:Core/Src/main.c **** //                                HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, button_pin2.value);
 256:Core/Src/main.c **** //                                button_pin2.value = ~button_pin2.value;
 257:Core/Src/main.c **** //                        }
 258:Core/Src/main.c **** //                } else if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == 0){
 259:Core/Src/main.c **** //                        button_pin3.cnt_10ms++;
 260:Core/Src/main.c **** //                        if(button_pin3.cnt_10ms++ >= 8 && button_pin3.btn_press == 0){
 261:Core/Src/main.c **** //                                button_pin3.btn_press = 1;
 262:Core/Src/main.c **** //
 263:Core/Src/main.c **** //                                //function code
 264:Core/Src/main.c **** //                                TIM6->ARR += 10;
 265:Core/Src/main.c **** //                                if(TIM6->ARR >= 500){
 266:Core/Src/main.c **** //                                        TIM6->ARR = 50;
 267:Core/Src/main.c **** //                                }
 268:Core/Src/main.c **** //                                //printf("current htim9.Period is : %d \r\n", TIM6->ARR);
 269:Core/Src/main.c **** //                        }
 270:Core/Src/main.c **** //                } else {
 271:Core/Src/main.c **** //                        button_pin2.cnt_10ms = 0;
 272:Core/Src/main.c **** //                        button_pin2.btn_press = 0;
 273:Core/Src/main.c **** //
 274:Core/Src/main.c **** //                        button_pin3.cnt_10ms = 0;
ARM GAS  /tmp/ccmefYBc.s 			page 11


 275:Core/Src/main.c **** //                        button_pin3.btn_press = 0;
 276:Core/Src/main.c **** //                }
 277:Core/Src/main.c **** //
 278:Core/Src/main.c **** //  }
 279:Core/Src/main.c **** 
 280:Core/Src/main.c **** 
 281:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 282:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 300              		.loc 1 282 11
 301 001a 7B68     		ldr	r3, [r7, #4]
 302 001c 1B68     		ldr	r3, [r3]
 303              		.loc 1 282 6
 304 001e 064A     		ldr	r2, .L15+8
 305 0020 9342     		cmp	r3, r2
 306 0022 01D1     		bne	.L14
 283:Core/Src/main.c ****     HAL_IncTick();
 307              		.loc 1 283 5
 308 0024 FFF7FEFF 		bl	HAL_IncTick
 309              	.L14:
 284:Core/Src/main.c ****   }
 285:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 288:Core/Src/main.c **** }
 310              		.loc 1 288 1
 311 0028 00BF     		nop
 312 002a 0837     		adds	r7, r7, #8
 313              	.LCFI10:
 314              		.cfi_def_cfa_offset 8
 315 002c BD46     		mov	sp, r7
 316              	.LCFI11:
 317              		.cfi_def_cfa_register 13
 318              		@ sp needed
 319 002e 80BD     		pop	{r7, pc}
 320              	.L16:
 321              		.align	2
 322              	.L15:
 323 0030 00000000 		.word	htim6
 324 0034 00000000 		.word	timeCount_10s
 325 0038 00000140 		.word	1073807360
 326              		.cfi_endproc
 327              	.LFE139:
 329              		.section	.text.Error_Handler,"ax",%progbits
 330              		.align	1
 331              		.global	Error_Handler
 332              		.syntax unified
 333              		.thumb
 334              		.thumb_func
 335              		.fpu fpv4-sp-d16
 337              	Error_Handler:
 338              	.LFB140:
 289:Core/Src/main.c **** 
 290:Core/Src/main.c **** /**
 291:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 292:Core/Src/main.c ****   * @retval None
 293:Core/Src/main.c ****   */
 294:Core/Src/main.c **** void Error_Handler(void)
ARM GAS  /tmp/ccmefYBc.s 			page 12


 295:Core/Src/main.c **** {
 339              		.loc 1 295 1
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 1, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 344 0000 80B4     		push	{r7}
 345              	.LCFI12:
 346              		.cfi_def_cfa_offset 4
 347              		.cfi_offset 7, -4
 348 0002 00AF     		add	r7, sp, #0
 349              	.LCFI13:
 350              		.cfi_def_cfa_register 7
 351              	.LBB6:
 352              	.LBB7:
 353              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
ARM GAS  /tmp/ccmefYBc.s 			page 13


  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
ARM GAS  /tmp/ccmefYBc.s 			page 14


  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 354              		.loc 2 142 3
 355              		.syntax unified
 356              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 357 0004 72B6     		cpsid i
 358              	@ 0 "" 2
 359              		.thumb
 360              		.syntax unified
 361              	.L18:
 362              	.LBE7:
 363              	.LBE6:
 296:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 297:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 298:Core/Src/main.c ****   __disable_irq();
ARM GAS  /tmp/ccmefYBc.s 			page 15


 299:Core/Src/main.c ****   while (1)
 364              		.loc 1 299 9 discriminator 1
 365 0006 FEE7     		b	.L18
 366              		.cfi_endproc
 367              	.LFE140:
 369              		.section	.bss.period.11443,"aw",%nobits
 370              		.align	1
 373              	period.11443:
 374 0000 0000     		.space	2
 375              		.text
 376              	.Letext0:
 377              		.file 3 "/home/mego/microros_ws/firmware/toolchain/arm-none-eabi/include/machine/_default_types.h"
 378              		.file 4 "/home/mego/microros_ws/firmware/toolchain/arm-none-eabi/include/sys/_stdint.h"
 379              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 380              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 381              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 382              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 383              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 384              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 385              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 386              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_eth.h"
 387              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 388              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 389              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 390              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 391              		.file 17 "/home/mego/microros_ws/firmware/toolchain/lib/gcc/arm-none-eabi/8.3.1/include/stddef.h"
 392              		.file 18 "/home/mego/microros_ws/firmware/toolchain/arm-none-eabi/include/sys/_types.h"
 393              		.file 19 "/home/mego/microros_ws/firmware/toolchain/arm-none-eabi/include/sys/reent.h"
 394              		.file 20 "/home/mego/microros_ws/firmware/toolchain/arm-none-eabi/include/sys/lock.h"
 395              		.file 21 "/home/mego/microros_ws/firmware/toolchain/arm-none-eabi/include/stdlib.h"
 396              		.file 22 "Middlewares/Third_Party/LwIP/src/include/lwip/arch.h"
 397              		.file 23 "/home/mego/microros_ws/firmware/toolchain/arm-none-eabi/include/ctype.h"
 398              		.file 24 "Middlewares/Third_Party/LwIP/src/include/lwip/memp.h"
 399              		.file 25 "Middlewares/Third_Party/LwIP/src/include/lwip/priv/memp_priv.h"
 400              		.file 26 "Middlewares/Third_Party/LwIP/src/include/lwip/err.h"
 401              		.file 27 "Middlewares/Third_Party/LwIP/src/include/lwip/pbuf.h"
 402              		.file 28 "Middlewares/Third_Party/LwIP/src/include/lwip/ip4_addr.h"
 403              		.file 29 "Middlewares/Third_Party/LwIP/src/include/lwip/ip_addr.h"
 404              		.file 30 "Middlewares/Third_Party/LwIP/src/include/lwip/netif.h"
 405              		.file 31 "Middlewares/Third_Party/LwIP/src/include/lwip/prot/ip4.h"
 406              		.file 32 "Middlewares/Third_Party/LwIP/src/include/lwip/prot/ethernet.h"
 407              		.file 33 "Middlewares/Third_Party/LwIP/src/include/netif/ethernet.h"
 408              		.file 34 "Middlewares/Third_Party/LwIP/src/include/lwip/ip.h"
 409              		.file 35 "Middlewares/Third_Party/LwIP/src/include/lwip/udp.h"
 410              		.file 36 "Middlewares/Third_Party/LwIP/system/arch/sys_arch.h"
 411              		.file 37 "Middlewares/Third_Party/LwIP/src/include/lwip/timeouts.h"
 412              		.file 38 "Middlewares/Third_Party/LwIP/src/include/lwip/tcpip.h"
 413              		.file 39 "LWIP/App/lwip.h"
 414              		.file 40 "Core/Inc/tim.h"
 415              		.file 41 "Core/Inc/usart.h"
ARM GAS  /tmp/ccmefYBc.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccmefYBc.s:18     .rodata:0000000000000000 $d
     /tmp/ccmefYBc.s:22     .text.main:0000000000000000 $t
     /tmp/ccmefYBc.s:30     .text.main:0000000000000000 main
     /tmp/ccmefYBc.s:90     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccmefYBc.s:77     .text.main:000000000000003c $d
     /tmp/ccmefYBc.s:83     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccmefYBc.s:337    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccmefYBc.s:229    .text.SystemClock_Config:00000000000000cc $d
     /tmp/ccmefYBc.s:239    .bss.button_pin2:0000000000000000 button_pin2
     /tmp/ccmefYBc.s:236    .bss.button_pin2:0000000000000000 $d
     /tmp/ccmefYBc.s:246    .bss.button_pin3:0000000000000000 button_pin3
     /tmp/ccmefYBc.s:243    .bss.button_pin3:0000000000000000 $d
     /tmp/ccmefYBc.s:253    .bss.button_pin4:0000000000000000 button_pin4
     /tmp/ccmefYBc.s:250    .bss.button_pin4:0000000000000000 $d
     /tmp/ccmefYBc.s:260    .bss.timeCount_10s:0000000000000000 timeCount_10s
     /tmp/ccmefYBc.s:257    .bss.timeCount_10s:0000000000000000 $d
     /tmp/ccmefYBc.s:263    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccmefYBc.s:270    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccmefYBc.s:323    .text.HAL_TIM_PeriodElapsedCallback:0000000000000030 $d
     /tmp/ccmefYBc.s:330    .text.Error_Handler:0000000000000000 $t
     /tmp/ccmefYBc.s:370    .bss.period.11443:0000000000000000 $d
     /tmp/ccmefYBc.s:373    .bss.period.11443:0000000000000000 period.11443

UNDEFINED SYMBOLS
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_USART1_UART_Init
MX_TIM9_Init
MX_TIM6_Init
HAL_TIM_Base_Start_IT
puts
osKernelInitialize
MX_FREERTOS_Init
osKernelStart
htim6
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_IncTick
